
c:/Users/Anders/Documents/ParticleProjects/IOT2/IOT-5/target/5.0.1/argon/IOT-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006df4  000b4020  000b4020  00004020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bae14  000bae14  0000ae14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001e0  2003ccfc  000bae38  0000ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001914  2003cee0  2003cee0  0001cee0  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bb018  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bb01c  000bb01c  0001b01c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bb022  000bb022  0001b022  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bb046  000bb046  0001b046  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0014aae9  00000000  00000000  0001b04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016aaa  00000000  00000000  00165b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00041882  00000000  00000000  0017c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000031f0  00000000  00000000  001bde5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ba30  00000000  00000000  001c104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d0a7  00000000  00000000  001cca7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000484b0  00000000  00000000  00209b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001413d0  00000000  00000000  00251fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aae4  00000000  00000000  003933a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2ulz>:
   b490c:	b5d0      	push	{r4, r6, r7, lr}
   b490e:	4b0c      	ldr	r3, [pc, #48]	; (b4940 <__aeabi_d2ulz+0x34>)
   b4910:	2200      	movs	r2, #0
   b4912:	4606      	mov	r6, r0
   b4914:	460f      	mov	r7, r1
   b4916:	f7ff fd3f 	bl	b4398 <__aeabi_dmul>
   b491a:	f7ff ffd7 	bl	b48cc <__aeabi_d2uiz>
   b491e:	4604      	mov	r4, r0
   b4920:	f7ff fcc0 	bl	b42a4 <__aeabi_ui2d>
   b4924:	4b07      	ldr	r3, [pc, #28]	; (b4944 <__aeabi_d2ulz+0x38>)
   b4926:	2200      	movs	r2, #0
   b4928:	f7ff fd36 	bl	b4398 <__aeabi_dmul>
   b492c:	4602      	mov	r2, r0
   b492e:	460b      	mov	r3, r1
   b4930:	4630      	mov	r0, r6
   b4932:	4639      	mov	r1, r7
   b4934:	f7ff fb78 	bl	b4028 <__aeabi_dsub>
   b4938:	f7ff ffc8 	bl	b48cc <__aeabi_d2uiz>
   b493c:	4621      	mov	r1, r4
   b493e:	bdd0      	pop	{r4, r6, r7, pc}
   b4940:	3df00000 	.word	0x3df00000
   b4944:	41f00000 	.word	0x41f00000
	...

000b4950 <memchr>:
   b4950:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b4954:	2a10      	cmp	r2, #16
   b4956:	db2b      	blt.n	b49b0 <memchr+0x60>
   b4958:	f010 0f07 	tst.w	r0, #7
   b495c:	d008      	beq.n	b4970 <memchr+0x20>
   b495e:	f810 3b01 	ldrb.w	r3, [r0], #1
   b4962:	3a01      	subs	r2, #1
   b4964:	428b      	cmp	r3, r1
   b4966:	d02d      	beq.n	b49c4 <memchr+0x74>
   b4968:	f010 0f07 	tst.w	r0, #7
   b496c:	b342      	cbz	r2, b49c0 <memchr+0x70>
   b496e:	d1f6      	bne.n	b495e <memchr+0xe>
   b4970:	b4f0      	push	{r4, r5, r6, r7}
   b4972:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   b4976:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   b497a:	f022 0407 	bic.w	r4, r2, #7
   b497e:	f07f 0700 	mvns.w	r7, #0
   b4982:	2300      	movs	r3, #0
   b4984:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   b4988:	3c08      	subs	r4, #8
   b498a:	ea85 0501 	eor.w	r5, r5, r1
   b498e:	ea86 0601 	eor.w	r6, r6, r1
   b4992:	fa85 f547 	uadd8	r5, r5, r7
   b4996:	faa3 f587 	sel	r5, r3, r7
   b499a:	fa86 f647 	uadd8	r6, r6, r7
   b499e:	faa5 f687 	sel	r6, r5, r7
   b49a2:	b98e      	cbnz	r6, b49c8 <memchr+0x78>
   b49a4:	d1ee      	bne.n	b4984 <memchr+0x34>
   b49a6:	bcf0      	pop	{r4, r5, r6, r7}
   b49a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   b49ac:	f002 0207 	and.w	r2, r2, #7
   b49b0:	b132      	cbz	r2, b49c0 <memchr+0x70>
   b49b2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b49b6:	3a01      	subs	r2, #1
   b49b8:	ea83 0301 	eor.w	r3, r3, r1
   b49bc:	b113      	cbz	r3, b49c4 <memchr+0x74>
   b49be:	d1f8      	bne.n	b49b2 <memchr+0x62>
   b49c0:	2000      	movs	r0, #0
   b49c2:	4770      	bx	lr
   b49c4:	3801      	subs	r0, #1
   b49c6:	4770      	bx	lr
   b49c8:	2d00      	cmp	r5, #0
   b49ca:	bf06      	itte	eq
   b49cc:	4635      	moveq	r5, r6
   b49ce:	3803      	subeq	r0, #3
   b49d0:	3807      	subne	r0, #7
   b49d2:	f015 0f01 	tst.w	r5, #1
   b49d6:	d107      	bne.n	b49e8 <memchr+0x98>
   b49d8:	3001      	adds	r0, #1
   b49da:	f415 7f80 	tst.w	r5, #256	; 0x100
   b49de:	bf02      	ittt	eq
   b49e0:	3001      	addeq	r0, #1
   b49e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   b49e6:	3001      	addeq	r0, #1
   b49e8:	bcf0      	pop	{r4, r5, r6, r7}
   b49ea:	3801      	subs	r0, #1
   b49ec:	4770      	bx	lr
   b49ee:	bf00      	nop

000b49f0 <strcmp>:
   b49f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f8:	2a01      	cmp	r2, #1
   b49fa:	bf28      	it	cs
   b49fc:	429a      	cmpcs	r2, r3
   b49fe:	d0f7      	beq.n	b49f0 <strcmp>
   b4a00:	1ad0      	subs	r0, r2, r3
   b4a02:	4770      	bx	lr

000b4a04 <strlen>:
   b4a04:	4603      	mov	r3, r0
   b4a06:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a0a:	2a00      	cmp	r2, #0
   b4a0c:	d1fb      	bne.n	b4a06 <strlen+0x2>
   b4a0e:	1a18      	subs	r0, r3, r0
   b4a10:	3801      	subs	r0, #1
   b4a12:	4770      	bx	lr

000b4a14 <__aeabi_d2lz>:
   b4a14:	b538      	push	{r3, r4, r5, lr}
   b4a16:	2200      	movs	r2, #0
   b4a18:	2300      	movs	r3, #0
   b4a1a:	4604      	mov	r4, r0
   b4a1c:	460d      	mov	r5, r1
   b4a1e:	f7ff ff2d 	bl	b487c <__aeabi_dcmplt>
   b4a22:	b928      	cbnz	r0, b4a30 <__aeabi_d2lz+0x1c>
   b4a24:	4620      	mov	r0, r4
   b4a26:	4629      	mov	r1, r5
   b4a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a2c:	f7ff bf6e 	b.w	b490c <__aeabi_d2ulz>
   b4a30:	4620      	mov	r0, r4
   b4a32:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a36:	f7ff ff69 	bl	b490c <__aeabi_d2ulz>
   b4a3a:	4240      	negs	r0, r0
   b4a3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a40:	bd38      	pop	{r3, r4, r5, pc}
   b4a42:	bf00      	nop

000b4a44 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	4809      	ldr	r0, [pc, #36]	; (b4a6c <module_user_pre_init+0x28>)
   b4a46:	490a      	ldr	r1, [pc, #40]	; (b4a70 <module_user_pre_init+0x2c>)
   b4a48:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a4a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a4c:	d005      	beq.n	b4a5a <module_user_pre_init+0x16>
   b4a4e:	4a09      	ldr	r2, [pc, #36]	; (b4a74 <module_user_pre_init+0x30>)
   b4a50:	4282      	cmp	r2, r0
   b4a52:	d002      	beq.n	b4a5a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a54:	1a12      	subs	r2, r2, r0
   b4a56:	f003 fbca 	bl	b81ee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a5a:	4807      	ldr	r0, [pc, #28]	; (b4a78 <module_user_pre_init+0x34>)
   b4a5c:	4a07      	ldr	r2, [pc, #28]	; (b4a7c <module_user_pre_init+0x38>)
   b4a5e:	2100      	movs	r1, #0
   b4a60:	1a12      	subs	r2, r2, r0
   b4a62:	f003 fbec 	bl	b823e <memset>
    return &link_global_data_start;
}
   b4a66:	4801      	ldr	r0, [pc, #4]	; (b4a6c <module_user_pre_init+0x28>)
   b4a68:	bd08      	pop	{r3, pc}
   b4a6a:	bf00      	nop
   b4a6c:	2003ccfc 	.word	0x2003ccfc
   b4a70:	000bae38 	.word	0x000bae38
   b4a74:	2003cedc 	.word	0x2003cedc
   b4a78:	2003cee0 	.word	0x2003cee0
   b4a7c:	2003e7f4 	.word	0x2003e7f4

000b4a80 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a80:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	4e07      	ldr	r6, [pc, #28]	; (b4aa0 <module_user_init+0x20>)
   b4a84:	4c07      	ldr	r4, [pc, #28]	; (b4aa4 <module_user_init+0x24>)
    module_user_init_hook();
   b4a86:	f001 ff83 	bl	b6990 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a8a:	1ba4      	subs	r4, r4, r6
   b4a8c:	08a4      	lsrs	r4, r4, #2
   b4a8e:	2500      	movs	r5, #0
   b4a90:	42ac      	cmp	r4, r5
   b4a92:	d100      	bne.n	b4a96 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a94:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a96:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a9a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a9c:	3501      	adds	r5, #1
   b4a9e:	e7f7      	b.n	b4a90 <module_user_init+0x10>
   b4aa0:	000badec 	.word	0x000badec
   b4aa4:	000bae14 	.word	0x000bae14

000b4aa8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa8:	f000 bc1c 	b.w	b52e4 <setup>

000b4aac <module_user_loop>:
}

void module_user_loop() {
   b4aac:	b508      	push	{r3, lr}
    loop();
   b4aae:	f000 fadd 	bl	b506c <loop>
    _post_loop();
}
   b4ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4ab6:	f001 bf23 	b.w	b6900 <_post_loop>

000b4aba <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4aba:	f001 bb61 	b.w	b6180 <malloc>

000b4abe <_Znaj>:
   b4abe:	f001 bb5f 	b.w	b6180 <malloc>

000b4ac2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4ac2:	f001 bb65 	b.w	b6190 <free>

000b4ac6 <_ZdaPv>:
   b4ac6:	f001 bb63 	b.w	b6190 <free>

000b4aca <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4aca:	f001 bb61 	b.w	b6190 <free>

000b4ace <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ace:	7800      	ldrb	r0, [r0, #0]
   b4ad0:	fab0 f080 	clz	r0, r0
   b4ad4:	0940      	lsrs	r0, r0, #5
   b4ad6:	4770      	bx	lr

000b4ad8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ad8:	2301      	movs	r3, #1
   b4ada:	7003      	strb	r3, [r0, #0]
   b4adc:	4770      	bx	lr
	...

000b4ae0 <_Z8callbackPcPhj>:
        client.subscribe("power/prices");
    }
}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4ae0:	b508      	push	{r3, lr}
    Serial.println("callback called");
   b4ae2:	f002 fb07 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4ae6:	4903      	ldr	r1, [pc, #12]	; (b4af4 <_Z8callbackPcPhj+0x14>)
   b4ae8:	f001 fda9 	bl	b663e <_ZN5Print7printlnEPKc>
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    */

    work = true;
   b4aec:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <_Z8callbackPcPhj+0x18>)
   b4aee:	2201      	movs	r2, #1
   b4af0:	701a      	strb	r2, [r3, #0]
}
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	000ba218 	.word	0x000ba218
   b4af8:	2003e67e 	.word	0x2003e67e

000b4afc <_Z13handle_sensorv>:

void handle_sensor(void)
{
   b4afc:	b508      	push	{r3, lr}
    Serial.println("handle_sensor called");
   b4afe:	f002 faf9 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4b02:	490b      	ldr	r1, [pc, #44]	; (b4b30 <_Z13handle_sensorv+0x34>)
   b4b04:	f001 fd9b 	bl	b663e <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b08:	f001 f926 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
    unsigned long delta;
    unsigned long current_reading = millis();

    if ((delta = current_reading - last_read) > 100)
   b4b0c:	4909      	ldr	r1, [pc, #36]	; (b4b34 <_Z13handle_sensorv+0x38>)
   b4b0e:	680b      	ldr	r3, [r1, #0]
   b4b10:	1ac3      	subs	r3, r0, r3
   b4b12:	2b64      	cmp	r3, #100	; 0x64
   b4b14:	d90a      	bls.n	b4b2c <_Z13handle_sensorv+0x30>
    {
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4b16:	4a08      	ldr	r2, [pc, #32]	; (b4b38 <_Z13handle_sensorv+0x3c>)
   b4b18:	fbb2 f3f3 	udiv	r3, r2, r3
   b4b1c:	4a07      	ldr	r2, [pc, #28]	; (b4b3c <_Z13handle_sensorv+0x40>)
        last_read = current_reading;
   b4b1e:	6008      	str	r0, [r1, #0]
        calc_power = WATT_CONVERSION_CONSTANT / delta;
   b4b20:	6013      	str	r3, [r2, #0]
        printer = true; // Just a debuging flag
   b4b22:	4a07      	ldr	r2, [pc, #28]	; (b4b40 <_Z13handle_sensorv+0x44>)
   b4b24:	2301      	movs	r3, #1
   b4b26:	7013      	strb	r3, [r2, #0]
        transmit_value = true;
   b4b28:	4a06      	ldr	r2, [pc, #24]	; (b4b44 <_Z13handle_sensorv+0x48>)
   b4b2a:	7013      	strb	r3, [r2, #0]
    }
}
   b4b2c:	bd08      	pop	{r3, pc}
   b4b2e:	bf00      	nop
   b4b30:	000ba228 	.word	0x000ba228
   b4b34:	2003d1ac 	.word	0x2003d1ac
   b4b38:	0036ee80 	.word	0x0036ee80
   b4b3c:	2003cefc 	.word	0x2003cefc
   b4b40:	2003d211 	.word	0x2003d211
   b4b44:	2003e67d 	.word	0x2003e67d

000b4b48 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4b48:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4b4a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4b4c:	4606      	mov	r6, r0
   b4b4e:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4b50:	da0b      	bge.n	b4b6a <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b4b52:	2a0a      	cmp	r2, #10
   b4b54:	d109      	bne.n	b4b6a <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b4b56:	212d      	movs	r1, #45	; 0x2d
   b4b58:	f001 fd62 	bl	b6620 <_ZN5Print5printEc>
            val = -n;
   b4b5c:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b5e:	b2ea      	uxtb	r2, r5
   b4b60:	4630      	mov	r0, r6
    }
}
   b4b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4b66:	f001 bd74 	b.w	b6652 <_ZN5Print11printNumberEmh>
            val = n;
   b4b6a:	4621      	mov	r1, r4
   b4b6c:	e7f7      	b.n	b4b5e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>
	...

000b4b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0>:
       *  the string is truncated.  If @a __p is beyond end of string,
       *  out_of_range is thrown.  The value of the string doesn't
       *  change if an error is thrown.
      */
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
   b4b70:	b538      	push	{r3, r4, r5, lr}
   b4b72:	6843      	ldr	r3, [r0, #4]
	if (__pos > this->size())
   b4b74:	4299      	cmp	r1, r3
      erase(size_type __pos = 0, size_type __n = npos)
   b4b76:	4605      	mov	r5, r0
	if (__pos > this->size())
   b4b78:	d904      	bls.n	b4b84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0+0x14>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
   b4b7a:	460a      	mov	r2, r1
   b4b7c:	480a      	ldr	r0, [pc, #40]	; (b4ba8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0+0x38>)
   b4b7e:	490b      	ldr	r1, [pc, #44]	; (b4bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0+0x3c>)
   b4b80:	f003 f83f 	bl	b7c02 <_ZSt24__throw_out_of_range_fmtPKcz>
      {
	_M_check(__pos, "basic_string::erase");
	if (__n == npos)
   b4b84:	f1b2 3fff 	cmp.w	r2, #4294967295
   b4b88:	d104      	bne.n	b4b94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0+0x24>
      { _M_string_length = __length; }
   b4b8a:	6069      	str	r1, [r5, #4]
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
   b4b8c:	6803      	ldr	r3, [r0, #0]
   b4b8e:	2200      	movs	r2, #0
   b4b90:	545a      	strb	r2, [r3, r1]
	  this->_M_set_length(__pos);
	else if (__n != 0)
	  this->_M_erase(__pos, _M_limit(__pos, __n));
	return *this;
      }
   b4b92:	bd38      	pop	{r3, r4, r5, pc}
	else if (__n != 0)
   b4b94:	2a00      	cmp	r2, #0
   b4b96:	d0fc      	beq.n	b4b92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0+0x22>
	const bool __testoff =  __off < this->size() - __pos;
   b4b98:	1a5b      	subs	r3, r3, r1
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b4b9a:	429a      	cmp	r2, r3
   b4b9c:	bf28      	it	cs
   b4b9e:	461a      	movcs	r2, r3
      }
   b4ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  this->_M_erase(__pos, _M_limit(__pos, __n));
   b4ba4:	f003 b974 	b.w	b7e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
   b4ba8:	000ba251 	.word	0x000ba251
   b4bac:	000ba23d 	.word	0x000ba23d

000b4bb0 <_Z9myHandlerPKcS0_>:

void myHandler(const char *event, const char *data)
{
   b4bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    populate = false;   // We're asuming this isn't the last transmission.
    rec_cnt++;          // increment recieved transmissions counter.
   b4bb4:	4f86      	ldr	r7, [pc, #536]	; (b4dd0 <_Z9myHandlerPKcS0_+0x220>)
    populate = false;   // We're asuming this isn't the last transmission.
   b4bb6:	f8df 9264 	ldr.w	r9, [pc, #612]	; b4e1c <_Z9myHandlerPKcS0_+0x26c>
    rec_cnt++;          // increment recieved transmissions counter.
   b4bba:	783b      	ldrb	r3, [r7, #0]
    populate = false;   // We're asuming this isn't the last transmission.
   b4bbc:	2500      	movs	r5, #0
    rec_cnt++;          // increment recieved transmissions counter.
   b4bbe:	3301      	adds	r3, #1
   b4bc0:	703b      	strb	r3, [r7, #0]
{
   b4bc2:	460c      	mov	r4, r1
   b4bc4:	4606      	mov	r6, r0
    populate = false;   // We're asuming this isn't the last transmission.
   b4bc6:	f889 5000 	strb.w	r5, [r9]

    Serial.print("DATA PACKAGE #");
   b4bca:	f002 fa93 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4bce:	4981      	ldr	r1, [pc, #516]	; (b4dd4 <_Z9myHandlerPKcS0_+0x224>)
   b4bd0:	f001 fd22 	bl	b6618 <_ZN5Print5printEPKc>
    Serial.println(rec_cnt);
   b4bd4:	f002 fa8e 	bl	b70f4 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4bd8:	220a      	movs	r2, #10
   b4bda:	7839      	ldrb	r1, [r7, #0]
   b4bdc:	4680      	mov	r8, r0
   b4bde:	f001 fd38 	bl	b6652 <_ZN5Print11printNumberEmh>
        n += println();
   b4be2:	4640      	mov	r0, r8
   b4be4:	f001 fd1f 	bl	b6626 <_ZN5Print7printlnEv>
    Serial.println(data);
   b4be8:	f002 fa84 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4bec:	4621      	mov	r1, r4
   b4bee:	f001 fd26 	bl	b663e <_ZN5Print7printlnEPKc>

    /* When transmission are greater than 512 bytes, it will be split into 512
     * byte parts. The final transmission part should therefore be less than 512.
     * Save transmission size into variable so we can act on it
     */
    int transmission_size = strlen(data);
   b4bf2:	4620      	mov	r0, r4
   b4bf4:	f7ff ff06 	bl	b4a04 <strlen>
   b4bf8:	4680      	mov	r8, r0
    Serial.print("Transmission length: ");
   b4bfa:	f002 fa7b 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4bfe:	4976      	ldr	r1, [pc, #472]	; (b4dd8 <_Z9myHandlerPKcS0_+0x228>)
   b4c00:	f001 fd0a 	bl	b6618 <_ZN5Print5printEPKc>
    Serial.println(transmission_size);
   b4c04:	f002 fa76 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4c08:	220a      	movs	r2, #10
   b4c0a:	4641      	mov	r1, r8
   b4c0c:	4682      	mov	sl, r0
size_t Print::print(T n, int base)
   b4c0e:	f7ff ff9b 	bl	b4b48 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4c12:	4650      	mov	r0, sl
   b4c14:	f001 fd07 	bl	b6626 <_ZN5Print7printlnEv>
    // "eventname/<transmission part no>"
    char event_str[12];
    strcpy(event_str, event);
   b4c18:	4631      	mov	r1, r6
   b4c1a:	a801      	add	r0, sp, #4
   b4c1c:	f003 fb55 	bl	b82ca <strcpy>

    Serial.println("############## EVENT #################");
   b4c20:	f002 fa68 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4c24:	496d      	ldr	r1, [pc, #436]	; (b4ddc <_Z9myHandlerPKcS0_+0x22c>)
   b4c26:	f001 fd0a 	bl	b663e <_ZN5Print7printlnEPKc>
    Serial.println(event);
   b4c2a:	f002 fa63 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4c2e:	4631      	mov	r1, r6
   b4c30:	f001 fd05 	bl	b663e <_ZN5Print7printlnEPKc>
    Serial.println("############## EVENT END #####################");
   b4c34:	f002 fa5e 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4c38:	4969      	ldr	r1, [pc, #420]	; (b4de0 <_Z9myHandlerPKcS0_+0x230>)
   b4c3a:	f001 fd00 	bl	b663e <_ZN5Print7printlnEPKc>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b4c3e:	4620      	mov	r0, r4
   b4c40:	f7ff fee0 	bl	b4a04 <strlen>
   b4c44:	4602      	mov	r2, r0
	if (this->max_size() - (this->size() - __n1) < __n2)
   b4c46:	4867      	ldr	r0, [pc, #412]	; (b4de4 <_Z9myHandlerPKcS0_+0x234>)
   b4c48:	6843      	ldr	r3, [r0, #4]
   b4c4a:	f1c3 537f 	rsb	r3, r3, #1069547520	; 0x3fc00000
   b4c4e:	f503 137f 	add.w	r3, r3, #4177920	; 0x3fc000
   b4c52:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   b4c56:	333f      	adds	r3, #63	; 0x3f
   b4c58:	429a      	cmp	r2, r3
   b4c5a:	d902      	bls.n	b4c62 <_Z9myHandlerPKcS0_+0xb2>
	  __throw_length_error(__N(__s));
   b4c5c:	4862      	ldr	r0, [pc, #392]	; (b4de8 <_Z9myHandlerPKcS0_+0x238>)
   b4c5e:	f002 ffcd 	bl	b7bfc <_ZSt20__throw_length_errorPKc>
	return _M_append(__s, __n);
   b4c62:	4621      	mov	r1, r4
   b4c64:	f003 f929 	bl	b7eba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
    // Extract the numbered part of eventname and use it for indexing "rec_data"
    //strcpy(rec_data[atoi(strtok(event_str, "prices/"))], data);


    // prolly easier to use transmission counter for indexing.
    strcpy(rec_data[(rec_cnt - 1)], data);
   b4c68:	783b      	ldrb	r3, [r7, #0]
   b4c6a:	4e60      	ldr	r6, [pc, #384]	; (b4dec <_Z9myHandlerPKcS0_+0x23c>)
   b4c6c:	3b01      	subs	r3, #1
   b4c6e:	eb03 2343 	add.w	r3, r3, r3, lsl #9
   b4c72:	4621      	mov	r1, r4
   b4c74:	18f0      	adds	r0, r6, r3
   b4c76:	f003 fb28 	bl	b82ca <strcpy>
    // if (transmission_size < 512)
    // {
    //     populate = true;
    // }

    if (transmission_size < 512)
   b4c7a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b4c7e:	f080 80a3 	bcs.w	b4dc8 <_Z9myHandlerPKcS0_+0x218>
    {
        populate = true;
   b4c82:	2301      	movs	r3, #1
   b4c84:	f889 3000 	strb.w	r3, [r9]
        
        Serial.println("POPULATEEED!! Im so happy.");
   b4c88:	f002 fa34 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4c8c:	4958      	ldr	r1, [pc, #352]	; (b4df0 <_Z9myHandlerPKcS0_+0x240>)
   b4c8e:	f001 fcd6 	bl	b663e <_ZN5Print7printlnEPKc>
        Serial.println();
   b4c92:	f002 fa2f 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4c96:	f001 fcc6 	bl	b6626 <_ZN5Print7printlnEv>

        // Concatenate all transmission into one string
        for (int i = 0; i <= rec_cnt; i++)
        {
            strcat(temp, rec_data[i]);
   b4c9a:	4a56      	ldr	r2, [pc, #344]	; (b4df4 <_Z9myHandlerPKcS0_+0x244>)
   b4c9c:	4631      	mov	r1, r6
   b4c9e:	4610      	mov	r0, r2
   b4ca0:	f003 fb04 	bl	b82ac <strcat>
        for (int i = 0; i <= rec_cnt; i++)
   b4ca4:	783b      	ldrb	r3, [r7, #0]
   b4ca6:	3501      	adds	r5, #1
   b4ca8:	42ab      	cmp	r3, r5
            strcat(temp, rec_data[i]);
   b4caa:	4602      	mov	r2, r0
        for (int i = 0; i <= rec_cnt; i++)
   b4cac:	f206 2601 	addw	r6, r6, #513	; 0x201
   b4cb0:	daf4      	bge.n	b4c9c <_Z9myHandlerPKcS0_+0xec>
        }

        // Tokenize the string. i.e. split the string so we can get to the data
        token = strtok(temp, ",!");
   b4cb2:	4951      	ldr	r1, [pc, #324]	; (b4df8 <_Z9myHandlerPKcS0_+0x248>)
   b4cb4:	484f      	ldr	r0, [pc, #316]	; (b4df4 <_Z9myHandlerPKcS0_+0x244>)
   b4cb6:	f8df 8168 	ldr.w	r8, [pc, #360]	; b4e20 <_Z9myHandlerPKcS0_+0x270>
        for (int i = 0; i < range; i++)
   b4cba:	4d50      	ldr	r5, [pc, #320]	; (b4dfc <_Z9myHandlerPKcS0_+0x24c>)
        {
            // Save hour and cost in differen containers
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
            token = strtok(NULL, ",!");
            cost[i] = atof(token) / 1000;
   b4cbc:	4f50      	ldr	r7, [pc, #320]	; (b4e00 <_Z9myHandlerPKcS0_+0x250>)
        token = strtok(temp, ",!");
   b4cbe:	f004 f96d 	bl	b8f9c <strtok>
        for (int i = 0; i < range; i++)
   b4cc2:	2400      	movs	r4, #0
            cost[i] = atof(token) / 1000;
   b4cc4:	2600      	movs	r6, #0
        for (int i = 0; i < range; i++)
   b4cc6:	682b      	ldr	r3, [r5, #0]
   b4cc8:	42a3      	cmp	r3, r4
   b4cca:	dd1b      	ble.n	b4d04 <_Z9myHandlerPKcS0_+0x154>
            sscanf(token, "%*d-%*d-%dT%d:%*d:%*d", &date, &cost_hour[i]);
   b4ccc:	4b4d      	ldr	r3, [pc, #308]	; (b4e04 <_Z9myHandlerPKcS0_+0x254>)
   b4cce:	4a4e      	ldr	r2, [pc, #312]	; (b4e08 <_Z9myHandlerPKcS0_+0x258>)
   b4cd0:	494e      	ldr	r1, [pc, #312]	; (b4e0c <_Z9myHandlerPKcS0_+0x25c>)
   b4cd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   b4cd6:	f001 fa73 	bl	b61c0 <sscanf>
            token = strtok(NULL, ",!");
   b4cda:	4947      	ldr	r1, [pc, #284]	; (b4df8 <_Z9myHandlerPKcS0_+0x248>)
   b4cdc:	2000      	movs	r0, #0
   b4cde:	f004 f95d 	bl	b8f9c <strtok>
            cost[i] = atof(token) / 1000;
   b4ce2:	f003 fa5d 	bl	b81a0 <atof>
   b4ce6:	4632      	mov	r2, r6
   b4ce8:	ec51 0b10 	vmov	r0, r1, d0
   b4cec:	463b      	mov	r3, r7
   b4cee:	f7ff fc7d 	bl	b45ec <__aeabi_ddiv>
   b4cf2:	e8e8 0102 	strd	r0, r1, [r8], #8

            if ((token = strtok(NULL, ",!")) == NULL) // Received data count is less than 48.
   b4cf6:	4940      	ldr	r1, [pc, #256]	; (b4df8 <_Z9myHandlerPKcS0_+0x248>)
   b4cf8:	2000      	movs	r0, #0
   b4cfa:	f004 f94f 	bl	b8f9c <strtok>
   b4cfe:	2800      	cmp	r0, #0
   b4d00:	d160      	bne.n	b4dc4 <_Z9myHandlerPKcS0_+0x214>
            {
                range = i; // Update range, such that the rest of program flow is aware of size
   b4d02:	602c      	str	r4, [r5, #0]
                break;     // Break the while loop
            }
        }

        Serial.print("Range is: ");
   b4d04:	f002 f9f6 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d08:	4941      	ldr	r1, [pc, #260]	; (b4e10 <_Z9myHandlerPKcS0_+0x260>)
   b4d0a:	4f3e      	ldr	r7, [pc, #248]	; (b4e04 <_Z9myHandlerPKcS0_+0x254>)


        //Iterate over the message, extracting the juicy bits, until no more "!".
        while (bng_idx > 0)
        {   
            Serial.print("Iteration #");
   b4d0c:	f8df a114 	ldr.w	sl, [pc, #276]	; b4e24 <_Z9myHandlerPKcS0_+0x274>
            Serial.println(idx);

            Serial.print("cost_hour[");
   b4d10:	f8df 9114 	ldr.w	r9, [pc, #276]	; b4e28 <_Z9myHandlerPKcS0_+0x278>
            Serial.print(idx);
            Serial.print("]: ");
   b4d14:	f8df 8114 	ldr.w	r8, [pc, #276]	; b4e2c <_Z9myHandlerPKcS0_+0x27c>
        Serial.print("Range is: ");
   b4d18:	f001 fc7e 	bl	b6618 <_ZN5Print5printEPKc>
        Serial.println(range);
   b4d1c:	f002 f9ea 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d20:	6829      	ldr	r1, [r5, #0]
   b4d22:	4604      	mov	r4, r0
size_t Print::print(T n, int base)
   b4d24:	220a      	movs	r2, #10
   b4d26:	f7ff ff0f 	bl	b4b48 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4d2a:	4620      	mov	r0, r4
   b4d2c:	f001 fc7b 	bl	b6626 <_ZN5Print7printlnEv>
        message.erase(0,1);                 // Erase the leading "!"
   b4d30:	482c      	ldr	r0, [pc, #176]	; (b4de4 <_Z9myHandlerPKcS0_+0x234>)
   b4d32:	2201      	movs	r2, #1
   b4d34:	2100      	movs	r1, #0
   b4d36:	f7ff ff1b 	bl	b4b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0>
        int dd_idx = message.find("T") - 2; // Index of the date
   b4d3a:	4936      	ldr	r1, [pc, #216]	; (b4e14 <_Z9myHandlerPKcS0_+0x264>)
   b4d3c:	4829      	ldr	r0, [pc, #164]	; (b4de4 <_Z9myHandlerPKcS0_+0x234>)
   b4d3e:	2200      	movs	r2, #0
   b4d40:	f003 f90e 	bl	b7f60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
        int bng_idx = message.find("!") + 1;    // Index of the end of the first part.
   b4d44:	4934      	ldr	r1, [pc, #208]	; (b4e18 <_Z9myHandlerPKcS0_+0x268>)
   b4d46:	4827      	ldr	r0, [pc, #156]	; (b4de4 <_Z9myHandlerPKcS0_+0x234>)
   b4d48:	2200      	movs	r2, #0
   b4d4a:	f003 f909 	bl	b7f60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
        int idx = 0;                        // cost / cost_hour indexing.
   b4d4e:	2500      	movs	r5, #0
        int bng_idx = message.find("!") + 1;    // Index of the end of the first part.
   b4d50:	1c44      	adds	r4, r0, #1
        while (bng_idx > 0)
   b4d52:	2c00      	cmp	r4, #0
   b4d54:	dd38      	ble.n	b4dc8 <_Z9myHandlerPKcS0_+0x218>
            Serial.print("Iteration #");
   b4d56:	f002 f9cd 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d5a:	4651      	mov	r1, sl
   b4d5c:	f001 fc5c 	bl	b6618 <_ZN5Print5printEPKc>
            Serial.println(idx);
   b4d60:	f002 f9c8 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d64:	220a      	movs	r2, #10
   b4d66:	4629      	mov	r1, r5
   b4d68:	4606      	mov	r6, r0
size_t Print::print(T n, int base)
   b4d6a:	f7ff feed 	bl	b4b48 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4d6e:	4630      	mov	r0, r6
   b4d70:	f001 fc59 	bl	b6626 <_ZN5Print7printlnEv>
            Serial.print("cost_hour[");
   b4d74:	f002 f9be 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d78:	4649      	mov	r1, r9
   b4d7a:	f001 fc4d 	bl	b6618 <_ZN5Print5printEPKc>
            Serial.print(idx);
   b4d7e:	f002 f9b9 	bl	b70f4 <_Z16_fetch_usbserialv>
size_t Print::print(T n, int base)
   b4d82:	220a      	movs	r2, #10
   b4d84:	4629      	mov	r1, r5
   b4d86:	f7ff fedf 	bl	b4b48 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            Serial.print("]: ");
   b4d8a:	f002 f9b3 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d8e:	4641      	mov	r1, r8
   b4d90:	f001 fc42 	bl	b6618 <_ZN5Print5printEPKc>
            Serial.println(cost_hour[idx]);
   b4d94:	f002 f9ae 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4d98:	f857 1b04 	ldr.w	r1, [r7], #4
   b4d9c:	220a      	movs	r2, #10
   b4d9e:	4606      	mov	r6, r0
   b4da0:	f7ff fed2 	bl	b4b48 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        n += println();
   b4da4:	4630      	mov	r0, r6
   b4da6:	f001 fc3e 	bl	b6626 <_ZN5Print7printlnEv>
            // // Serial.print("cost string: ");
            // // Serial.println(stof(message.substr(pp_idx, bng_idx - pp_idx)));

            // Serial.print("seems ok - index: ");
            // Serial.println(idx);
            message.erase(0, (bng_idx));          // Erase the part we read, ready for next iteration           
   b4daa:	4622      	mov	r2, r4
   b4dac:	480d      	ldr	r0, [pc, #52]	; (b4de4 <_Z9myHandlerPKcS0_+0x234>)
   b4dae:	2100      	movs	r1, #0
   b4db0:	f7ff fede 	bl	b4b70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj.isra.0>
            bng_idx = message.find("!") + 1;    // Find index of next "!".
   b4db4:	4918      	ldr	r1, [pc, #96]	; (b4e18 <_Z9myHandlerPKcS0_+0x268>)
   b4db6:	480b      	ldr	r0, [pc, #44]	; (b4de4 <_Z9myHandlerPKcS0_+0x234>)
   b4db8:	2200      	movs	r2, #0
   b4dba:	f003 f8d1 	bl	b7f60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
            idx++;                              // Increment array index.
   b4dbe:	3501      	adds	r5, #1
            bng_idx = message.find("!") + 1;    // Find index of next "!".
   b4dc0:	1c44      	adds	r4, r0, #1
        while (bng_idx > 0)
   b4dc2:	e7c6      	b.n	b4d52 <_Z9myHandlerPKcS0_+0x1a2>
        for (int i = 0; i < range; i++)
   b4dc4:	3401      	adds	r4, #1
   b4dc6:	e77e      	b.n	b4cc6 <_Z9myHandlerPKcS0_+0x116>
         } 
    }
}
   b4dc8:	b004      	add	sp, #16
   b4dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4dce:	bf00      	nop
   b4dd0:	2003d212 	.word	0x2003d212
   b4dd4:	000ba288 	.word	0x000ba288
   b4dd8:	000ba297 	.word	0x000ba297
   b4ddc:	000ba2ad 	.word	0x000ba2ad
   b4de0:	000ba2d4 	.word	0x000ba2d4
   b4de4:	2003cee0 	.word	0x2003cee0
   b4de8:	000ba303 	.word	0x000ba303
   b4dec:	2003d213 	.word	0x2003d213
   b4df0:	000ba318 	.word	0x000ba318
   b4df4:	2003dc78 	.word	0x2003dc78
   b4df8:	000ba333 	.word	0x000ba333
   b4dfc:	2003ccfc 	.word	0x2003ccfc
   b4e00:	408f4000 	.word	0x408f4000
   b4e04:	2003d0e8 	.word	0x2003d0e8
   b4e08:	2003d1a8 	.word	0x2003d1a8
   b4e0c:	000ba336 	.word	0x000ba336
   b4e10:	000ba34c 	.word	0x000ba34c
   b4e14:	000ba357 	.word	0x000ba357
   b4e18:	000ba334 	.word	0x000ba334
   b4e1c:	2003d210 	.word	0x2003d210
   b4e20:	2003cf68 	.word	0x2003cf68
   b4e24:	000ba359 	.word	0x000ba359
   b4e28:	000ba365 	.word	0x000ba365
   b4e2c:	000ba370 	.word	0x000ba370

000b4e30 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4e30:	b40e      	push	{r1, r2, r3}
   b4e32:	b503      	push	{r0, r1, lr}
   b4e34:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4e36:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4e38:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4e3c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4e3e:	f001 fc26 	bl	b668e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4e42:	b002      	add	sp, #8
   b4e44:	f85d eb04 	ldr.w	lr, [sp], #4
   b4e48:	b003      	add	sp, #12
   b4e4a:	4770      	bx	lr

000b4e4c <_Z9reconnectv>:
    // Wait 1 second
    delay(1000);
}

void reconnect(void)
{
   b4e4c:	b500      	push	{lr}
   b4e4e:	b089      	sub	sp, #36	; 0x24
    Serial.println("Reconnecting");
   b4e50:	f002 f950 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4e54:	4910      	ldr	r1, [pc, #64]	; (b4e98 <_Z9reconnectv+0x4c>)
   b4e56:	f001 fbf2 	bl	b663e <_ZN5Print7printlnEPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4e5a:	4910      	ldr	r1, [pc, #64]	; (b4e9c <_Z9reconnectv+0x50>)
   b4e5c:	a804      	add	r0, sp, #16
   b4e5e:	f001 fad8 	bl	b6412 <_ZN6StringC1EPK19__FlashStringHelper>
    client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt");
   b4e62:	f001 fcb8 	bl	b67d6 <_ZN9TimeClass3nowEv>
   b4e66:	220a      	movs	r2, #10
   b4e68:	4601      	mov	r1, r0
   b4e6a:	4668      	mov	r0, sp
   b4e6c:	f001 fb11 	bl	b6492 <_ZN6StringC1Elh>
   b4e70:	4669      	mov	r1, sp
   b4e72:	a804      	add	r0, sp, #16
   b4e74:	f001 fb3b 	bl	b64ee <_ZplRK15StringSumHelperRK6String>
   b4e78:	4b09      	ldr	r3, [pc, #36]	; (b4ea0 <_Z9reconnectv+0x54>)
   b4e7a:	6801      	ldr	r1, [r0, #0]
   b4e7c:	4809      	ldr	r0, [pc, #36]	; (b4ea4 <_Z9reconnectv+0x58>)
   b4e7e:	461a      	mov	r2, r3
   b4e80:	f000 fd00 	bl	b5884 <_ZN4MQTT7connectEPKcS1_S1_>
   b4e84:	4668      	mov	r0, sp
   b4e86:	f001 fa79 	bl	b637c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4e8a:	a804      	add	r0, sp, #16
   b4e8c:	f001 fa76 	bl	b637c <_ZN6StringD1Ev>
}
   b4e90:	b009      	add	sp, #36	; 0x24
   b4e92:	f85d fb04 	ldr.w	pc, [sp], #4
   b4e96:	bf00      	nop
   b4e98:	000ba374 	.word	0x000ba374
   b4e9c:	000ba381 	.word	0x000ba381
   b4ea0:	000ba38e 	.word	0x000ba38e
   b4ea4:	2003cf00 	.word	0x2003cf00

000b4ea8 <_Z8calc_lowv>:

/** @brief The purpose of the function is to identify the hours at which the highest and lowest cost are.
 *  Furthermore neighbouring low cost hour are identified and saved in an array for easy presentation
 */
void calc_low(void)
{
   b4ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4eac:	ed2d 8b04 	vpush	{d8-d9}
    Serial.println("CALCULATING");
   b4eb0:	f002 f920 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4eb4:	4954      	ldr	r1, [pc, #336]	; (b5008 <_Z8calc_lowv+0x160>)
   b4eb6:	f8df 817c 	ldr.w	r8, [pc, #380]	; b5034 <_Z8calc_lowv+0x18c>
    int idx = 0;

    double delta;
    double small_offset;
    double last_big = 0;
    double last_small = 100; // Assign any absurdly high value
   b4eba:	4f54      	ldr	r7, [pc, #336]	; (b500c <_Z8calc_lowv+0x164>)
    Serial.println("CALCULATING");
   b4ebc:	f001 fbbf 	bl	b663e <_ZN5Print7printlnEPKc>

    for (int i = 0; i < range; i++)
   b4ec0:	4b53      	ldr	r3, [pc, #332]	; (b5010 <_Z8calc_lowv+0x168>)
    double last_big = 0;
   b4ec2:	ed9f 7b4d 	vldr	d7, [pc, #308]	; b4ff8 <_Z8calc_lowv+0x150>
    for (int i = 0; i < range; i++)
   b4ec6:	f8d3 b000 	ldr.w	fp, [r3]
    double last_big = 0;
   b4eca:	eeb0 8a47 	vmov.f32	s16, s14
   b4ece:	eef0 8a67 	vmov.f32	s17, s15
    for (int i = 0; i < range; i++)
   b4ed2:	46c2      	mov	sl, r8
   b4ed4:	f04f 0900 	mov.w	r9, #0
    double last_small = 100; // Assign any absurdly high value
   b4ed8:	2600      	movs	r6, #0
    for (int i = 0; i < range; i++)
   b4eda:	45cb      	cmp	fp, r9
   b4edc:	dd16      	ble.n	b4f0c <_Z8calc_lowv+0x64>
    {
        // Find the highest price in range
        if (cost[i] > last_big)
   b4ede:	e8fa 4502 	ldrd	r4, r5, [sl], #8
   b4ee2:	ec53 2b18 	vmov	r2, r3, d8
   b4ee6:	4620      	mov	r0, r4
   b4ee8:	4629      	mov	r1, r5
   b4eea:	f7ff fce5 	bl	b48b8 <__aeabi_dcmpgt>
   b4eee:	b108      	cbz	r0, b4ef4 <_Z8calc_lowv+0x4c>
        {
            last_big = cost[i];
   b4ef0:	ec45 4b18 	vmov	d8, r4, r5
        }
        // Find the lowest price in range
        if (cost[i] < last_small)
   b4ef4:	4632      	mov	r2, r6
   b4ef6:	463b      	mov	r3, r7
   b4ef8:	4620      	mov	r0, r4
   b4efa:	4629      	mov	r1, r5
   b4efc:	f7ff fcbe 	bl	b487c <__aeabi_dcmplt>
   b4f00:	b108      	cbz	r0, b4f06 <_Z8calc_lowv+0x5e>
        {
            last_small = cost[i];
   b4f02:	4626      	mov	r6, r4
   b4f04:	462f      	mov	r7, r5
    for (int i = 0; i < range; i++)
   b4f06:	f109 0901 	add.w	r9, r9, #1
   b4f0a:	e7e6      	b.n	b4eda <_Z8calc_lowv+0x32>
        }
    }
    // Calculate delta
    delta = last_big - last_small;
   b4f0c:	4632      	mov	r2, r6
   b4f0e:	463b      	mov	r3, r7
   b4f10:	ec51 0b18 	vmov	r0, r1, d8
   b4f14:	f7ff f888 	bl	b4028 <__aeabi_dsub>

    // Define low price area
    small_offset = last_small + delta * DELTA_OFFSET;
   b4f18:	a339      	add	r3, pc, #228	; (adr r3, b5000 <_Z8calc_lowv+0x158>)
   b4f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f1e:	f7ff fa3b 	bl	b4398 <__aeabi_dmul>
   b4f22:	4632      	mov	r2, r6
   b4f24:	463b      	mov	r3, r7
   b4f26:	f7ff f881 	bl	b402c <__adddf3>

    // Find hours of day at which price is within the defined low price point
    for (int i = 0; i <= range; i++)
   b4f2a:	2500      	movs	r5, #0
    small_offset = last_small + delta * DELTA_OFFSET;
   b4f2c:	ec41 0b19 	vmov	d9, r0, r1
    {

        if (cost[i] < small_offset)
        {
            low_range_hour[idx] = cost_hour[i];
   b4f30:	f8df 9104 	ldr.w	r9, [pc, #260]	; b5038 <_Z8calc_lowv+0x190>
   b4f34:	f8df a104 	ldr.w	sl, [pc, #260]	; b503c <_Z8calc_lowv+0x194>
    int idx = 0;
   b4f38:	462c      	mov	r4, r5
    for (int i = 0; i <= range; i++)
   b4f3a:	45ab      	cmp	fp, r5
   b4f3c:	db0d      	blt.n	b4f5a <_Z8calc_lowv+0xb2>
        if (cost[i] < small_offset)
   b4f3e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   b4f42:	ec53 2b19 	vmov	r2, r3, d9
   b4f46:	f7ff fc99 	bl	b487c <__aeabi_dcmplt>
   b4f4a:	b120      	cbz	r0, b4f56 <_Z8calc_lowv+0xae>
            low_range_hour[idx] = cost_hour[i];
   b4f4c:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   b4f50:	f849 3024 	str.w	r3, [r9, r4, lsl #2]

            idx++;
   b4f54:	3401      	adds	r4, #1
    for (int i = 0; i <= range; i++)
   b4f56:	3501      	adds	r5, #1
   b4f58:	e7ef      	b.n	b4f3a <_Z8calc_lowv+0x92>
        }
    }

    // Calculations have been done - clear flag
    populate = false;
   b4f5a:	4b2e      	ldr	r3, [pc, #184]	; (b5014 <_Z8calc_lowv+0x16c>)
   b4f5c:	2500      	movs	r5, #0
   b4f5e:	701d      	strb	r5, [r3, #0]
    // Display the results
    Serial.printf("Highest price of the day: %f\n", last_big);
   b4f60:	f002 f8c8 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4f64:	ec53 2b18 	vmov	r2, r3, d8
   b4f68:	492b      	ldr	r1, [pc, #172]	; (b5018 <_Z8calc_lowv+0x170>)
   b4f6a:	f7ff ff61 	bl	b4e30 <_ZN5Print6printfEPKcz>
    Serial.printf("Lowest price of the day: %f\n", last_small);
   b4f6e:	f002 f8c1 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4f72:	4632      	mov	r2, r6
   b4f74:	4929      	ldr	r1, [pc, #164]	; (b501c <_Z8calc_lowv+0x174>)
   b4f76:	4e2a      	ldr	r6, [pc, #168]	; (b5020 <_Z8calc_lowv+0x178>)
   b4f78:	463b      	mov	r3, r7
   b4f7a:	f7ff ff59 	bl	b4e30 <_ZN5Print6printfEPKcz>
    Serial.printf("Hours of the day where electricity is within accepted range:\n");
   b4f7e:	f002 f8b9 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4f82:	4928      	ldr	r1, [pc, #160]	; (b5024 <_Z8calc_lowv+0x17c>)
   b4f84:	f7ff ff54 	bl	b4e30 <_ZN5Print6printfEPKcz>

    int i = 0;
    if (idx > 0)
   b4f88:	b1e4      	cbz	r4, b4fc4 <_Z8calc_lowv+0x11c>
   b4f8a:	6831      	ldr	r1, [r6, #0]
   b4f8c:	4a26      	ldr	r2, [pc, #152]	; (b5028 <_Z8calc_lowv+0x180>)
    {
        while (i <= idx)
        {
            start_stop[cnt][0] = low_range_hour[i];
   b4f8e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; b5038 <_Z8calc_lowv+0x190>
   b4f92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    int i = 0;
   b4f96:	462b      	mov	r3, r5
            start_stop[cnt][0] = low_range_hour[i];
   b4f98:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
   b4f9c:	6010      	str	r0, [r2, #0]
   b4f9e:	eb0c 0783 	add.w	r7, ip, r3, lsl #2

            while (low_range_hour[i] == low_range_hour[i + 1] - 1) // Hour only increased by 1. I.e. coherant
   b4fa2:	6838      	ldr	r0, [r7, #0]
   b4fa4:	f857 5f04 	ldr.w	r5, [r7, #4]!
   b4fa8:	3d01      	subs	r5, #1
   b4faa:	42a8      	cmp	r0, r5
   b4fac:	f103 0301 	add.w	r3, r3, #1
   b4fb0:	d0f7      	beq.n	b4fa2 <_Z8calc_lowv+0xfa>
            {
                i++;
            }

            start_stop[cnt][1] = low_range_hour[i] + 1;
   b4fb2:	3001      	adds	r0, #1
        while (i <= idx)
   b4fb4:	42a3      	cmp	r3, r4
            start_stop[cnt][1] = low_range_hour[i] + 1;
   b4fb6:	6050      	str	r0, [r2, #4]

            cnt++;
   b4fb8:	f101 0001 	add.w	r0, r1, #1
        while (i <= idx)
   b4fbc:	f102 0208 	add.w	r2, r2, #8
   b4fc0:	dd11      	ble.n	b4fe6 <_Z8calc_lowv+0x13e>
            i++;
        }
        cnt--;
   b4fc2:	6031      	str	r1, [r6, #0]
   b4fc4:	4c18      	ldr	r4, [pc, #96]	; (b5028 <_Z8calc_lowv+0x180>)
    }
    for (int z = 0; z < cnt; z++)
    {
        Serial.printf("%02d to %02d\n", start_stop[z][0], start_stop[z][1]);
   b4fc6:	4f19      	ldr	r7, [pc, #100]	; (b502c <_Z8calc_lowv+0x184>)
            cnt++;
   b4fc8:	2500      	movs	r5, #0
    for (int z = 0; z < cnt; z++)
   b4fca:	6833      	ldr	r3, [r6, #0]
   b4fcc:	42ab      	cmp	r3, r5
   b4fce:	f104 0408 	add.w	r4, r4, #8
   b4fd2:	dd0a      	ble.n	b4fea <_Z8calc_lowv+0x142>
        Serial.printf("%02d to %02d\n", start_stop[z][0], start_stop[z][1]);
   b4fd4:	f002 f88e 	bl	b70f4 <_Z16_fetch_usbserialv>
   b4fd8:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b4fdc:	4639      	mov	r1, r7
   b4fde:	f7ff ff27 	bl	b4e30 <_ZN5Print6printfEPKcz>
    for (int z = 0; z < cnt; z++)
   b4fe2:	3501      	adds	r5, #1
   b4fe4:	e7f1      	b.n	b4fca <_Z8calc_lowv+0x122>
            cnt++;
   b4fe6:	4601      	mov	r1, r0
   b4fe8:	e7d6      	b.n	b4f98 <_Z8calc_lowv+0xf0>
    }

    work = true;
   b4fea:	4b11      	ldr	r3, [pc, #68]	; (b5030 <_Z8calc_lowv+0x188>)
   b4fec:	2201      	movs	r2, #1
   b4fee:	701a      	strb	r2, [r3, #0]
}
   b4ff0:	ecbd 8b04 	vpop	{d8-d9}
   b4ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   b5000:	33333333 	.word	0x33333333
   b5004:	3fd33333 	.word	0x3fd33333
   b5008:	000ba393 	.word	0x000ba393
   b500c:	40590000 	.word	0x40590000
   b5010:	2003ccfc 	.word	0x2003ccfc
   b5014:	2003d210 	.word	0x2003d210
   b5018:	000ba39f 	.word	0x000ba39f
   b501c:	000ba3bd 	.word	0x000ba3bd
   b5020:	2003cf60 	.word	0x2003cf60
   b5024:	000ba3da 	.word	0x000ba3da
   b5028:	2003dc18 	.word	0x2003dc18
   b502c:	000ba418 	.word	0x000ba418
   b5030:	2003e67e 	.word	0x2003e67e
   b5034:	2003cf68 	.word	0x2003cf68
   b5038:	2003d1b0 	.word	0x2003d1b0
   b503c:	2003d0e8 	.word	0x2003d0e8

000b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5040:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5042:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5044:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5046:	b17c      	cbz	r4, b5068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5048:	6863      	ldr	r3, [r4, #4]
   b504a:	3b01      	subs	r3, #1
   b504c:	6063      	str	r3, [r4, #4]
   b504e:	b95b      	cbnz	r3, b5068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5050:	6823      	ldr	r3, [r4, #0]
   b5052:	4620      	mov	r0, r4
   b5054:	689b      	ldr	r3, [r3, #8]
   b5056:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5058:	68a3      	ldr	r3, [r4, #8]
   b505a:	3b01      	subs	r3, #1
   b505c:	60a3      	str	r3, [r4, #8]
   b505e:	b91b      	cbnz	r3, b5068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5060:	6823      	ldr	r3, [r4, #0]
   b5062:	4620      	mov	r0, r4
   b5064:	68db      	ldr	r3, [r3, #12]
   b5066:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5068:	4628      	mov	r0, r5
   b506a:	bd38      	pop	{r3, r4, r5, pc}

000b506c <loop>:
{
   b506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (client.isConnected())
   b5070:	4844      	ldr	r0, [pc, #272]	; (b5184 <loop+0x118>)
{
   b5072:	b08a      	sub	sp, #40	; 0x28
    if (client.isConnected())
   b5074:	f000 fb16 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b5078:	2800      	cmp	r0, #0
   b507a:	d048      	beq.n	b510e <loop+0xa2>
        client.loop();
   b507c:	4841      	ldr	r0, [pc, #260]	; (b5184 <loop+0x118>)
   b507e:	f000 fce8 	bl	b5a52 <_ZN4MQTT4loopEv>
    if (printer) // Debugging flag set in interrupt handler
   b5082:	4c41      	ldr	r4, [pc, #260]	; (b5188 <loop+0x11c>)
   b5084:	7823      	ldrb	r3, [r4, #0]
   b5086:	b143      	cbz	r3, b509a <loop+0x2e>
        Serial.printf("Light: %d\n", calc_power);
   b5088:	f002 f834 	bl	b70f4 <_Z16_fetch_usbserialv>
   b508c:	4b3f      	ldr	r3, [pc, #252]	; (b518c <loop+0x120>)
   b508e:	4940      	ldr	r1, [pc, #256]	; (b5190 <loop+0x124>)
   b5090:	681a      	ldr	r2, [r3, #0]
   b5092:	f7ff fecd 	bl	b4e30 <_ZN5Print6printfEPKcz>
        printer = false;
   b5096:	2300      	movs	r3, #0
   b5098:	7023      	strb	r3, [r4, #0]
    if (populate)
   b509a:	4b3e      	ldr	r3, [pc, #248]	; (b5194 <loop+0x128>)
   b509c:	781b      	ldrb	r3, [r3, #0]
   b509e:	b17b      	cbz	r3, b50c0 <loop+0x54>
        calc_low();
   b50a0:	f7ff ff02 	bl	b4ea8 <_Z8calc_lowv>
        Serial.printf("Current HH:MM: %02d:%02d\n", Time.hour() + 2, Time.minute());
   b50a4:	f002 f826 	bl	b70f4 <_Z16_fetch_usbserialv>
   b50a8:	4604      	mov	r4, r0
   b50aa:	f001 fba5 	bl	b67f8 <_ZN9TimeClass4hourEv>
   b50ae:	4605      	mov	r5, r0
   b50b0:	f001 fbae 	bl	b6810 <_ZN9TimeClass6minuteEv>
   b50b4:	4938      	ldr	r1, [pc, #224]	; (b5198 <loop+0x12c>)
   b50b6:	4603      	mov	r3, r0
   b50b8:	1caa      	adds	r2, r5, #2
   b50ba:	4620      	mov	r0, r4
   b50bc:	f7ff feb8 	bl	b4e30 <_ZN5Print6printfEPKcz>
    if (work)
   b50c0:	4e36      	ldr	r6, [pc, #216]	; (b519c <loop+0x130>)
   b50c2:	7833      	ldrb	r3, [r6, #0]
   b50c4:	2b00      	cmp	r3, #0
   b50c6:	d041      	beq.n	b514c <loop+0xe0>
        Serial.printf("In work\n");
   b50c8:	f002 f814 	bl	b70f4 <_Z16_fetch_usbserialv>
   b50cc:	4934      	ldr	r1, [pc, #208]	; (b51a0 <loop+0x134>)
   b50ce:	4c35      	ldr	r4, [pc, #212]	; (b51a4 <loop+0x138>)
        for (int z = 0; z < cnt; z++)
   b50d0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b51d0 <loop+0x164>
            data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b50d4:	4f34      	ldr	r7, [pc, #208]	; (b51a8 <loop+0x13c>)
        Serial.printf("In work\n");
   b50d6:	f7ff feab 	bl	b4e30 <_ZN5Print6printfEPKcz>
        String data = "Cheap(ish) hours of the day: ";
   b50da:	4934      	ldr	r1, [pc, #208]	; (b51ac <loop+0x140>)
   b50dc:	a802      	add	r0, sp, #8
   b50de:	f001 f998 	bl	b6412 <_ZN6StringC1EPK19__FlashStringHelper>
        for (int z = 0; z < cnt; z++)
   b50e2:	2500      	movs	r5, #0
   b50e4:	f8d8 3000 	ldr.w	r3, [r8]
   b50e8:	42ab      	cmp	r3, r5
   b50ea:	f104 0408 	add.w	r4, r4, #8
   b50ee:	dd16      	ble.n	b511e <loop+0xb2>
            data += String::format("%02d to %02d, ", start_stop[z][0], start_stop[z][1]);
   b50f0:	e954 2302 	ldrd	r2, r3, [r4, #-8]
   b50f4:	4639      	mov	r1, r7
   b50f6:	a806      	add	r0, sp, #24
   b50f8:	f001 fa06 	bl	b6508 <_ZN6String6formatEPKcz>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b50fc:	a906      	add	r1, sp, #24
   b50fe:	a802      	add	r0, sp, #8
   b5100:	f001 f9f1 	bl	b64e6 <_ZN6String6concatERKS_>
   b5104:	a806      	add	r0, sp, #24
   b5106:	f001 f939 	bl	b637c <_ZN6StringD1Ev>
        for (int z = 0; z < cnt; z++)
   b510a:	3501      	adds	r5, #1
   b510c:	e7ea      	b.n	b50e4 <loop+0x78>
        Serial.printf("Client disconnected\n");
   b510e:	f001 fff1 	bl	b70f4 <_Z16_fetch_usbserialv>
   b5112:	4927      	ldr	r1, [pc, #156]	; (b51b0 <loop+0x144>)
   b5114:	f7ff fe8c 	bl	b4e30 <_ZN5Print6printfEPKcz>
        reconnect();
   b5118:	f7ff fe98 	bl	b4e4c <_Z9reconnectv>
   b511c:	e7b1      	b.n	b5082 <loop+0x16>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b511e:	4b25      	ldr	r3, [pc, #148]	; (b51b4 <loop+0x148>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5120:	9a02      	ldr	r2, [sp, #8]
   b5122:	781b      	ldrb	r3, [r3, #0]
   b5124:	4924      	ldr	r1, [pc, #144]	; (b51b8 <loop+0x14c>)
   b5126:	f88d 3000 	strb.w	r3, [sp]
   b512a:	a806      	add	r0, sp, #24
   b512c:	233c      	movs	r3, #60	; 0x3c
   b512e:	f001 fd8d 	bl	b6c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5132:	a807      	add	r0, sp, #28
   b5134:	f7ff ff84 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        client.publish("prices", data);
   b5138:	9a02      	ldr	r2, [sp, #8]
   b513a:	4920      	ldr	r1, [pc, #128]	; (b51bc <loop+0x150>)
   b513c:	4811      	ldr	r0, [pc, #68]	; (b5184 <loop+0x118>)
   b513e:	f000 fc2c 	bl	b599a <_ZN4MQTT7publishEPKcS1_>
        work = false;
   b5142:	2300      	movs	r3, #0
        String data = "Cheap(ish) hours of the day: ";
   b5144:	a802      	add	r0, sp, #8
        work = false;
   b5146:	7033      	strb	r3, [r6, #0]
        String data = "Cheap(ish) hours of the day: ";
   b5148:	f001 f918 	bl	b637c <_ZN6StringD1Ev>
    if (transmit_value) // Did we receive a request for updated values
   b514c:	4c1c      	ldr	r4, [pc, #112]	; (b51c0 <loop+0x154>)
   b514e:	7823      	ldrb	r3, [r4, #0]
   b5150:	b18b      	cbz	r3, b5176 <loop+0x10a>
        Serial.printf("Received power/get\n");
   b5152:	f001 ffcf 	bl	b70f4 <_Z16_fetch_usbserialv>
   b5156:	491b      	ldr	r1, [pc, #108]	; (b51c4 <loop+0x158>)
   b5158:	f7ff fe6a 	bl	b4e30 <_ZN5Print6printfEPKcz>
        sprintf(values, "%d", calc_power);
   b515c:	4b0b      	ldr	r3, [pc, #44]	; (b518c <loop+0x120>)
   b515e:	491a      	ldr	r1, [pc, #104]	; (b51c8 <loop+0x15c>)
   b5160:	681a      	ldr	r2, [r3, #0]
   b5162:	a806      	add	r0, sp, #24
   b5164:	f001 f824 	bl	b61b0 <sprintf>
        client.publish("power", values);
   b5168:	4918      	ldr	r1, [pc, #96]	; (b51cc <loop+0x160>)
   b516a:	4806      	ldr	r0, [pc, #24]	; (b5184 <loop+0x118>)
   b516c:	aa06      	add	r2, sp, #24
   b516e:	f000 fc14 	bl	b599a <_ZN4MQTT7publishEPKcS1_>
        transmit_value = false;
   b5172:	2300      	movs	r3, #0
   b5174:	7023      	strb	r3, [r4, #0]
    delay(1000);
   b5176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
   b517a:	b00a      	add	sp, #40	; 0x28
   b517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(1000);
   b5180:	f001 bb7c 	b.w	b687c <delay>
   b5184:	2003cf00 	.word	0x2003cf00
   b5188:	2003d211 	.word	0x2003d211
   b518c:	2003cefc 	.word	0x2003cefc
   b5190:	000ba43b 	.word	0x000ba43b
   b5194:	2003d210 	.word	0x2003d210
   b5198:	000ba446 	.word	0x000ba446
   b519c:	2003e67e 	.word	0x2003e67e
   b51a0:	000ba460 	.word	0x000ba460
   b51a4:	2003dc18 	.word	0x2003dc18
   b51a8:	000ba487 	.word	0x000ba487
   b51ac:	000ba469 	.word	0x000ba469
   b51b0:	000ba426 	.word	0x000ba426
   b51b4:	2003cef9 	.word	0x2003cef9
   b51b8:	000ba496 	.word	0x000ba496
   b51bc:	000ba58b 	.word	0x000ba58b
   b51c0:	2003e67d 	.word	0x2003e67d
   b51c4:	000ba4a6 	.word	0x000ba4a6
   b51c8:	000ba56c 	.word	0x000ba56c
   b51cc:	000ba4ba 	.word	0x000ba4ba
   b51d0:	2003cf60 	.word	0x2003cf60

000b51d4 <_Z8get_datai>:

/** @brief Puplishes a formatted command string to Particle cloud that fires off a webhook
 */
void get_data(int day)
{
    rec_cnt = 0;
   b51d4:	4a37      	ldr	r2, [pc, #220]	; (b52b4 <_Z8get_datai+0xe0>)
   b51d6:	2300      	movs	r3, #0
{
   b51d8:	b530      	push	{r4, r5, lr}
    rec_cnt = 0;
   b51da:	7013      	strb	r3, [r2, #0]
    range = 48;
   b51dc:	4a36      	ldr	r2, [pc, #216]	; (b52b8 <_Z8get_datai+0xe4>)
   b51de:	2130      	movs	r1, #48	; 0x30
   b51e0:	6011      	str	r1, [r2, #0]
    cnt = 0;
   b51e2:	4a36      	ldr	r2, [pc, #216]	; (b52bc <_Z8get_datai+0xe8>)
   b51e4:	6013      	str	r3, [r2, #0]
    temp[0] = 0;
   b51e6:	4a36      	ldr	r2, [pc, #216]	; (b52c0 <_Z8get_datai+0xec>)
{
   b51e8:	b09f      	sub	sp, #124	; 0x7c
    temp[0] = 0;
   b51ea:	7013      	strb	r3, [r2, #0]
{
   b51ec:	4604      	mov	r4, r0

    // String data = String::format("{ \"year\": \"%d\", \"month\":\"%02d\", \"day\": \"%02d\", \"day_two\": \"%02d\", \"hour\": \"%02d\" }", Time.year(), Time.month(), day, day + 2, Time.hour());
    // String data = "{ \"year\": \"" + (String)Time.year()  + "\", " +
    String data = String::format("{ \"year\": \"%d\", ", Time.year()) +
   b51ee:	f001 fb2f 	bl	b6850 <_ZN9TimeClass4yearEv>
   b51f2:	4934      	ldr	r1, [pc, #208]	; (b52c4 <_Z8get_datai+0xf0>)
   b51f4:	4602      	mov	r2, r0
   b51f6:	a806      	add	r0, sp, #24
   b51f8:	f001 f986 	bl	b6508 <_ZN6String6formatEPKcz>
	StringSumHelper(const String &s) : String(s) {}
   b51fc:	a906      	add	r1, sp, #24
   b51fe:	a80e      	add	r0, sp, #56	; 0x38
   b5200:	f001 f92a 	bl	b6458 <_ZN6StringC1ERKS_>
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b5204:	f001 fb1c 	bl	b6840 <_ZN9TimeClass5monthEv>
   b5208:	492f      	ldr	r1, [pc, #188]	; (b52c8 <_Z8get_datai+0xf4>)
   b520a:	4602      	mov	r2, r0
   b520c:	a80a      	add	r0, sp, #40	; 0x28
   b520e:	f001 f97b 	bl	b6508 <_ZN6String6formatEPKcz>
   b5212:	a90a      	add	r1, sp, #40	; 0x28
   b5214:	a80e      	add	r0, sp, #56	; 0x38
   b5216:	f001 f96a 	bl	b64ee <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day\": \"%02d\", ", day) +
   b521a:	4622      	mov	r2, r4
                  String::format("\"month\": \"%02d\", ", Time.month()) +
   b521c:	4605      	mov	r5, r0
                  String::format("\"day\": \"%02d\", ", day) +
   b521e:	492b      	ldr	r1, [pc, #172]	; (b52cc <_Z8get_datai+0xf8>)
   b5220:	a812      	add	r0, sp, #72	; 0x48
   b5222:	f001 f971 	bl	b6508 <_ZN6String6formatEPKcz>
   b5226:	a912      	add	r1, sp, #72	; 0x48
   b5228:	4628      	mov	r0, r5
   b522a:	f001 f960 	bl	b64ee <_ZplRK15StringSumHelperRK6String>
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b522e:	1ca2      	adds	r2, r4, #2
                  String::format("\"day\": \"%02d\", ", day) +
   b5230:	4605      	mov	r5, r0
                  String::format("\"day_two\": \"%02d\", ", (day + 2)) +
   b5232:	4927      	ldr	r1, [pc, #156]	; (b52d0 <_Z8get_datai+0xfc>)
   b5234:	a816      	add	r0, sp, #88	; 0x58
   b5236:	f001 f967 	bl	b6508 <_ZN6String6formatEPKcz>
   b523a:	a916      	add	r1, sp, #88	; 0x58
   b523c:	4628      	mov	r0, r5
   b523e:	f001 f956 	bl	b64ee <_ZplRK15StringSumHelperRK6String>
   b5242:	4604      	mov	r4, r0
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b5244:	f001 fad8 	bl	b67f8 <_ZN9TimeClass4hourEv>
   b5248:	4922      	ldr	r1, [pc, #136]	; (b52d4 <_Z8get_datai+0x100>)
   b524a:	4602      	mov	r2, r0
   b524c:	a81a      	add	r0, sp, #104	; 0x68
   b524e:	f001 f95b 	bl	b6508 <_ZN6String6formatEPKcz>
   b5252:	a91a      	add	r1, sp, #104	; 0x68
   b5254:	4620      	mov	r0, r4
   b5256:	f001 f94a 	bl	b64ee <_ZplRK15StringSumHelperRK6String>
   b525a:	4601      	mov	r1, r0
   b525c:	a802      	add	r0, sp, #8
   b525e:	f001 f8fb 	bl	b6458 <_ZN6StringC1ERKS_>
   b5262:	a81a      	add	r0, sp, #104	; 0x68
   b5264:	f001 f88a 	bl	b637c <_ZN6StringD1Ev>
   b5268:	a816      	add	r0, sp, #88	; 0x58
   b526a:	f001 f887 	bl	b637c <_ZN6StringD1Ev>
   b526e:	a812      	add	r0, sp, #72	; 0x48
   b5270:	f001 f884 	bl	b637c <_ZN6StringD1Ev>
   b5274:	a80a      	add	r0, sp, #40	; 0x28
   b5276:	f001 f881 	bl	b637c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b527a:	a80e      	add	r0, sp, #56	; 0x38
   b527c:	f001 f87e 	bl	b637c <_ZN6StringD1Ev>
   b5280:	a806      	add	r0, sp, #24
   b5282:	f001 f87b 	bl	b637c <_ZN6StringD1Ev>
   b5286:	4b14      	ldr	r3, [pc, #80]	; (b52d8 <_Z8get_datai+0x104>)
   b5288:	9a02      	ldr	r2, [sp, #8]
   b528a:	781b      	ldrb	r3, [r3, #0]
   b528c:	4913      	ldr	r1, [pc, #76]	; (b52dc <_Z8get_datai+0x108>)
   b528e:	f88d 3000 	strb.w	r3, [sp]
   b5292:	a81a      	add	r0, sp, #104	; 0x68
   b5294:	233c      	movs	r3, #60	; 0x3c
   b5296:	f001 fcd9 	bl	b6c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b529a:	a81b      	add	r0, sp, #108	; 0x6c
   b529c:	f7ff fed0 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    // Trigger the integration
    Particle.publish("elpriser", data);
    Serial.println("data requested - published \"elpriser\"");
   b52a0:	f001 ff28 	bl	b70f4 <_Z16_fetch_usbserialv>
   b52a4:	490e      	ldr	r1, [pc, #56]	; (b52e0 <_Z8get_datai+0x10c>)
   b52a6:	f001 f9ca 	bl	b663e <_ZN5Print7printlnEPKc>
                  String::format("\"hour\": \"%02d\" }", Time.hour());
   b52aa:	a802      	add	r0, sp, #8
   b52ac:	f001 f866 	bl	b637c <_ZN6StringD1Ev>
   b52b0:	b01f      	add	sp, #124	; 0x7c
   b52b2:	bd30      	pop	{r4, r5, pc}
   b52b4:	2003d212 	.word	0x2003d212
   b52b8:	2003ccfc 	.word	0x2003ccfc
   b52bc:	2003cf60 	.word	0x2003cf60
   b52c0:	2003dc78 	.word	0x2003dc78
   b52c4:	000ba4c0 	.word	0x000ba4c0
   b52c8:	000ba4d1 	.word	0x000ba4d1
   b52cc:	000ba4e3 	.word	0x000ba4e3
   b52d0:	000ba4f3 	.word	0x000ba4f3
   b52d4:	000ba507 	.word	0x000ba507
   b52d8:	2003cef8 	.word	0x2003cef8
   b52dc:	000ba518 	.word	0x000ba518
   b52e0:	000ba521 	.word	0x000ba521

000b52e4 <setup>:
{
   b52e4:	b510      	push	{r4, lr}
   b52e6:	b08a      	sub	sp, #40	; 0x28
   b52e8:	f000 fd36 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
    last_read = millis();                                  // Give it an initial value
   b52ec:	4b30      	ldr	r3, [pc, #192]	; (b53b0 <setup+0xcc>)
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b52ee:	2400      	movs	r4, #0
    last_read = millis();                                  // Give it an initial value
   b52f0:	6018      	str	r0, [r3, #0]
    pinMode(KW_SENSOR_PIN, INPUT_PULLDOWN);                // Setup pinmode for LDR pin
   b52f2:	2103      	movs	r1, #3
   b52f4:	2006      	movs	r0, #6
   b52f6:	f002 fbed 	bl	b7ad4 <pinMode>
    attachInterrupt(KW_SENSOR_PIN, handle_sensor, RISING); // Attach interrup that will be called when rising
   b52fa:	492e      	ldr	r1, [pc, #184]	; (b53b4 <setup+0xd0>)
   b52fc:	9400      	str	r4, [sp, #0]
   b52fe:	f04f 33ff 	mov.w	r3, #4294967295
   b5302:	2201      	movs	r2, #1
   b5304:	2006      	movs	r0, #6
   b5306:	f001 ff1d 	bl	b7144 <_Z15attachInterrupttPFvvE13InterruptModeah>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b530a:	4622      	mov	r2, r4
   b530c:	e9cd 4400 	strd	r4, r4, [sp]
   b5310:	4929      	ldr	r1, [pc, #164]	; (b53b8 <setup+0xd4>)
   b5312:	482a      	ldr	r0, [pc, #168]	; (b53bc <setup+0xd8>)
   b5314:	2301      	movs	r3, #1
   b5316:	f000 ff1b 	bl	b6150 <spark_subscribe>
   b531a:	2301      	movs	r3, #1
   b531c:	4622      	mov	r2, r4
   b531e:	4928      	ldr	r1, [pc, #160]	; (b53c0 <setup+0xdc>)
   b5320:	4828      	ldr	r0, [pc, #160]	; (b53c4 <setup+0xe0>)
   b5322:	e9cd 4400 	strd	r4, r4, [sp]
   b5326:	f000 ff13 	bl	b6150 <spark_subscribe>
    Serial.println("subscribed.");
   b532a:	f001 fee3 	bl	b70f4 <_Z16_fetch_usbserialv>
   b532e:	4926      	ldr	r1, [pc, #152]	; (b53c8 <setup+0xe4>)
   b5330:	f001 f985 	bl	b663e <_ZN5Print7printlnEPKc>
    get_data(Time.day());
   b5334:	f001 fa78 	bl	b6828 <_ZN9TimeClass3dayEv>
   b5338:	f7ff ff4c 	bl	b51d4 <_Z8get_datai>
    Serial.printf("Return value: %d", client.connect("sparkclient_" + String(Time.now()), "mqtt", "mqtt"));
   b533c:	f001 feda 	bl	b70f4 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   b5340:	4922      	ldr	r1, [pc, #136]	; (b53cc <setup+0xe8>)
   b5342:	4604      	mov	r4, r0
   b5344:	a806      	add	r0, sp, #24
   b5346:	f001 f864 	bl	b6412 <_ZN6StringC1EPK19__FlashStringHelper>
   b534a:	f001 fa44 	bl	b67d6 <_ZN9TimeClass3nowEv>
   b534e:	220a      	movs	r2, #10
   b5350:	4601      	mov	r1, r0
   b5352:	a802      	add	r0, sp, #8
   b5354:	f001 f89d 	bl	b6492 <_ZN6StringC1Elh>
   b5358:	a902      	add	r1, sp, #8
   b535a:	a806      	add	r0, sp, #24
   b535c:	f001 f8c7 	bl	b64ee <_ZplRK15StringSumHelperRK6String>
   b5360:	4b1b      	ldr	r3, [pc, #108]	; (b53d0 <setup+0xec>)
   b5362:	6801      	ldr	r1, [r0, #0]
   b5364:	481b      	ldr	r0, [pc, #108]	; (b53d4 <setup+0xf0>)
   b5366:	461a      	mov	r2, r3
   b5368:	f000 fa8c 	bl	b5884 <_ZN4MQTT7connectEPKcS1_S1_>
   b536c:	491a      	ldr	r1, [pc, #104]	; (b53d8 <setup+0xf4>)
   b536e:	4602      	mov	r2, r0
   b5370:	4620      	mov	r0, r4
   b5372:	f7ff fd5d 	bl	b4e30 <_ZN5Print6printfEPKcz>
   b5376:	a802      	add	r0, sp, #8
   b5378:	f001 f800 	bl	b637c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b537c:	a806      	add	r0, sp, #24
   b537e:	f000 fffd 	bl	b637c <_ZN6StringD1Ev>
    Serial.println();
   b5382:	f001 feb7 	bl	b70f4 <_Z16_fetch_usbserialv>
   b5386:	f001 f94e 	bl	b6626 <_ZN5Print7printlnEv>
    if (client.isConnected())
   b538a:	4812      	ldr	r0, [pc, #72]	; (b53d4 <setup+0xf0>)
   b538c:	f000 f98a 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b5390:	b158      	cbz	r0, b53aa <setup+0xc6>
        client.publish("power/get", "hello world");
   b5392:	4a12      	ldr	r2, [pc, #72]	; (b53dc <setup+0xf8>)
   b5394:	4912      	ldr	r1, [pc, #72]	; (b53e0 <setup+0xfc>)
   b5396:	480f      	ldr	r0, [pc, #60]	; (b53d4 <setup+0xf0>)
   b5398:	f000 faff 	bl	b599a <_ZN4MQTT7publishEPKcS1_>
        client.subscribe("power/prices");
   b539c:	4911      	ldr	r1, [pc, #68]	; (b53e4 <setup+0x100>)
   b539e:	480d      	ldr	r0, [pc, #52]	; (b53d4 <setup+0xf0>)
}
   b53a0:	b00a      	add	sp, #40	; 0x28
   b53a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        client.subscribe("power/prices");
   b53a6:	f000 bc9c 	b.w	b5ce2 <_ZN4MQTT9subscribeEPKc>
}
   b53aa:	b00a      	add	sp, #40	; 0x28
   b53ac:	bd10      	pop	{r4, pc}
   b53ae:	bf00      	nop
   b53b0:	2003d1ac 	.word	0x2003d1ac
   b53b4:	000b4afd 	.word	0x000b4afd
   b53b8:	000b4bb1 	.word	0x000b4bb1
   b53bc:	000ba58b 	.word	0x000ba58b
   b53c0:	000b53e9 	.word	0x000b53e9
   b53c4:	000ba547 	.word	0x000ba547
   b53c8:	000ba552 	.word	0x000ba552
   b53cc:	000ba381 	.word	0x000ba381
   b53d0:	000ba38e 	.word	0x000ba38e
   b53d4:	2003cf00 	.word	0x2003cf00
   b53d8:	000ba55e 	.word	0x000ba55e
   b53dc:	000ba56f 	.word	0x000ba56f
   b53e0:	000ba57b 	.word	0x000ba57b
   b53e4:	000ba585 	.word	0x000ba585

000b53e8 <_Z14myPriceHandlerPKcS0_>:
{
   b53e8:	b508      	push	{r3, lr}
    Serial.println("myPriceHandler fired");
   b53ea:	f001 fe83 	bl	b70f4 <_Z16_fetch_usbserialv>
   b53ee:	4904      	ldr	r1, [pc, #16]	; (b5400 <_Z14myPriceHandlerPKcS0_+0x18>)
   b53f0:	f001 f925 	bl	b663e <_ZN5Print7printlnEPKc>
    get_data(Time.day());
   b53f4:	f001 fa18 	bl	b6828 <_ZN9TimeClass3dayEv>
}
   b53f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    get_data(Time.day());
   b53fc:	f7ff beea 	b.w	b51d4 <_Z8get_datai>
   b5400:	000ba592 	.word	0x000ba592

000b5404 <_GLOBAL__sub_I__Z7messageB5cxx11>:
   b5404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
   b5406:	4a0e      	ldr	r2, [pc, #56]	; (b5440 <_GLOBAL__sub_I__Z7messageB5cxx11+0x3c>)
MQTT client(HOST, PORT, 512, 30, callback);
   b5408:	480e      	ldr	r0, [pc, #56]	; (b5444 <_GLOBAL__sub_I__Z7messageB5cxx11+0x40>)
   b540a:	2300      	movs	r3, #0
   b540c:	7013      	strb	r3, [r2, #0]
   b540e:	4a0e      	ldr	r2, [pc, #56]	; (b5448 <_GLOBAL__sub_I__Z7messageB5cxx11+0x44>)
   b5410:	2101      	movs	r1, #1
   b5412:	7011      	strb	r1, [r2, #0]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
   b5414:	4a0d      	ldr	r2, [pc, #52]	; (b544c <_GLOBAL__sub_I__Z7messageB5cxx11+0x48>)
   b5416:	f102 0108 	add.w	r1, r2, #8
      { _M_string_length = __length; }
   b541a:	e9c2 1300 	strd	r1, r3, [r2]
      { __c1 = __c2; }
   b541e:	7213      	strb	r3, [r2, #8]
   b5420:	9302      	str	r3, [sp, #8]
   b5422:	4b0b      	ldr	r3, [pc, #44]	; (b5450 <_GLOBAL__sub_I__Z7messageB5cxx11+0x4c>)
   b5424:	9301      	str	r3, [sp, #4]
   b5426:	231e      	movs	r3, #30
   b5428:	9300      	str	r3, [sp, #0]
   b542a:	490a      	ldr	r1, [pc, #40]	; (b5454 <_GLOBAL__sub_I__Z7messageB5cxx11+0x50>)
   b542c:	f44f 7300 	mov.w	r3, #512	; 0x200
   b5430:	f240 725b 	movw	r2, #1883	; 0x75b
   b5434:	f000 f85a 	bl	b54ec <_ZN4MQTTC1EPKctiiPFvPcPhjEb>
   b5438:	b005      	add	sp, #20
   b543a:	f85d fb04 	ldr.w	pc, [sp], #4
   b543e:	bf00      	nop
   b5440:	2003cef8 	.word	0x2003cef8
   b5444:	2003cf00 	.word	0x2003cf00
   b5448:	2003cef9 	.word	0x2003cef9
   b544c:	2003cee0 	.word	0x2003cee0
   b5450:	000b4ae1 	.word	0x000b4ae1
   b5454:	000ba5a7 	.word	0x000ba5a7

000b5458 <_GLOBAL__sub_I__ZN10PriceClassC2Ev>:
   b5458:	4b01      	ldr	r3, [pc, #4]	; (b5460 <_GLOBAL__sub_I__ZN10PriceClassC2Ev+0x8>)
   b545a:	2200      	movs	r2, #0
   b545c:	701a      	strb	r2, [r3, #0]
            int bng_idx = message.find("!");    // Find index of next "!".
            idx++;                              // Increment array index.
        } 
        
    }
   b545e:	4770      	bx	lr
   b5460:	2003e67f 	.word	0x2003e67f

000b5464 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5464:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5468:	b510      	push	{r4, lr}
   b546a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b546c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b546e:	b113      	cbz	r3, b5476 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5470:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5472:	f000 fc91 	bl	b5d98 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5476:	4620      	mov	r0, r4
   b5478:	bd10      	pop	{r4, pc}

000b547a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b547a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b547c:	6803      	ldr	r3, [r0, #0]
   b547e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5482:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5484:	b112      	cbz	r2, b548c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5486:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5488:	f000 fc8e 	bl	b5da8 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b548c:	4620      	mov	r0, r4
   b548e:	bd10      	pop	{r4, pc}

000b5490 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5492:	461f      	mov	r7, r3
   b5494:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5498:	4604      	mov	r4, r0
   b549a:	460d      	mov	r5, r1
   b549c:	4616      	mov	r6, r2
    if (thread) {
   b549e:	b12b      	cbz	r3, b54ac <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b54a0:	2301      	movs	r3, #1
   b54a2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b54a6:	3058      	adds	r0, #88	; 0x58
   b54a8:	f000 fc6e 	bl	b5d88 <os_mutex_create>
    }
    this->callback = callback;
   b54ac:	9b08      	ldr	r3, [sp, #32]
   b54ae:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b54b0:	2300      	movs	r3, #0
   b54b2:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b54b4:	b106      	cbz	r6, b54b8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b54b6:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b54b8:	b125      	cbz	r5, b54c4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b54ba:	4629      	mov	r1, r5
   b54bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b54c0:	f000 ffd5 	bl	b646e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b54c4:	9b06      	ldr	r3, [sp, #24]
   b54c6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54c8:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b54ca:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b54cc:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b54d0:	2bff      	cmp	r3, #255	; 0xff
   b54d2:	bfb8      	it	lt
   b54d4:	23ff      	movlt	r3, #255	; 0xff
   b54d6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b54da:	b108      	cbz	r0, b54e0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b54dc:	f7ff faf3 	bl	b4ac6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b54e0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b54e4:	f7ff faeb 	bl	b4abe <_Znaj>
   b54e8:	61e0      	str	r0, [r4, #28]
}
   b54ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54ec <_ZN4MQTTC1EPKctiiPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b54ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b54f0:	4604      	mov	r4, r0
            bool thread) {
   b54f2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, int maxpacketsize, int keepalive, void (*callback)(char*,uint8_t*,unsigned int),
   b54f4:	4617      	mov	r7, r2
   b54f6:	4698      	mov	r8, r3
   b54f8:	460e      	mov	r6, r1
            bool thread) {
   b54fa:	f002 f9a9 	bl	b7850 <_ZN9TCPClientC1Ev>
   b54fe:	490d      	ldr	r1, [pc, #52]	; (b5534 <_ZN4MQTTC1EPKctiiPFvPcPhjEb+0x48>)
   b5500:	61e5      	str	r5, [r4, #28]
   b5502:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5506:	f000 ff84 	bl	b6412 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b550a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   b550e:	9303      	str	r3, [sp, #12]
   b5510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            bool thread) {
   b5512:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5514:	e9cd 8301 	strd	r8, r3, [sp, #4]
   b5518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b551a:	9300      	str	r3, [sp, #0]
   b551c:	4620      	mov	r0, r4
            bool thread) {
   b551e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, keepalive, maxpacketsize, callback, thread);
   b5522:	463b      	mov	r3, r7
   b5524:	462a      	mov	r2, r5
   b5526:	4631      	mov	r1, r6
   b5528:	f7ff ffb2 	bl	b5490 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b552c:	4620      	mov	r0, r4
   b552e:	b004      	add	sp, #16
   b5530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5534:	000ba417 	.word	0x000ba417

000b5538 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5538:	b510      	push	{r4, lr}
   b553a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b553c:	4620      	mov	r0, r4
   b553e:	f002 f8e3 	bl	b7708 <_ZN9TCPClient9availableEv>
   b5542:	2800      	cmp	r0, #0
   b5544:	d0fa      	beq.n	b553c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5546:	4620      	mov	r0, r4
   b5548:	f001 feec 	bl	b7324 <_ZN9TCPClient4readEv>
}
   b554c:	b2c0      	uxtb	r0, r0
   b554e:	bd10      	pop	{r4, pc}

000b5550 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5554:	4605      	mov	r5, r0
   b5556:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5558:	f7ff ffee 	bl	b5538 <_ZN4MQTT8readByteEv>
   b555c:	69eb      	ldr	r3, [r5, #28]
   b555e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5560:	69eb      	ldr	r3, [r5, #28]
   b5562:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5566:	f04f 0901 	mov.w	r9, #1
   b556a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b556e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5570:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5572:	4628      	mov	r0, r5
   b5574:	f7ff ffe0 	bl	b5538 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5578:	4626      	mov	r6, r4
   b557a:	69eb      	ldr	r3, [r5, #28]
   b557c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b557e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5582:	fb13 f309 	smulbb	r3, r3, r9
   b5586:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5588:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b558a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b558c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b558e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5590:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5594:	d4ed      	bmi.n	b5572 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5596:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5598:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b559c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b55a0:	d11e      	bne.n	b55e0 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b55a2:	4628      	mov	r0, r5
   b55a4:	f7ff ffc8 	bl	b5538 <_ZN4MQTT8readByteEv>
   b55a8:	69eb      	ldr	r3, [r5, #28]
   b55aa:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b55ac:	4628      	mov	r0, r5
   b55ae:	f7ff ffc3 	bl	b5538 <_ZN4MQTT8readByteEv>
   b55b2:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b55b4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b55b6:	b2b6      	uxth	r6, r6
   b55b8:	69eb      	ldr	r3, [r5, #28]
   b55ba:	b2a4      	uxth	r4, r4
   b55bc:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b55be:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b55c0:	b2b6      	uxth	r6, r6
   b55c2:	42be      	cmp	r6, r7
   b55c4:	d20e      	bcs.n	b55e4 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b55c6:	4628      	mov	r0, r5
   b55c8:	f7ff ffb6 	bl	b5538 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b55cc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b55d0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b55d2:	bf84      	itt	hi
   b55d4:	69eb      	ldrhi	r3, [r5, #28]
   b55d6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b55d8:	3401      	adds	r4, #1
   b55da:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b55dc:	3601      	adds	r6, #1
   b55de:	e7ef      	b.n	b55c0 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b55e0:	2600      	movs	r6, #0
   b55e2:	e7ed      	b.n	b55c0 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b55e4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b55e8:	42a3      	cmp	r3, r4
   b55ea:	bf2c      	ite	cs
   b55ec:	4620      	movcs	r0, r4
   b55ee:	2000      	movcc	r0, #0
   b55f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b55f4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b55f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b55f8:	4615      	mov	r5, r2
   b55fa:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b55fc:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b55fe:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b5600:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b5602:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b5604:	a802      	add	r0, sp, #8
        digit = len % 128;
   b5606:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b560a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b560e:	f103 0401 	add.w	r4, r3, #1
   b5612:	4403      	add	r3, r0
            digit |= 0x80;
   b5614:	bf88      	it	hi
   b5616:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b561a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b561e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b5622:	b2e4      	uxtb	r4, r4
   b5624:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b5628:	d81e      	bhi.n	b5668 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b562a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b562e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b5632:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b5634:	4622      	mov	r2, r4
   b5636:	a901      	add	r1, sp, #4
   b5638:	4428      	add	r0, r5
    buf[4-llen] = header;
   b563a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b563e:	f002 fdd6 	bl	b81ee <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b5642:	1c72      	adds	r2, r6, #1
   b5644:	4422      	add	r2, r4
   b5646:	4641      	mov	r1, r8
   b5648:	4638      	mov	r0, r7
   b564a:	f001 fe56 	bl	b72fa <_ZN9TCPClient5writeEPKhj>
   b564e:	4605      	mov	r5, r0
   b5650:	f000 fb82 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b5654:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b5656:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b5658:	4432      	add	r2, r6
   b565a:	b2a8      	uxth	r0, r5
}
   b565c:	1a13      	subs	r3, r2, r0
   b565e:	4258      	negs	r0, r3
   b5660:	4158      	adcs	r0, r3
   b5662:	b002      	add	sp, #8
   b5664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b5668:	4623      	mov	r3, r4
   b566a:	e7ca      	b.n	b5602 <_ZN4MQTT5writeEhPht+0xe>

000b566c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b566c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b566e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5670:	4605      	mov	r5, r0
    pos += 2;
   b5672:	b298      	uxth	r0, r3
   b5674:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b5676:	5cce      	ldrb	r6, [r1, r3]
   b5678:	b29c      	uxth	r4, r3
   b567a:	b156      	cbz	r6, b5692 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b567c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b5680:	4584      	cmp	ip, r0
   b5682:	f103 0701 	add.w	r7, r3, #1
   b5686:	d904      	bls.n	b5692 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b5688:	1c44      	adds	r4, r0, #1
   b568a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b568c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b568e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b5690:	e7f1      	b.n	b5676 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b5692:	b299      	uxth	r1, r3
   b5694:	1a41      	subs	r1, r0, r1
   b5696:	440a      	add	r2, r1
   b5698:	0a21      	lsrs	r1, r4, #8
   b569a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b569e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b56a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b56a4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b56a4:	b538      	push	{r3, r4, r5, lr}
   b56a6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b56a8:	f001 ff50 	bl	b754c <_ZN9TCPClient9connectedEv>
   b56ac:	2800      	cmp	r0, #0
   b56ae:	bf14      	ite	ne
   b56b0:	2501      	movne	r5, #1
   b56b2:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b56b4:	d102      	bne.n	b56bc <_ZN4MQTT11isConnectedEv+0x18>
   b56b6:	4620      	mov	r0, r4
   b56b8:	f002 f880 	bl	b77bc <_ZN9TCPClient4stopEv>
    return rc;
}
   b56bc:	4628      	mov	r0, r5
   b56be:	bd38      	pop	{r3, r4, r5, pc}

000b56c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b56c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b56c4:	b088      	sub	sp, #32
   b56c6:	4604      	mov	r4, r0
   b56c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b56cc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b56d0:	4689      	mov	r9, r1
   b56d2:	4617      	mov	r7, r2
   b56d4:	461e      	mov	r6, r3
    if (!isConnected()) {
   b56d6:	f7ff ffe5 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b56da:	4605      	mov	r5, r0
   b56dc:	2800      	cmp	r0, #0
   b56de:	f040 80cd 	bne.w	b587c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b56e2:	4621      	mov	r1, r4
   b56e4:	a801      	add	r0, sp, #4
   b56e6:	f7ff febd 	bl	b5464 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b56ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b56ec:	2900      	cmp	r1, #0
   b56ee:	f040 8088 	bne.w	b5802 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b56f2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b56f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b56f8:	462b      	mov	r3, r5
   b56fa:	4620      	mov	r0, r4
   b56fc:	f001 fea8 	bl	b7450 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b5700:	2800      	cmp	r0, #0
   b5702:	d07a      	beq.n	b57fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b5704:	2301      	movs	r3, #1
   b5706:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b5708:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b570c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b570e:	2b04      	cmp	r3, #4
   b5710:	4b5b      	ldr	r3, [pc, #364]	; (b5880 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b5712:	f040 8081 	bne.w	b5818 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b5716:	6818      	ldr	r0, [r3, #0]
   b5718:	8899      	ldrh	r1, [r3, #4]
   b571a:	799b      	ldrb	r3, [r3, #6]
   b571c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b5720:	f88d 300e 	strb.w	r3, [sp, #14]
   b5724:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b5726:	f8c2 0005 	str.w	r0, [r2, #5]
   b572a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b572e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b5732:	f8a2 1009 	strh.w	r1, [r2, #9]
   b5736:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b5738:	230c      	movs	r3, #12
            if (willTopic) {
   b573a:	f1b8 0f00 	cmp.w	r8, #0
   b573e:	f000 8081 	beq.w	b5844 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b5742:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b5746:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b574a:	0140      	lsls	r0, r0, #5
   b574c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b5750:	f040 0006 	orr.w	r0, r0, #6
   b5754:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b5756:	f1ba 0f00 	cmp.w	sl, #0
   b575a:	d101      	bne.n	b5760 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b575c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b5760:	b11f      	cbz	r7, b576a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b5762:	2e00      	cmp	r6, #0
   b5764:	d170      	bne.n	b5848 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b5766:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b576a:	69e2      	ldr	r2, [r4, #28]
   b576c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b576e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b5770:	69e1      	ldr	r1, [r4, #28]
   b5772:	1c58      	adds	r0, r3, #1
   b5774:	1212      	asrs	r2, r2, #8
   b5776:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b5778:	1c9a      	adds	r2, r3, #2
   b577a:	69e1      	ldr	r1, [r4, #28]
   b577c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b577e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b5780:	3303      	adds	r3, #3
   b5782:	69e2      	ldr	r2, [r4, #28]
   b5784:	4649      	mov	r1, r9
   b5786:	4620      	mov	r0, r4
   b5788:	f7ff ff70 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
   b578c:	4603      	mov	r3, r0
            if (willTopic) {
   b578e:	f1b8 0f00 	cmp.w	r8, #0
   b5792:	d00b      	beq.n	b57ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b5794:	69e2      	ldr	r2, [r4, #28]
   b5796:	4641      	mov	r1, r8
   b5798:	4620      	mov	r0, r4
   b579a:	f7ff ff67 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b579e:	69e2      	ldr	r2, [r4, #28]
   b57a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b57a2:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b57a4:	4620      	mov	r0, r4
   b57a6:	f7ff ff61 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
   b57aa:	4603      	mov	r3, r0
            if(user != NULL) {
   b57ac:	b167      	cbz	r7, b57c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b57ae:	69e2      	ldr	r2, [r4, #28]
   b57b0:	4639      	mov	r1, r7
   b57b2:	4620      	mov	r0, r4
   b57b4:	f7ff ff5a 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
   b57b8:	4603      	mov	r3, r0
                if(pass != NULL) {
   b57ba:	b12e      	cbz	r6, b57c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b57bc:	69e2      	ldr	r2, [r4, #28]
   b57be:	4631      	mov	r1, r6
   b57c0:	4620      	mov	r0, r4
   b57c2:	f7ff ff53 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
   b57c6:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b57c8:	3b05      	subs	r3, #5
   b57ca:	69e2      	ldr	r2, [r4, #28]
   b57cc:	b29b      	uxth	r3, r3
   b57ce:	2110      	movs	r1, #16
   b57d0:	4620      	mov	r0, r4
   b57d2:	f7ff ff0f 	bl	b55f4 <_ZN4MQTT5writeEhPht>
   b57d6:	f000 fabf 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b57da:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b57de:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b57e2:	4620      	mov	r0, r4
   b57e4:	f001 ff90 	bl	b7708 <_ZN9TCPClient9availableEv>
   b57e8:	bb88      	cbnz	r0, b584e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b57ea:	f000 fab5 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b57ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b57f0:	1ac0      	subs	r0, r0, r3
   b57f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b57f4:	4373      	muls	r3, r6
   b57f6:	4298      	cmp	r0, r3
   b57f8:	d9f3      	bls.n	b57e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b57fa:	4620      	mov	r0, r4
   b57fc:	f001 ffde 	bl	b77bc <_ZN9TCPClient4stopEv>
   b5800:	e035      	b.n	b586e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b5802:	a802      	add	r0, sp, #8
   b5804:	f001 fc0c 	bl	b7020 <_ZN9IPAddressC1EPKh>
   b5808:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b580c:	462b      	mov	r3, r5
   b580e:	a902      	add	r1, sp, #8
   b5810:	4620      	mov	r0, r4
   b5812:	f001 fefd 	bl	b7610 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5816:	e773      	b.n	b5700 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b5818:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b581c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b5820:	7bdb      	ldrb	r3, [r3, #15]
   b5822:	f10d 0c08 	add.w	ip, sp, #8
   b5826:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b582a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b582e:	ab02      	add	r3, sp, #8
   b5830:	cb03      	ldmia	r3!, {r0, r1}
   b5832:	f8c2 0005 	str.w	r0, [r2, #5]
   b5836:	f8c2 1009 	str.w	r1, [r2, #9]
   b583a:	f89c 3000 	ldrb.w	r3, [ip]
   b583e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b5840:	230e      	movs	r3, #14
   b5842:	e77a      	b.n	b573a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b5844:	2002      	movs	r0, #2
   b5846:	e786      	b.n	b5756 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b5848:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b584c:	e78d      	b.n	b576a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b584e:	a902      	add	r1, sp, #8
   b5850:	4620      	mov	r0, r4
   b5852:	f7ff fe7d 	bl	b5550 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b5856:	2804      	cmp	r0, #4
   b5858:	d1cf      	bne.n	b57fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b585a:	69e3      	ldr	r3, [r4, #28]
   b585c:	78de      	ldrb	r6, [r3, #3]
   b585e:	2e00      	cmp	r6, #0
   b5860:	d1cb      	bne.n	b57fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b5862:	f000 fa79 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b5866:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b5868:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b586a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b586e:	a801      	add	r0, sp, #4
   b5870:	f7ff fe03 	bl	b547a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5874:	4628      	mov	r0, r5
   b5876:	b008      	add	sp, #32
   b5878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b587c:	2500      	movs	r5, #0
   b587e:	e7f9      	b.n	b5874 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b5880:	000ba1f4 	.word	0x000ba1f4

000b5884 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b5884:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b5886:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   b588a:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   b588c:	2401      	movs	r4, #1
   b588e:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   b5892:	2400      	movs	r4, #0
   b5894:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5898:	e9cd 4400 	strd	r4, r4, [sp]
   b589c:	f7ff ff10 	bl	b56c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b58a0:	b006      	add	sp, #24
   b58a2:	bd10      	pop	{r4, pc}

000b58a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b58a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58a8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b58ac:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b58b0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b58b4:	4604      	mov	r4, r0
   b58b6:	468b      	mov	fp, r1
   b58b8:	4616      	mov	r6, r2
   b58ba:	461f      	mov	r7, r3
    if (isConnected()) {
   b58bc:	f7ff fef2 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b58c0:	4682      	mov	sl, r0
   b58c2:	2800      	cmp	r0, #0
   b58c4:	d051      	beq.n	b596a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b58c6:	4621      	mov	r1, r4
   b58c8:	a801      	add	r0, sp, #4
   b58ca:	f7ff fdcb 	bl	b5464 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b58ce:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b58d2:	69e0      	ldr	r0, [r4, #28]
   b58d4:	2100      	movs	r1, #0
   b58d6:	f002 fcb2 	bl	b823e <memset>
        length = writeString(topic, buffer, length);
   b58da:	2305      	movs	r3, #5
   b58dc:	69e2      	ldr	r2, [r4, #28]
   b58de:	4659      	mov	r1, fp
   b58e0:	4620      	mov	r0, r4
   b58e2:	f7ff fec3 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b58e6:	1e6b      	subs	r3, r5, #1
   b58e8:	2b01      	cmp	r3, #1
   b58ea:	d815      	bhi.n	b5918 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b58ec:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b58ee:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b58f0:	3101      	adds	r1, #1
   b58f2:	b289      	uxth	r1, r1
   b58f4:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b58f6:	0a09      	lsrs	r1, r1, #8
   b58f8:	5419      	strb	r1, [r3, r0]
   b58fa:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b58fc:	69e3      	ldr	r3, [r4, #28]
   b58fe:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b5900:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b5902:	3002      	adds	r0, #2
   b5904:	5499      	strb	r1, [r3, r2]
   b5906:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b5908:	f1b8 0f00 	cmp.w	r8, #0
   b590c:	d004      	beq.n	b5918 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b590e:	8c23      	ldrh	r3, [r4, #32]
   b5910:	1c5a      	adds	r2, r3, #1
   b5912:	8422      	strh	r2, [r4, #32]
   b5914:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b5918:	2100      	movs	r1, #0
   b591a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b591c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b591e:	69e2      	ldr	r2, [r4, #28]
   b5920:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5922:	d90a      	bls.n	b593a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b5924:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b5928:	459c      	cmp	ip, r3
   b592a:	d906      	bls.n	b593a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b592c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b5930:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b5934:	3101      	adds	r1, #1
   b5936:	b289      	uxth	r1, r1
   b5938:	e7ef      	b.n	b591a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b593a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b593e:	2900      	cmp	r1, #0
   b5940:	bf0c      	ite	eq
   b5942:	2130      	moveq	r1, #48	; 0x30
   b5944:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b5946:	f1b9 0f00 	cmp.w	r9, #0
   b594a:	d001      	beq.n	b5950 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b594c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b5950:	2d02      	cmp	r5, #2
   b5952:	d10e      	bne.n	b5972 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b5954:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b5958:	3b05      	subs	r3, #5
   b595a:	b29b      	uxth	r3, r3
   b595c:	4620      	mov	r0, r4
   b595e:	f7ff fe49 	bl	b55f4 <_ZN4MQTT5writeEhPht>
   b5962:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b5964:	a801      	add	r0, sp, #4
   b5966:	f7ff fd88 	bl	b547a <_ZN4MQTT11MutexLockerD1Ev>
}
   b596a:	4650      	mov	r0, sl
   b596c:	b003      	add	sp, #12
   b596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b5972:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b5974:	bf08      	it	eq
   b5976:	f041 0102 	orreq.w	r1, r1, #2
   b597a:	e7ed      	b.n	b5958 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b597c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b597c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b597e:	9c08      	ldr	r4, [sp, #32]
   b5980:	9403      	str	r4, [sp, #12]
   b5982:	2400      	movs	r4, #0
   b5984:	9402      	str	r4, [sp, #8]
   b5986:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b598a:	9401      	str	r4, [sp, #4]
   b598c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b5990:	9400      	str	r4, [sp, #0]
   b5992:	f7ff ff87 	bl	b58a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b5996:	b004      	add	sp, #16
   b5998:	bd10      	pop	{r4, pc}

000b599a <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b599a:	b530      	push	{r4, r5, lr}
   b599c:	b087      	sub	sp, #28
   b599e:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59a0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b59a2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b59a4:	9204      	str	r2, [sp, #16]
   b59a6:	f7ff f82d 	bl	b4a04 <strlen>
   b59aa:	2500      	movs	r5, #0
   b59ac:	4603      	mov	r3, r0
   b59ae:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b59b2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b59b6:	9500      	str	r5, [sp, #0]
   b59b8:	4620      	mov	r0, r4
   b59ba:	f7ff ffdf 	bl	b597c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b59be:	b007      	add	sp, #28
   b59c0:	bd30      	pop	{r4, r5, pc}

000b59c2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b59c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59c4:	4604      	mov	r4, r0
   b59c6:	460e      	mov	r6, r1
    if (isConnected()) {
   b59c8:	f7ff fe6c 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b59cc:	4605      	mov	r5, r0
   b59ce:	b1c8      	cbz	r0, b5a04 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b59d0:	4621      	mov	r1, r4
   b59d2:	a801      	add	r0, sp, #4
   b59d4:	f7ff fd46 	bl	b5464 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b59d8:	69e3      	ldr	r3, [r4, #28]
   b59da:	2262      	movs	r2, #98	; 0x62
   b59dc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b59de:	69e3      	ldr	r3, [r4, #28]
   b59e0:	2202      	movs	r2, #2
   b59e2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b59e4:	69e3      	ldr	r3, [r4, #28]
   b59e6:	0a32      	lsrs	r2, r6, #8
   b59e8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b59ea:	69e3      	ldr	r3, [r4, #28]
   b59ec:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b59ee:	69e1      	ldr	r1, [r4, #28]
   b59f0:	2204      	movs	r2, #4
   b59f2:	4620      	mov	r0, r4
   b59f4:	f001 fc81 	bl	b72fa <_ZN9TCPClient5writeEPKhj>
   b59f8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b59fa:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b59fc:	bf18      	it	ne
   b59fe:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a00:	f7ff fd3b 	bl	b547a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a04:	4628      	mov	r0, r5
   b5a06:	b002      	add	sp, #8
   b5a08:	bd70      	pop	{r4, r5, r6, pc}

000b5a0a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b5a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a0c:	4604      	mov	r4, r0
   b5a0e:	460e      	mov	r6, r1
    if (isConnected()) {
   b5a10:	f7ff fe48 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b5a14:	4605      	mov	r5, r0
   b5a16:	b1c8      	cbz	r0, b5a4c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b5a18:	4621      	mov	r1, r4
   b5a1a:	a801      	add	r0, sp, #4
   b5a1c:	f7ff fd22 	bl	b5464 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b5a20:	69e3      	ldr	r3, [r4, #28]
   b5a22:	2272      	movs	r2, #114	; 0x72
   b5a24:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b5a26:	69e3      	ldr	r3, [r4, #28]
   b5a28:	2202      	movs	r2, #2
   b5a2a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b5a2c:	69e3      	ldr	r3, [r4, #28]
   b5a2e:	0a32      	lsrs	r2, r6, #8
   b5a30:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b5a32:	69e3      	ldr	r3, [r4, #28]
   b5a34:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b5a36:	69e1      	ldr	r1, [r4, #28]
   b5a38:	2204      	movs	r2, #4
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	f001 fc5d 	bl	b72fa <_ZN9TCPClient5writeEPKhj>
   b5a40:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b5a42:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b5a44:	bf18      	it	ne
   b5a46:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b5a48:	f7ff fd17 	bl	b547a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5a4c:	4628      	mov	r0, r5
   b5a4e:	b002      	add	sp, #8
   b5a50:	bd70      	pop	{r4, r5, r6, pc}

000b5a52 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b5a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a56:	ed2d 8b02 	vpush	{d8}
   b5a5a:	b087      	sub	sp, #28
   b5a5c:	af00      	add	r7, sp, #0
   b5a5e:	4604      	mov	r4, r0
    if (isConnected()) {
   b5a60:	f7ff fe20 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b5a64:	4681      	mov	r9, r0
   b5a66:	b1f8      	cbz	r0, b5aa8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b5a68:	4621      	mov	r1, r4
   b5a6a:	f107 0014 	add.w	r0, r7, #20
   b5a6e:	f7ff fcf9 	bl	b5464 <_ZN4MQTT11MutexLockerC1EPS_>
   b5a72:	f000 f971 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b5a76:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a7c:	4353      	muls	r3, r2
   b5a7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b5a80:	1a82      	subs	r2, r0, r2
   b5a82:	429a      	cmp	r2, r3
   b5a84:	4606      	mov	r6, r0
   b5a86:	d803      	bhi.n	b5a90 <_ZN4MQTT4loopEv+0x3e>
   b5a88:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b5a8a:	1a82      	subs	r2, r0, r2
   b5a8c:	4293      	cmp	r3, r2
   b5a8e:	d221      	bcs.n	b5ad4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b5a90:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b5a94:	b17b      	cbz	r3, b5ab6 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b5a96:	4620      	mov	r0, r4
   b5a98:	f001 fe90 	bl	b77bc <_ZN9TCPClient4stopEv>
                return false;
   b5a9c:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b5aa0:	f107 0014 	add.w	r0, r7, #20
   b5aa4:	f7ff fce9 	bl	b547a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5aa8:	4648      	mov	r0, r9
   b5aaa:	371c      	adds	r7, #28
   b5aac:	46bd      	mov	sp, r7
   b5aae:	ecbd 8b02 	vpop	{d8}
   b5ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b5ab6:	69e2      	ldr	r2, [r4, #28]
   b5ab8:	21c0      	movs	r1, #192	; 0xc0
   b5aba:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b5abc:	69e2      	ldr	r2, [r4, #28]
   b5abe:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b5ac0:	69e1      	ldr	r1, [r4, #28]
   b5ac2:	2202      	movs	r2, #2
   b5ac4:	4620      	mov	r0, r4
   b5ac6:	f001 fc18 	bl	b72fa <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b5aca:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b5ace:	2301      	movs	r3, #1
   b5ad0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	f001 fe17 	bl	b7708 <_ZN9TCPClient9availableEv>
   b5ada:	2800      	cmp	r0, #0
   b5adc:	d0e0      	beq.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b5ade:	f107 0113 	add.w	r1, r7, #19
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	f7ff fd34 	bl	b5550 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b5ae8:	4683      	mov	fp, r0
   b5aea:	2800      	cmp	r0, #0
   b5aec:	d0d8      	beq.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b5aee:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b5af0:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b5af2:	7819      	ldrb	r1, [r3, #0]
   b5af4:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b5af8:	2a30      	cmp	r2, #48	; 0x30
   b5afa:	d17f      	bne.n	b5bfc <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b5afc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b5b00:	f1ba 0f00 	cmp.w	sl, #0
   b5b04:	d0cc      	beq.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b06:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b5b0a:	466a      	mov	r2, sp
   b5b0c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b5b10:	eb03 020c 	add.w	r2, r3, ip
   b5b14:	7851      	ldrb	r1, [r2, #1]
   b5b16:	7895      	ldrb	r5, [r2, #2]
   b5b18:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b5b1c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b5b1e:	f105 0208 	add.w	r2, r5, #8
   b5b22:	4669      	mov	r1, sp
   b5b24:	08d2      	lsrs	r2, r2, #3
   b5b26:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b5b2a:	4695      	mov	sp, r2
   b5b2c:	f10c 0203 	add.w	r2, ip, #3
   b5b30:	60fa      	str	r2, [r7, #12]
   b5b32:	eb03 0e02 	add.w	lr, r3, r2
   b5b36:	eb0d 0205 	add.w	r2, sp, r5
   b5b3a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b5b3c:	f8c7 d008 	str.w	sp, [r7, #8]
   b5b40:	607a      	str	r2, [r7, #4]
   b5b42:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b5b46:	428a      	cmp	r2, r1
   b5b48:	d006      	beq.n	b5b58 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b5b4a:	460a      	mov	r2, r1
   b5b4c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b5b50:	f802 8b01 	strb.w	r8, [r2], #1
   b5b54:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b5b56:	e7f4      	b.n	b5b42 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b5b58:	2200      	movs	r2, #0
   b5b5a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b5c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b60:	68f9      	ldr	r1, [r7, #12]
   b5b62:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b5b66:	ebab 020c 	sub.w	r2, fp, ip
   b5b6a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b6c:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b5b70:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b74:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b5b76:	d125      	bne.n	b5bc4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b78:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5b7c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b5b7e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b80:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b5b84:	f10c 0105 	add.w	r1, ip, #5
   b5b88:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b5b8a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b8c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b5b90:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b5b92:	69e3      	ldr	r3, [r4, #28]
   b5b94:	2240      	movs	r2, #64	; 0x40
   b5b96:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b5b98:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b5b9a:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b5b9e:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b5ba2:	69e3      	ldr	r3, [r4, #28]
   b5ba4:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b5ba8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b5baa:	69e3      	ldr	r3, [r4, #28]
   b5bac:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b5bb0:	69e1      	ldr	r1, [r4, #28]
   b5bb2:	2204      	movs	r2, #4
   b5bb4:	4620      	mov	r0, r4
   b5bb6:	f001 fba0 	bl	b72fa <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b5bba:	6266      	str	r6, [r4, #36]	; 0x24
   b5bbc:	ee18 3a10 	vmov	r3, s16
   b5bc0:	469d      	mov	sp, r3
   b5bc2:	e76d      	b.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b5bc4:	f1b8 0f04 	cmp.w	r8, #4
   b5bc8:	d115      	bne.n	b5bf6 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bca:	f813 e001 	ldrb.w	lr, [r3, r1]
   b5bce:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5bd0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bd2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b5bd6:	f10c 0105 	add.w	r1, ip, #5
   b5bda:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5bdc:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bde:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b5be2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b5be4:	69e3      	ldr	r3, [r4, #28]
   b5be6:	2250      	movs	r2, #80	; 0x50
   b5be8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b5bea:	69e3      	ldr	r3, [r4, #28]
   b5bec:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b5bee:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b5bf2:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b5bf4:	e7d5      	b.n	b5ba2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b5bf6:	4419      	add	r1, r3
   b5bf8:	47d0      	blx	sl
   b5bfa:	e7df      	b.n	b5bbc <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b5bfc:	2a50      	cmp	r2, #80	; 0x50
   b5bfe:	d108      	bne.n	b5c12 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b5c00:	789a      	ldrb	r2, [r3, #2]
   b5c02:	78d9      	ldrb	r1, [r3, #3]
   b5c04:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b5c08:	b289      	uxth	r1, r1
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	f7ff fed9 	bl	b59c2 <_ZN4MQTT14publishReleaseEt>
   b5c10:	e746      	b.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b5c12:	2a40      	cmp	r2, #64	; 0x40
   b5c14:	d112      	bne.n	b5c3c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b5c16:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b5c18:	2a00      	cmp	r2, #0
   b5c1a:	f43f af41 	beq.w	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b5c1e:	f1bb 0f04 	cmp.w	fp, #4
   b5c22:	f47f af3d 	bne.w	b5aa0 <_ZN4MQTT4loopEv+0x4e>
   b5c26:	f011 0f06 	tst.w	r1, #6
   b5c2a:	f47f af39 	bne.w	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b5c2e:	7899      	ldrb	r1, [r3, #2]
   b5c30:	78d8      	ldrb	r0, [r3, #3]
   b5c32:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b5c36:	b280      	uxth	r0, r0
   b5c38:	4790      	blx	r2
   b5c3a:	e731      	b.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b5c3c:	2a60      	cmp	r2, #96	; 0x60
   b5c3e:	d108      	bne.n	b5c52 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b5c40:	789a      	ldrb	r2, [r3, #2]
   b5c42:	78d9      	ldrb	r1, [r3, #3]
   b5c44:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b5c48:	b289      	uxth	r1, r1
   b5c4a:	4620      	mov	r0, r4
   b5c4c:	f7ff fedd 	bl	b5a0a <_ZN4MQTT15publishCompleteEt>
   b5c50:	e726      	b.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b5c52:	2a70      	cmp	r2, #112	; 0x70
   b5c54:	d0df      	beq.n	b5c16 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b5c56:	2a90      	cmp	r2, #144	; 0x90
   b5c58:	f43f af22 	beq.w	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b5c5c:	2ac0      	cmp	r2, #192	; 0xc0
   b5c5e:	d10a      	bne.n	b5c76 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b5c60:	22d0      	movs	r2, #208	; 0xd0
   b5c62:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b5c64:	69e3      	ldr	r3, [r4, #28]
   b5c66:	2200      	movs	r2, #0
   b5c68:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b5c6a:	69e1      	ldr	r1, [r4, #28]
   b5c6c:	2202      	movs	r2, #2
   b5c6e:	4620      	mov	r0, r4
   b5c70:	f001 fb43 	bl	b72fa <_ZN9TCPClient5writeEPKhj>
   b5c74:	e714      	b.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b5c76:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b5c78:	bf04      	itt	eq
   b5c7a:	2300      	moveq	r3, #0
   b5c7c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b5c80:	e70e      	b.n	b5aa0 <_ZN4MQTT4loopEv+0x4e>

000b5c82 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b5c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c84:	4604      	mov	r4, r0
   b5c86:	460f      	mov	r7, r1
   b5c88:	4616      	mov	r6, r2
    if (isConnected()) {
   b5c8a:	f7ff fd0b 	bl	b56a4 <_ZN4MQTT11isConnectedEv>
   b5c8e:	4605      	mov	r5, r0
   b5c90:	b310      	cbz	r0, b5cd8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b5c92:	4621      	mov	r1, r4
   b5c94:	a801      	add	r0, sp, #4
   b5c96:	f7ff fbe5 	bl	b5464 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b5c9a:	8c23      	ldrh	r3, [r4, #32]
   b5c9c:	3301      	adds	r3, #1
   b5c9e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b5ca0:	b1eb      	cbz	r3, b5cde <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b5ca2:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b5ca4:	8c23      	ldrh	r3, [r4, #32]
   b5ca6:	69e2      	ldr	r2, [r4, #28]
   b5ca8:	0a1b      	lsrs	r3, r3, #8
   b5caa:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b5cac:	69e3      	ldr	r3, [r4, #28]
   b5cae:	8c22      	ldrh	r2, [r4, #32]
   b5cb0:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b5cb2:	69e2      	ldr	r2, [r4, #28]
   b5cb4:	2307      	movs	r3, #7
   b5cb6:	4639      	mov	r1, r7
   b5cb8:	4620      	mov	r0, r4
   b5cba:	f7ff fcd7 	bl	b566c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b5cbe:	69e3      	ldr	r3, [r4, #28]
   b5cc0:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b5cc2:	3804      	subs	r0, #4
   b5cc4:	b283      	uxth	r3, r0
   b5cc6:	69e2      	ldr	r2, [r4, #28]
   b5cc8:	2182      	movs	r1, #130	; 0x82
   b5cca:	4620      	mov	r0, r4
   b5ccc:	f7ff fc92 	bl	b55f4 <_ZN4MQTT5writeEhPht>
   b5cd0:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b5cd2:	a801      	add	r0, sp, #4
   b5cd4:	f7ff fbd1 	bl	b547a <_ZN4MQTT11MutexLockerD1Ev>
}
   b5cd8:	4628      	mov	r0, r5
   b5cda:	b003      	add	sp, #12
   b5cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b5cde:	2301      	movs	r3, #1
   b5ce0:	e7df      	b.n	b5ca2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b5ce2 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b5ce2:	2200      	movs	r2, #0
   b5ce4:	f7ff bfcd 	b.w	b5c82 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b5ce8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5ce8:	b508      	push	{r3, lr}
   b5cea:	4b02      	ldr	r3, [pc, #8]	; (b5cf4 <netdb_freeaddrinfo+0xc>)
   b5cec:	681b      	ldr	r3, [r3, #0]
   b5cee:	689b      	ldr	r3, [r3, #8]
   b5cf0:	9301      	str	r3, [sp, #4]
   b5cf2:	bd08      	pop	{r3, pc}
   b5cf4:	00030268 	.word	0x00030268

000b5cf8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5cf8:	b508      	push	{r3, lr}
   b5cfa:	4b02      	ldr	r3, [pc, #8]	; (b5d04 <netdb_getaddrinfo+0xc>)
   b5cfc:	681b      	ldr	r3, [r3, #0]
   b5cfe:	68db      	ldr	r3, [r3, #12]
   b5d00:	9301      	str	r3, [sp, #4]
   b5d02:	bd08      	pop	{r3, pc}
   b5d04:	00030268 	.word	0x00030268

000b5d08 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5d08:	b508      	push	{r3, lr}
   b5d0a:	4b02      	ldr	r3, [pc, #8]	; (b5d14 <hal_gpio_mode+0xc>)
   b5d0c:	681b      	ldr	r3, [r3, #0]
   b5d0e:	689b      	ldr	r3, [r3, #8]
   b5d10:	9301      	str	r3, [sp, #4]
   b5d12:	bd08      	pop	{r3, pc}
   b5d14:	0003022c 	.word	0x0003022c

000b5d18 <hal_interrupt_attach>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   b5d18:	b508      	push	{r3, lr}
   b5d1a:	4b02      	ldr	r3, [pc, #8]	; (b5d24 <hal_interrupt_attach+0xc>)
   b5d1c:	681b      	ldr	r3, [r3, #0]
   b5d1e:	699b      	ldr	r3, [r3, #24]
   b5d20:	9301      	str	r3, [sp, #4]
   b5d22:	bd08      	pop	{r3, pc}
   b5d24:	0003022c 	.word	0x0003022c

000b5d28 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   b5d28:	b508      	push	{r3, lr}
   b5d2a:	4b02      	ldr	r3, [pc, #8]	; (b5d34 <hal_interrupt_detach+0xc>)
   b5d2c:	681b      	ldr	r3, [r3, #0]
   b5d2e:	69db      	ldr	r3, [r3, #28]
   b5d30:	9301      	str	r3, [sp, #4]
   b5d32:	bd08      	pop	{r3, pc}
   b5d34:	0003022c 	.word	0x0003022c

000b5d38 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5d38:	b508      	push	{r3, lr}
   b5d3a:	4b02      	ldr	r3, [pc, #8]	; (b5d44 <if_index_to_name+0xc>)
   b5d3c:	681b      	ldr	r3, [r3, #0]
   b5d3e:	695b      	ldr	r3, [r3, #20]
   b5d40:	9301      	str	r3, [sp, #4]
   b5d42:	bd08      	pop	{r3, pc}
   b5d44:	0003026c 	.word	0x0003026c

000b5d48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5d48:	b508      	push	{r3, lr}
   b5d4a:	4b02      	ldr	r3, [pc, #8]	; (b5d54 <HAL_RNG_GetRandomNumber+0xc>)
   b5d4c:	681b      	ldr	r3, [r3, #0]
   b5d4e:	685b      	ldr	r3, [r3, #4]
   b5d50:	9301      	str	r3, [sp, #4]
   b5d52:	bd08      	pop	{r3, pc}
   b5d54:	00030218 	.word	0x00030218

000b5d58 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5d58:	b508      	push	{r3, lr}
   b5d5a:	4b02      	ldr	r3, [pc, #8]	; (b5d64 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5d5c:	681b      	ldr	r3, [r3, #0]
   b5d5e:	695b      	ldr	r3, [r3, #20]
   b5d60:	9301      	str	r3, [sp, #4]
   b5d62:	bd08      	pop	{r3, pc}
   b5d64:	00030218 	.word	0x00030218

000b5d68 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5d68:	b508      	push	{r3, lr}
   b5d6a:	4b02      	ldr	r3, [pc, #8]	; (b5d74 <hal_rtc_time_is_valid+0xc>)
   b5d6c:	681b      	ldr	r3, [r3, #0]
   b5d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5d70:	9301      	str	r3, [sp, #4]
   b5d72:	bd08      	pop	{r3, pc}
   b5d74:	00030218 	.word	0x00030218

000b5d78 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5d78:	b508      	push	{r3, lr}
   b5d7a:	4b02      	ldr	r3, [pc, #8]	; (b5d84 <hal_rtc_get_time+0xc>)
   b5d7c:	681b      	ldr	r3, [r3, #0]
   b5d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5d80:	9301      	str	r3, [sp, #4]
   b5d82:	bd08      	pop	{r3, pc}
   b5d84:	00030218 	.word	0x00030218

000b5d88 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5d88:	b508      	push	{r3, lr}
   b5d8a:	4b02      	ldr	r3, [pc, #8]	; (b5d94 <os_mutex_create+0xc>)
   b5d8c:	681b      	ldr	r3, [r3, #0]
   b5d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d90:	9301      	str	r3, [sp, #4]
   b5d92:	bd08      	pop	{r3, pc}
   b5d94:	00030248 	.word	0x00030248

000b5d98 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b5d98:	b508      	push	{r3, lr}
   b5d9a:	4b02      	ldr	r3, [pc, #8]	; (b5da4 <os_mutex_lock+0xc>)
   b5d9c:	681b      	ldr	r3, [r3, #0]
   b5d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5da0:	9301      	str	r3, [sp, #4]
   b5da2:	bd08      	pop	{r3, pc}
   b5da4:	00030248 	.word	0x00030248

000b5da8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b5da8:	b508      	push	{r3, lr}
   b5daa:	4b02      	ldr	r3, [pc, #8]	; (b5db4 <os_mutex_unlock+0xc>)
   b5dac:	681b      	ldr	r3, [r3, #0]
   b5dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5db0:	9301      	str	r3, [sp, #4]
   b5db2:	bd08      	pop	{r3, pc}
   b5db4:	00030248 	.word	0x00030248

000b5db8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5db8:	b508      	push	{r3, lr}
   b5dba:	4b02      	ldr	r3, [pc, #8]	; (b5dc4 <os_mutex_recursive_create+0xc>)
   b5dbc:	681b      	ldr	r3, [r3, #0]
   b5dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dc0:	9301      	str	r3, [sp, #4]
   b5dc2:	bd08      	pop	{r3, pc}
   b5dc4:	00030248 	.word	0x00030248

000b5dc8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <inet_inet_ntop+0xc>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	695b      	ldr	r3, [r3, #20]
   b5dd0:	9301      	str	r3, [sp, #4]
   b5dd2:	bd08      	pop	{r3, pc}
   b5dd4:	00030264 	.word	0x00030264

000b5dd8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5dd8:	b508      	push	{r3, lr}
   b5dda:	4b02      	ldr	r3, [pc, #8]	; (b5de4 <inet_htonl+0xc>)
   b5ddc:	681b      	ldr	r3, [r3, #0]
   b5dde:	6a1b      	ldr	r3, [r3, #32]
   b5de0:	9301      	str	r3, [sp, #4]
   b5de2:	bd08      	pop	{r3, pc}
   b5de4:	00030264 	.word	0x00030264

000b5de8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5de8:	b508      	push	{r3, lr}
   b5dea:	4b02      	ldr	r3, [pc, #8]	; (b5df4 <inet_htons+0xc>)
   b5dec:	681b      	ldr	r3, [r3, #0]
   b5dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	bd08      	pop	{r3, pc}
   b5df4:	00030264 	.word	0x00030264

000b5df8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5df8:	b508      	push	{r3, lr}
   b5dfa:	4b02      	ldr	r3, [pc, #8]	; (b5e04 <hal_usart_write+0xc>)
   b5dfc:	681b      	ldr	r3, [r3, #0]
   b5dfe:	68db      	ldr	r3, [r3, #12]
   b5e00:	9301      	str	r3, [sp, #4]
   b5e02:	bd08      	pop	{r3, pc}
   b5e04:	0003023c 	.word	0x0003023c

000b5e08 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <hal_usart_available+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	691b      	ldr	r3, [r3, #16]
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	0003023c 	.word	0x0003023c

000b5e18 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <hal_usart_read+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	695b      	ldr	r3, [r3, #20]
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	0003023c 	.word	0x0003023c

000b5e28 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <hal_usart_peek+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	699b      	ldr	r3, [r3, #24]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	0003023c 	.word	0x0003023c

000b5e38 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <hal_usart_flush+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	69db      	ldr	r3, [r3, #28]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	0003023c 	.word	0x0003023c

000b5e48 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <hal_usart_is_enabled+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	6a1b      	ldr	r3, [r3, #32]
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	0003023c 	.word	0x0003023c

000b5e58 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <hal_usart_available_data_for_write+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	0003023c 	.word	0x0003023c

000b5e68 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <hal_usart_init_ex+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	0003023c 	.word	0x0003023c

000b5e78 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <hal_i2c_write+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	6a1b      	ldr	r3, [r3, #32]
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030228 	.word	0x00030228

000b5e88 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <hal_i2c_available+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030228 	.word	0x00030228

000b5e98 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <hal_i2c_read+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030228 	.word	0x00030228

000b5ea8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <hal_i2c_peek+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030228 	.word	0x00030228

000b5eb8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <hal_i2c_flush+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030228 	.word	0x00030228

000b5ec8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <hal_i2c_is_enabled+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030228 	.word	0x00030228

000b5ed8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <hal_i2c_init+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030228 	.word	0x00030228

000b5ee8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <sock_setsockopt+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	699b      	ldr	r3, [r3, #24]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030238 	.word	0x00030238

000b5ef8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <sock_close+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	69db      	ldr	r3, [r3, #28]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030238 	.word	0x00030238

000b5f08 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <sock_connect+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6a1b      	ldr	r3, [r3, #32]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	00030238 	.word	0x00030238

000b5f18 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <sock_recv+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	00030238 	.word	0x00030238

000b5f28 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <sock_send+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	00030238 	.word	0x00030238

000b5f38 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <sock_socket+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	00030238 	.word	0x00030238

000b5f48 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <hal_spi_init+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	69db      	ldr	r3, [r3, #28]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030230 	.word	0x00030230

000b5f58 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <hal_spi_is_enabled+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	6a1b      	ldr	r3, [r3, #32]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030230 	.word	0x00030230

000b5f68 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <HAL_USB_USART_Init+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	681b      	ldr	r3, [r3, #0]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	0003024c 	.word	0x0003024c

000b5f78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <HAL_USB_USART_Available_Data+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	691b      	ldr	r3, [r3, #16]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	0003024c 	.word	0x0003024c

000b5f88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	695b      	ldr	r3, [r3, #20]
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	0003024c 	.word	0x0003024c

000b5f98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <HAL_USB_USART_Receive_Data+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	699b      	ldr	r3, [r3, #24]
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	0003024c 	.word	0x0003024c

000b5fa8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <HAL_USB_USART_Send_Data+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	69db      	ldr	r3, [r3, #28]
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	0003024c 	.word	0x0003024c

000b5fb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <HAL_USB_USART_Flush_Data+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	6a1b      	ldr	r3, [r3, #32]
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	0003024c 	.word	0x0003024c

000b5fc8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <log_message+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030260 	.word	0x00030260

000b5fd8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <system_mode+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	681b      	ldr	r3, [r3, #0]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030220 	.word	0x00030220

000b5fe8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <set_system_mode+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	685b      	ldr	r3, [r3, #4]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030220 	.word	0x00030220

000b5ff8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <system_delay_ms+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	695b      	ldr	r3, [r3, #20]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030220 	.word	0x00030220

000b6008 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <application_thread_current+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030220 	.word	0x00030220

000b6018 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <application_thread_invoke+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030220 	.word	0x00030220

000b6028 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <system_thread_get_state+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	00030220 	.word	0x00030220

000b6038 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b03      	ldr	r3, [pc, #12]	; (b6048 <system_ctrl_set_app_request_handler+0x10>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6042:	9301      	str	r3, [sp, #4]
   b6044:	bd08      	pop	{r3, pc}
   b6046:	0000      	.short	0x0000
   b6048:	00030220 	.word	0x00030220

000b604c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b604c:	b508      	push	{r3, lr}
   b604e:	4b03      	ldr	r3, [pc, #12]	; (b605c <system_ctrl_set_result+0x10>)
   b6050:	681b      	ldr	r3, [r3, #0]
   b6052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6056:	9301      	str	r3, [sp, #4]
   b6058:	bd08      	pop	{r3, pc}
   b605a:	0000      	.short	0x0000
   b605c:	00030220 	.word	0x00030220

000b6060 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <network_connect+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	685b      	ldr	r3, [r3, #4]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030240 	.word	0x00030240

000b6070 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <network_connecting+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	689b      	ldr	r3, [r3, #8]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030240 	.word	0x00030240

000b6080 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <network_disconnect+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	68db      	ldr	r3, [r3, #12]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030240 	.word	0x00030240

000b6090 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <network_ready+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	691b      	ldr	r3, [r3, #16]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030240 	.word	0x00030240

000b60a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <network_on+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	695b      	ldr	r3, [r3, #20]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030240 	.word	0x00030240

000b60b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <network_off+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	699b      	ldr	r3, [r3, #24]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030240 	.word	0x00030240

000b60c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <network_listen+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	69db      	ldr	r3, [r3, #28]
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030240 	.word	0x00030240

000b60d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <network_listening+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6a1b      	ldr	r3, [r3, #32]
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030240 	.word	0x00030240

000b60e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <network_set_listen_timeout+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030240 	.word	0x00030240

000b60f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <network_get_listen_timeout+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030240 	.word	0x00030240

000b6100 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <network_is_on+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	00030240 	.word	0x00030240

000b6110 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <network_is_off+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	00030240 	.word	0x00030240

000b6120 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <spark_process+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	689b      	ldr	r3, [r3, #8]
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	00030244 	.word	0x00030244

000b6130 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <spark_cloud_flag_connected+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	695b      	ldr	r3, [r3, #20]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	00030244 	.word	0x00030244

000b6140 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <spark_send_event+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	6a1b      	ldr	r3, [r3, #32]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	00030244 	.word	0x00030244

000b6150 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <spark_subscribe+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	00030244 	.word	0x00030244

000b6160 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <spark_sync_time_pending+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	00030244 	.word	0x00030244

000b6170 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	00030244 	.word	0x00030244

000b6180 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <malloc+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	681b      	ldr	r3, [r3, #0]
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	0003021c 	.word	0x0003021c

000b6190 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <free+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	685b      	ldr	r3, [r3, #4]
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	0003021c 	.word	0x0003021c

000b61a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <realloc+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	689b      	ldr	r3, [r3, #8]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	0003021c 	.word	0x0003021c

000b61b0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <sprintf+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	68db      	ldr	r3, [r3, #12]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	0003021c 	.word	0x0003021c

000b61c0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b02      	ldr	r3, [pc, #8]	; (b61cc <sscanf+0xc>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	695b      	ldr	r3, [r3, #20]
   b61c8:	9301      	str	r3, [sp, #4]
   b61ca:	bd08      	pop	{r3, pc}
   b61cc:	0003021c 	.word	0x0003021c

000b61d0 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b61d0:	b508      	push	{r3, lr}
   b61d2:	4b02      	ldr	r3, [pc, #8]	; (b61dc <vsnprintf+0xc>)
   b61d4:	681b      	ldr	r3, [r3, #0]
   b61d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61d8:	9301      	str	r3, [sp, #4]
   b61da:	bd08      	pop	{r3, pc}
   b61dc:	0003021c 	.word	0x0003021c

000b61e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b61e0:	b508      	push	{r3, lr}
   b61e2:	4b02      	ldr	r3, [pc, #8]	; (b61ec <abort+0xc>)
   b61e4:	681b      	ldr	r3, [r3, #0]
   b61e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b61e8:	9301      	str	r3, [sp, #4]
   b61ea:	bd08      	pop	{r3, pc}
   b61ec:	0003021c 	.word	0x0003021c

000b61f0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b61f0:	b508      	push	{r3, lr}
   b61f2:	4b02      	ldr	r3, [pc, #8]	; (b61fc <_malloc_r+0xc>)
   b61f4:	681b      	ldr	r3, [r3, #0]
   b61f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61f8:	9301      	str	r3, [sp, #4]
   b61fa:	bd08      	pop	{r3, pc}
   b61fc:	0003021c 	.word	0x0003021c

000b6200 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6200:	b508      	push	{r3, lr}
   b6202:	4b02      	ldr	r3, [pc, #8]	; (b620c <__errno+0xc>)
   b6204:	681b      	ldr	r3, [r3, #0]
   b6206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6208:	9301      	str	r3, [sp, #4]
   b620a:	bd08      	pop	{r3, pc}
   b620c:	0003021c 	.word	0x0003021c

000b6210 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6210:	b508      	push	{r3, lr}
   b6212:	4b02      	ldr	r3, [pc, #8]	; (b621c <__assert_func+0xc>)
   b6214:	681b      	ldr	r3, [r3, #0]
   b6216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6218:	9301      	str	r3, [sp, #4]
   b621a:	bd08      	pop	{r3, pc}
   b621c:	0003021c 	.word	0x0003021c

000b6220 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6220:	b508      	push	{r3, lr}
   b6222:	4b02      	ldr	r3, [pc, #8]	; (b622c <newlib_impure_ptr_callback+0xc>)
   b6224:	681b      	ldr	r3, [r3, #0]
   b6226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6228:	9301      	str	r3, [sp, #4]
   b622a:	bd08      	pop	{r3, pc}
   b622c:	0003021c 	.word	0x0003021c

000b6230 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6230:	b508      	push	{r3, lr}
   b6232:	4b02      	ldr	r3, [pc, #8]	; (b623c <localtime_r+0xc>)
   b6234:	681b      	ldr	r3, [r3, #0]
   b6236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6238:	9301      	str	r3, [sp, #4]
   b623a:	bd08      	pop	{r3, pc}
   b623c:	0003021c 	.word	0x0003021c

000b6240 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6240:	2200      	movs	r2, #0
   b6242:	6840      	ldr	r0, [r0, #4]
   b6244:	4611      	mov	r1, r2
   b6246:	f7ff bf43 	b.w	b60d0 <network_listening>

000b624a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b624a:	2200      	movs	r2, #0
   b624c:	6840      	ldr	r0, [r0, #4]
   b624e:	4611      	mov	r1, r2
   b6250:	f7ff bf4e 	b.w	b60f0 <network_get_listen_timeout>

000b6254 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6254:	6840      	ldr	r0, [r0, #4]
   b6256:	2200      	movs	r2, #0
   b6258:	f7ff bf42 	b.w	b60e0 <network_set_listen_timeout>

000b625c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b625c:	6840      	ldr	r0, [r0, #4]
   b625e:	2200      	movs	r2, #0
   b6260:	f081 0101 	eor.w	r1, r1, #1
   b6264:	f7ff bf2c 	b.w	b60c0 <network_listen>

000b6268 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6268:	2300      	movs	r3, #0
   b626a:	6840      	ldr	r0, [r0, #4]
   b626c:	461a      	mov	r2, r3
   b626e:	4619      	mov	r1, r3
   b6270:	f7ff bf1e 	b.w	b60b0 <network_off>

000b6274 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6274:	2300      	movs	r3, #0
   b6276:	6840      	ldr	r0, [r0, #4]
   b6278:	461a      	mov	r2, r3
   b627a:	4619      	mov	r1, r3
   b627c:	f7ff bf10 	b.w	b60a0 <network_on>

000b6280 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6280:	2200      	movs	r2, #0
   b6282:	6840      	ldr	r0, [r0, #4]
   b6284:	4611      	mov	r1, r2
   b6286:	f7ff bf03 	b.w	b6090 <network_ready>

000b628a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b628a:	2200      	movs	r2, #0
   b628c:	6840      	ldr	r0, [r0, #4]
   b628e:	4611      	mov	r1, r2
   b6290:	f7ff beee 	b.w	b6070 <network_connecting>

000b6294 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6294:	6840      	ldr	r0, [r0, #4]
   b6296:	2200      	movs	r2, #0
   b6298:	2102      	movs	r1, #2
   b629a:	f7ff bef1 	b.w	b6080 <network_disconnect>

000b629e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b629e:	2300      	movs	r3, #0
   b62a0:	6840      	ldr	r0, [r0, #4]
   b62a2:	461a      	mov	r2, r3
   b62a4:	f7ff bedc 	b.w	b6060 <network_connect>

000b62a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b62a8:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b62aa:	2203      	movs	r2, #3
   b62ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b62ae:	4a02      	ldr	r2, [pc, #8]	; (b62b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b62b0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b62b2:	4770      	bx	lr
   b62b4:	2003e680 	.word	0x2003e680
   b62b8:	000ba5c0 	.word	0x000ba5c0

000b62bc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b62bc:	b510      	push	{r4, lr}
   b62be:	4604      	mov	r4, r0
   b62c0:	4608      	mov	r0, r1
{
    _spi = spi;
   b62c2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b62c4:	f7ff fe40 	bl	b5f48 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b62c8:	2300      	movs	r3, #0
   b62ca:	6063      	str	r3, [r4, #4]
}
   b62cc:	4620      	mov	r0, r4
   b62ce:	bd10      	pop	{r4, pc}

000b62d0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b62d0:	4b05      	ldr	r3, [pc, #20]	; (b62e8 <_GLOBAL__sub_I_System+0x18>)
   b62d2:	2202      	movs	r2, #2
   b62d4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b62d6:	4b05      	ldr	r3, [pc, #20]	; (b62ec <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b62d8:	4a05      	ldr	r2, [pc, #20]	; (b62f0 <_GLOBAL__sub_I_System+0x20>)
   b62da:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b62dc:	2000      	movs	r0, #0
   b62de:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b62e2:	f7ff be81 	b.w	b5fe8 <set_system_mode>
   b62e6:	bf00      	nop
   b62e8:	2003e694 	.word	0x2003e694
   b62ec:	2003e688 	.word	0x2003e688
   b62f0:	ffff0000 	.word	0xffff0000

000b62f4 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b62f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b62f8:	1e93      	subs	r3, r2, #2
{
   b62fa:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b62fc:	2b22      	cmp	r3, #34	; 0x22
   b62fe:	f04f 0300 	mov.w	r3, #0
{
   b6302:	460d      	mov	r5, r1
   b6304:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b6306:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b630a:	d927      	bls.n	b635c <ltoa+0x68>

      if (10 == base && N < 0L)
   b630c:	2800      	cmp	r0, #0
   b630e:	da2a      	bge.n	b6366 <ltoa+0x72>
      {
            *head++ = '-';
   b6310:	462e      	mov	r6, r5
   b6312:	232d      	movs	r3, #45	; 0x2d
   b6314:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b6318:	4240      	negs	r0, r0
   b631a:	240a      	movs	r4, #10
      *tail-- = '\0';
   b631c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b6320:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b6324:	4622      	mov	r2, r4
   b6326:	4601      	mov	r1, r0
   b6328:	a801      	add	r0, sp, #4
   b632a:	f001 ff3c 	bl	b81a6 <ldiv>
   b632e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b6330:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b6332:	2b09      	cmp	r3, #9
   b6334:	bfcc      	ite	gt
   b6336:	2237      	movgt	r2, #55	; 0x37
   b6338:	2230      	movle	r2, #48	; 0x30
   b633a:	fa52 f383 	uxtab	r3, r2, r3
   b633e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b6342:	f108 0801 	add.w	r8, r8, #1
   b6346:	2800      	cmp	r0, #0
   b6348:	d1ec      	bne.n	b6324 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b634a:	4642      	mov	r2, r8
   b634c:	1c79      	adds	r1, r7, #1
   b634e:	4630      	mov	r0, r6
   b6350:	f001 ff4d 	bl	b81ee <memcpy>
      return str;
}
   b6354:	4628      	mov	r0, r5
   b6356:	b00c      	add	sp, #48	; 0x30
   b6358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b635c:	2a0a      	cmp	r2, #10
   b635e:	d0d5      	beq.n	b630c <ltoa+0x18>
      if (uarg)
   b6360:	b118      	cbz	r0, b636a <ltoa+0x76>
   b6362:	462e      	mov	r6, r5
   b6364:	e7da      	b.n	b631c <ltoa+0x28>
   b6366:	240a      	movs	r4, #10
   b6368:	e7fa      	b.n	b6360 <ltoa+0x6c>
      else  *tail-- = '0';
   b636a:	2330      	movs	r3, #48	; 0x30
   b636c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b6370:	462e      	mov	r6, r5
   b6372:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b6376:	f04f 0802 	mov.w	r8, #2
   b637a:	e7e6      	b.n	b634a <ltoa+0x56>

000b637c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b637c:	b510      	push	{r4, lr}
   b637e:	4604      	mov	r4, r0
{
	free(buffer);
   b6380:	6800      	ldr	r0, [r0, #0]
   b6382:	f7ff ff05 	bl	b6190 <free>
}
   b6386:	4620      	mov	r0, r4
   b6388:	bd10      	pop	{r4, pc}

000b638a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b638a:	b510      	push	{r4, lr}
   b638c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b638e:	6800      	ldr	r0, [r0, #0]
   b6390:	b108      	cbz	r0, b6396 <_ZN6String10invalidateEv+0xc>
   b6392:	f7ff fefd 	bl	b6190 <free>
	buffer = NULL;
   b6396:	2300      	movs	r3, #0
	capacity = len = 0;
   b6398:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b639c:	6023      	str	r3, [r4, #0]
}
   b639e:	bd10      	pop	{r4, pc}

000b63a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b63a0:	b538      	push	{r3, r4, r5, lr}
   b63a2:	4604      	mov	r4, r0
   b63a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b63a6:	6800      	ldr	r0, [r0, #0]
   b63a8:	3101      	adds	r1, #1
   b63aa:	f7ff fef9 	bl	b61a0 <realloc>
	if (newbuffer) {
   b63ae:	b110      	cbz	r0, b63b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b63b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b63b4:	2001      	movs	r0, #1
	}
	return 0;
}
   b63b6:	bd38      	pop	{r3, r4, r5, pc}

000b63b8 <_ZN6String7reserveEj>:
{
   b63b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b63ba:	6803      	ldr	r3, [r0, #0]
{
   b63bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b63be:	b123      	cbz	r3, b63ca <_ZN6String7reserveEj+0x12>
   b63c0:	6843      	ldr	r3, [r0, #4]
   b63c2:	428b      	cmp	r3, r1
   b63c4:	d301      	bcc.n	b63ca <_ZN6String7reserveEj+0x12>
   b63c6:	2001      	movs	r0, #1
}
   b63c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b63ca:	4620      	mov	r0, r4
   b63cc:	f7ff ffe8 	bl	b63a0 <_ZN6String12changeBufferEj>
   b63d0:	2800      	cmp	r0, #0
   b63d2:	d0f9      	beq.n	b63c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b63d4:	68a3      	ldr	r3, [r4, #8]
   b63d6:	2b00      	cmp	r3, #0
   b63d8:	d1f5      	bne.n	b63c6 <_ZN6String7reserveEj+0xe>
   b63da:	6822      	ldr	r2, [r4, #0]
   b63dc:	7013      	strb	r3, [r2, #0]
   b63de:	e7f2      	b.n	b63c6 <_ZN6String7reserveEj+0xe>

000b63e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b63e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b63e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b63e4:	4611      	mov	r1, r2
   b63e6:	9201      	str	r2, [sp, #4]
{
   b63e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b63ea:	f7ff ffe5 	bl	b63b8 <_ZN6String7reserveEj>
   b63ee:	9a01      	ldr	r2, [sp, #4]
   b63f0:	b928      	cbnz	r0, b63fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b63f2:	4620      	mov	r0, r4
   b63f4:	f7ff ffc9 	bl	b638a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b63f8:	4620      	mov	r0, r4
   b63fa:	b003      	add	sp, #12
   b63fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b63fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6400:	4629      	mov	r1, r5
   b6402:	6820      	ldr	r0, [r4, #0]
   b6404:	f001 fef3 	bl	b81ee <memcpy>
	buffer[len] = 0;
   b6408:	6822      	ldr	r2, [r4, #0]
   b640a:	68a3      	ldr	r3, [r4, #8]
   b640c:	2100      	movs	r1, #0
   b640e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6410:	e7f2      	b.n	b63f8 <_ZN6String4copyEPKcj+0x18>

000b6412 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6412:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6414:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6416:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b641a:	4604      	mov	r4, r0
	len = 0;
   b641c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b641e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6420:	b141      	cbz	r1, b6434 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6422:	4608      	mov	r0, r1
   b6424:	9101      	str	r1, [sp, #4]
   b6426:	f7fe faed 	bl	b4a04 <strlen>
   b642a:	9901      	ldr	r1, [sp, #4]
   b642c:	4602      	mov	r2, r0
   b642e:	4620      	mov	r0, r4
   b6430:	f7ff ffd6 	bl	b63e0 <_ZN6String4copyEPKcj>
}
   b6434:	4620      	mov	r0, r4
   b6436:	b002      	add	sp, #8
   b6438:	bd10      	pop	{r4, pc}

000b643a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b643a:	4288      	cmp	r0, r1
{
   b643c:	b510      	push	{r4, lr}
   b643e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6440:	d005      	beq.n	b644e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6442:	680b      	ldr	r3, [r1, #0]
   b6444:	b12b      	cbz	r3, b6452 <_ZN6StringaSERKS_+0x18>
   b6446:	688a      	ldr	r2, [r1, #8]
   b6448:	4619      	mov	r1, r3
   b644a:	f7ff ffc9 	bl	b63e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b644e:	4620      	mov	r0, r4
   b6450:	bd10      	pop	{r4, pc}
	else invalidate();
   b6452:	f7ff ff9a 	bl	b638a <_ZN6String10invalidateEv>
   b6456:	e7fa      	b.n	b644e <_ZN6StringaSERKS_+0x14>

000b6458 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b6458:	b510      	push	{r4, lr}
	buffer = NULL;
   b645a:	2300      	movs	r3, #0
String::String(const String &value)
   b645c:	4604      	mov	r4, r0
	capacity = 0;
   b645e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6462:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6464:	7303      	strb	r3, [r0, #12]
	*this = value;
   b6466:	f7ff ffe8 	bl	b643a <_ZN6StringaSERKS_>
}
   b646a:	4620      	mov	r0, r4
   b646c:	bd10      	pop	{r4, pc}

000b646e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b646e:	b513      	push	{r0, r1, r4, lr}
   b6470:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6472:	b159      	cbz	r1, b648c <_ZN6StringaSEPKc+0x1e>
   b6474:	4608      	mov	r0, r1
   b6476:	9101      	str	r1, [sp, #4]
   b6478:	f7fe fac4 	bl	b4a04 <strlen>
   b647c:	9901      	ldr	r1, [sp, #4]
   b647e:	4602      	mov	r2, r0
   b6480:	4620      	mov	r0, r4
   b6482:	f7ff ffad 	bl	b63e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6486:	4620      	mov	r0, r4
   b6488:	b002      	add	sp, #8
   b648a:	bd10      	pop	{r4, pc}
	else invalidate();
   b648c:	f7ff ff7d 	bl	b638a <_ZN6String10invalidateEv>
   b6490:	e7f9      	b.n	b6486 <_ZN6StringaSEPKc+0x18>

000b6492 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b6492:	b510      	push	{r4, lr}
   b6494:	4604      	mov	r4, r0
   b6496:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b6498:	2300      	movs	r3, #0
	capacity = 0;
   b649a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b649e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b64a0:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b64a2:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b64a4:	a901      	add	r1, sp, #4
   b64a6:	f7ff ff25 	bl	b62f4 <ltoa>
	*this = buf;
   b64aa:	a901      	add	r1, sp, #4
   b64ac:	4620      	mov	r0, r4
   b64ae:	f7ff ffde 	bl	b646e <_ZN6StringaSEPKc>
}
   b64b2:	4620      	mov	r0, r4
   b64b4:	b00a      	add	sp, #40	; 0x28
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b64b8:	b570      	push	{r4, r5, r6, lr}
   b64ba:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b64bc:	460e      	mov	r6, r1
   b64be:	b909      	cbnz	r1, b64c4 <_ZN6String6concatEPKcj+0xc>
   b64c0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b64c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b64c4:	b16a      	cbz	r2, b64e2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b64c6:	6884      	ldr	r4, [r0, #8]
   b64c8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b64ca:	4621      	mov	r1, r4
   b64cc:	f7ff ff74 	bl	b63b8 <_ZN6String7reserveEj>
   b64d0:	2800      	cmp	r0, #0
   b64d2:	d0f5      	beq.n	b64c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b64d4:	6828      	ldr	r0, [r5, #0]
   b64d6:	68ab      	ldr	r3, [r5, #8]
   b64d8:	4631      	mov	r1, r6
   b64da:	4418      	add	r0, r3
   b64dc:	f001 fef5 	bl	b82ca <strcpy>
	len = newlen;
   b64e0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b64e2:	2001      	movs	r0, #1
   b64e4:	e7ed      	b.n	b64c2 <_ZN6String6concatEPKcj+0xa>

000b64e6 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b64e6:	688a      	ldr	r2, [r1, #8]
   b64e8:	6809      	ldr	r1, [r1, #0]
   b64ea:	f7ff bfe5 	b.w	b64b8 <_ZN6String6concatEPKcj>

000b64ee <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b64ee:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b64f0:	688a      	ldr	r2, [r1, #8]
   b64f2:	6809      	ldr	r1, [r1, #0]
{
   b64f4:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b64f6:	f7ff ffdf 	bl	b64b8 <_ZN6String6concatEPKcj>
   b64fa:	b910      	cbnz	r0, b6502 <_ZplRK15StringSumHelperRK6String+0x14>
   b64fc:	4620      	mov	r0, r4
   b64fe:	f7ff ff44 	bl	b638a <_ZN6String10invalidateEv>
	return a;
}
   b6502:	4620      	mov	r0, r4
   b6504:	bd10      	pop	{r4, pc}
	...

000b6508 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6508:	b40e      	push	{r1, r2, r3}
   b650a:	b570      	push	{r4, r5, r6, lr}
   b650c:	b087      	sub	sp, #28
   b650e:	ad0b      	add	r5, sp, #44	; 0x2c
   b6510:	4604      	mov	r4, r0
   b6512:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6516:	9201      	str	r2, [sp, #4]
   b6518:	462b      	mov	r3, r5
   b651a:	2105      	movs	r1, #5
   b651c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b651e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6520:	f7ff fe56 	bl	b61d0 <vsnprintf>
    va_end(marker);

    String result;
   b6524:	490b      	ldr	r1, [pc, #44]	; (b6554 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6526:	4606      	mov	r6, r0
    String result;
   b6528:	4620      	mov	r0, r4
   b652a:	f7ff ff72 	bl	b6412 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b652e:	4631      	mov	r1, r6
   b6530:	4620      	mov	r0, r4
   b6532:	f7ff ff41 	bl	b63b8 <_ZN6String7reserveEj>
    if (result.buffer) {
   b6536:	6820      	ldr	r0, [r4, #0]
   b6538:	b130      	cbz	r0, b6548 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b653a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b653c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b653e:	462b      	mov	r3, r5
   b6540:	1c71      	adds	r1, r6, #1
   b6542:	f7ff fe45 	bl	b61d0 <vsnprintf>
        va_end(marker);
        result.len = n;
   b6546:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6548:	4620      	mov	r0, r4
   b654a:	b007      	add	sp, #28
   b654c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6550:	b003      	add	sp, #12
   b6552:	4770      	bx	lr
   b6554:	000ba417 	.word	0x000ba417

000b6558 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b6558:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b655a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b655c:	4604      	mov	r4, r0
      if (_M_manager)
   b655e:	b113      	cbz	r3, b6566 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6560:	2203      	movs	r2, #3
   b6562:	4601      	mov	r1, r0
   b6564:	4798      	blx	r3
    }
   b6566:	4620      	mov	r0, r4
   b6568:	bd10      	pop	{r4, pc}

000b656a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b656a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b656c:	6843      	ldr	r3, [r0, #4]
   b656e:	3b01      	subs	r3, #1
    {
   b6570:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b6572:	6043      	str	r3, [r0, #4]
   b6574:	b963      	cbnz	r3, b6590 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b6576:	6803      	ldr	r3, [r0, #0]
   b6578:	689b      	ldr	r3, [r3, #8]
   b657a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b657c:	68a3      	ldr	r3, [r4, #8]
   b657e:	3b01      	subs	r3, #1
   b6580:	60a3      	str	r3, [r4, #8]
   b6582:	b92b      	cbnz	r3, b6590 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6584:	6823      	ldr	r3, [r4, #0]
   b6586:	4620      	mov	r0, r4
   b6588:	68db      	ldr	r3, [r3, #12]
    }
   b658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b658e:	4718      	bx	r3
    }
   b6590:	bd10      	pop	{r4, pc}

000b6592 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6592:	b513      	push	{r0, r1, r4, lr}
   b6594:	460b      	mov	r3, r1
   b6596:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6598:	e9d0 0100 	ldrd	r0, r1, [r0]
   b659c:	466c      	mov	r4, sp
   b659e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b65a2:	e893 0003 	ldmia.w	r3, {r0, r1}
   b65a6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b65aa:	e894 0003 	ldmia.w	r4, {r0, r1}
   b65ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b65b2:	b002      	add	sp, #8
   b65b4:	bd10      	pop	{r4, pc}
	...

000b65b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b65b8:	4802      	ldr	r0, [pc, #8]	; (b65c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b65ba:	2300      	movs	r3, #0
   b65bc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b65be:	f7ff bbfb 	b.w	b5db8 <os_mutex_recursive_create>
   b65c2:	bf00      	nop
   b65c4:	2003e698 	.word	0x2003e698

000b65c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b65c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65ca:	4606      	mov	r6, r0
   b65cc:	460d      	mov	r5, r1
  size_t n = 0;
   b65ce:	188f      	adds	r7, r1, r2
   b65d0:	2400      	movs	r4, #0
  while (size--) {
   b65d2:	42bd      	cmp	r5, r7
   b65d4:	d00c      	beq.n	b65f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b65d6:	6833      	ldr	r3, [r6, #0]
   b65d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b65dc:	689b      	ldr	r3, [r3, #8]
   b65de:	4630      	mov	r0, r6
   b65e0:	4798      	blx	r3
     if (chunk>=0)
   b65e2:	1e03      	subs	r3, r0, #0
   b65e4:	db01      	blt.n	b65ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b65e6:	441c      	add	r4, r3
  while (size--) {
   b65e8:	e7f3      	b.n	b65d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b65ea:	2c00      	cmp	r4, #0
   b65ec:	bf08      	it	eq
   b65ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b65f0:	4620      	mov	r0, r4
   b65f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65f4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b65f4:	b513      	push	{r0, r1, r4, lr}
   b65f6:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b65f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b65fa:	b159      	cbz	r1, b6614 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b65fc:	9101      	str	r1, [sp, #4]
   b65fe:	f7fe fa01 	bl	b4a04 <strlen>
   b6602:	6823      	ldr	r3, [r4, #0]
   b6604:	9901      	ldr	r1, [sp, #4]
   b6606:	68db      	ldr	r3, [r3, #12]
   b6608:	4602      	mov	r2, r0
   b660a:	4620      	mov	r0, r4
    }
   b660c:	b002      	add	sp, #8
   b660e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6612:	4718      	bx	r3
    }
   b6614:	b002      	add	sp, #8
   b6616:	bd10      	pop	{r4, pc}

000b6618 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6618:	b508      	push	{r3, lr}
  return write(str);
   b661a:	f7ff ffeb 	bl	b65f4 <_ZN5Print5writeEPKc>
}
   b661e:	bd08      	pop	{r3, pc}

000b6620 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6620:	6803      	ldr	r3, [r0, #0]
   b6622:	689b      	ldr	r3, [r3, #8]
   b6624:	4718      	bx	r3

000b6626 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6626:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6628:	210d      	movs	r1, #13
{
   b662a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b662c:	f7ff fff8 	bl	b6620 <_ZN5Print5printEc>
  n += print('\n');
   b6630:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6632:	4604      	mov	r4, r0
  n += print('\n');
   b6634:	4628      	mov	r0, r5
   b6636:	f7ff fff3 	bl	b6620 <_ZN5Print5printEc>
  return n;
}
   b663a:	4420      	add	r0, r4
   b663c:	bd38      	pop	{r3, r4, r5, pc}

000b663e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b663e:	b538      	push	{r3, r4, r5, lr}
   b6640:	4605      	mov	r5, r0
  return write(str);
   b6642:	f7ff ffd7 	bl	b65f4 <_ZN5Print5writeEPKc>
   b6646:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6648:	4628      	mov	r0, r5
   b664a:	f7ff ffec 	bl	b6626 <_ZN5Print7printlnEv>
  return n;
}
   b664e:	4420      	add	r0, r4
   b6650:	bd38      	pop	{r3, r4, r5, pc}

000b6652 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6652:	b530      	push	{r4, r5, lr}
   b6654:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6656:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6658:	2a01      	cmp	r2, #1
  *str = '\0';
   b665a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b665e:	bf98      	it	ls
   b6660:	220a      	movls	r2, #10
   b6662:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6664:	460d      	mov	r5, r1
   b6666:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b666a:	fb01 5312 	mls	r3, r1, r2, r5
   b666e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6672:	2b09      	cmp	r3, #9
   b6674:	bf94      	ite	ls
   b6676:	3330      	addls	r3, #48	; 0x30
   b6678:	3337      	addhi	r3, #55	; 0x37
   b667a:	b2db      	uxtb	r3, r3
  } while(n);
   b667c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b667e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6682:	d9ef      	bls.n	b6664 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6684:	4621      	mov	r1, r4
   b6686:	f7ff ffb5 	bl	b65f4 <_ZN5Print5writeEPKc>
}
   b668a:	b00b      	add	sp, #44	; 0x2c
   b668c:	bd30      	pop	{r4, r5, pc}

000b668e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6692:	b086      	sub	sp, #24
   b6694:	af00      	add	r7, sp, #0
   b6696:	4605      	mov	r5, r0
   b6698:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b669a:	1d38      	adds	r0, r7, #4
   b669c:	2114      	movs	r1, #20
{
   b669e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b66a0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b66a2:	f7ff fd95 	bl	b61d0 <vsnprintf>

    if (n<bufsize)
   b66a6:	2813      	cmp	r0, #19
   b66a8:	d80e      	bhi.n	b66c8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b66aa:	1d39      	adds	r1, r7, #4
   b66ac:	4628      	mov	r0, r5
   b66ae:	f7ff ffa1 	bl	b65f4 <_ZN5Print5writeEPKc>
   b66b2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b66b4:	b11e      	cbz	r6, b66be <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b66b6:	4628      	mov	r0, r5
   b66b8:	f7ff ffb5 	bl	b6626 <_ZN5Print7printlnEv>
   b66bc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b66be:	4620      	mov	r0, r4
   b66c0:	3718      	adds	r7, #24
   b66c2:	46bd      	mov	sp, r7
   b66c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b66c8:	f100 0308 	add.w	r3, r0, #8
   b66cc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b66d0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b66d2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b66d6:	4622      	mov	r2, r4
   b66d8:	1c41      	adds	r1, r0, #1
   b66da:	683b      	ldr	r3, [r7, #0]
   b66dc:	4668      	mov	r0, sp
   b66de:	f7ff fd77 	bl	b61d0 <vsnprintf>
  return write(str);
   b66e2:	4669      	mov	r1, sp
   b66e4:	4628      	mov	r0, r5
   b66e6:	f7ff ff85 	bl	b65f4 <_ZN5Print5writeEPKc>
   b66ea:	4604      	mov	r4, r0
   b66ec:	46c5      	mov	sp, r8
   b66ee:	e7e1      	b.n	b66b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b66f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b66f0:	4b01      	ldr	r3, [pc, #4]	; (b66f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b66f2:	4a02      	ldr	r2, [pc, #8]	; (b66fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b66f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b66f6:	4770      	bx	lr
   b66f8:	2003e69c 	.word	0x2003e69c
   b66fc:	000ba5fc 	.word	0x000ba5fc

000b6700 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b6700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b6704:	4a15      	ldr	r2, [pc, #84]	; (b675c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b6706:	f8df 8060 	ldr.w	r8, [pc, #96]	; b6768 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b670a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b670e:	1980      	adds	r0, r0, r6
   b6710:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b6714:	4b12      	ldr	r3, [pc, #72]	; (b6760 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b6716:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b671a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b671e:	1986      	adds	r6, r0, r6
   b6720:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b6724:	42bb      	cmp	r3, r7
   b6726:	bf08      	it	eq
   b6728:	42b2      	cmpeq	r2, r6
{
   b672a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b672c:	d013      	beq.n	b6756 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b672e:	a903      	add	r1, sp, #12
   b6730:	4668      	mov	r0, sp
   b6732:	e9cd 6700 	strd	r6, r7, [sp]
   b6736:	f7ff fd7b 	bl	b6230 <localtime_r>
	calendar_time.tm_year += 1900;
   b673a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b673c:	4d09      	ldr	r5, [pc, #36]	; (b6764 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b673e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6742:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b6744:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b674a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b674c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b674e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b6752:	6823      	ldr	r3, [r4, #0]
   b6754:	602b      	str	r3, [r5, #0]
    }
}
   b6756:	b00c      	add	sp, #48	; 0x30
   b6758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b675c:	2003e6d0 	.word	0x2003e6d0
   b6760:	2003e6c8 	.word	0x2003e6c8
   b6764:	2003e6a4 	.word	0x2003e6a4
   b6768:	2003e6d8 	.word	0x2003e6d8

000b676c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   b676c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   b676e:	2000      	movs	r0, #0
   b6770:	f7ff fcf6 	bl	b6160 <spark_sync_time_pending>
   b6774:	b128      	cbz	r0, b6782 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6776:	f7ff fcdb 	bl	b6130 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b677a:	f080 0001 	eor.w	r0, r0, #1
   b677e:	b2c0      	uxtb	r0, r0
    }
   b6780:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b6782:	2001      	movs	r0, #1
   b6784:	e7fc      	b.n	b6780 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b6788 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b6788:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b678a:	f7ff ffb9 	bl	b6700 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <_ZN9TimeClass5monthEx+0x10>)
   b6790:	6918      	ldr	r0, [r3, #16]
}
   b6792:	3001      	adds	r0, #1
   b6794:	bd08      	pop	{r3, pc}
   b6796:	bf00      	nop
   b6798:	2003e6a4 	.word	0x2003e6a4

000b679c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b679c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b679e:	2000      	movs	r0, #0
   b67a0:	f7ff fae2 	bl	b5d68 <hal_rtc_time_is_valid>
    if (rtcstate)
   b67a4:	4604      	mov	r4, r0
   b67a6:	b9a0      	cbnz	r0, b67d2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b67a8:	f7ff fc16 	bl	b5fd8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b67ac:	2801      	cmp	r0, #1
   b67ae:	d110      	bne.n	b67d2 <_ZN9TimeClass7isValidEv+0x36>
   b67b0:	4620      	mov	r0, r4
   b67b2:	f7ff fc39 	bl	b6028 <system_thread_get_state>
   b67b6:	b960      	cbnz	r0, b67d2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b67b8:	f7ff ffd8 	bl	b676c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b67bc:	b910      	cbnz	r0, b67c4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b67be:	f7ff fcaf 	bl	b6120 <spark_process>
        while (_while() && !_condition()) {
   b67c2:	e7f9      	b.n	b67b8 <_ZN9TimeClass7isValidEv+0x1c>
   b67c4:	f7ff ffd2 	bl	b676c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b67c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b67cc:	2000      	movs	r0, #0
   b67ce:	f7ff bacb 	b.w	b5d68 <hal_rtc_time_is_valid>
}
   b67d2:	4620      	mov	r0, r4
   b67d4:	bd10      	pop	{r4, pc}

000b67d6 <_ZN9TimeClass3nowEv>:
{
   b67d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b67d8:	f7ff ffe0 	bl	b679c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b67dc:	2210      	movs	r2, #16
   b67de:	2100      	movs	r1, #0
   b67e0:	4668      	mov	r0, sp
   b67e2:	f001 fd2c 	bl	b823e <memset>
    hal_rtc_get_time(&tv, nullptr);
   b67e6:	2100      	movs	r1, #0
   b67e8:	4668      	mov	r0, sp
   b67ea:	f7ff fac5 	bl	b5d78 <hal_rtc_get_time>
}
   b67ee:	9800      	ldr	r0, [sp, #0]
   b67f0:	b005      	add	sp, #20
   b67f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b67f8 <_ZN9TimeClass4hourEv>:
{
   b67f8:	b508      	push	{r3, lr}
	return hour(now());
   b67fa:	f7ff ffec 	bl	b67d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b67fe:	17c1      	asrs	r1, r0, #31
   b6800:	f7ff ff7e 	bl	b6700 <_ZL22Refresh_UnixTime_Cachex>
}
   b6804:	4b01      	ldr	r3, [pc, #4]	; (b680c <_ZN9TimeClass4hourEv+0x14>)
   b6806:	6898      	ldr	r0, [r3, #8]
   b6808:	bd08      	pop	{r3, pc}
   b680a:	bf00      	nop
   b680c:	2003e6a4 	.word	0x2003e6a4

000b6810 <_ZN9TimeClass6minuteEv>:
{
   b6810:	b508      	push	{r3, lr}
	return minute(now());
   b6812:	f7ff ffe0 	bl	b67d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6816:	17c1      	asrs	r1, r0, #31
   b6818:	f7ff ff72 	bl	b6700 <_ZL22Refresh_UnixTime_Cachex>
}
   b681c:	4b01      	ldr	r3, [pc, #4]	; (b6824 <_ZN9TimeClass6minuteEv+0x14>)
   b681e:	6858      	ldr	r0, [r3, #4]
   b6820:	bd08      	pop	{r3, pc}
   b6822:	bf00      	nop
   b6824:	2003e6a4 	.word	0x2003e6a4

000b6828 <_ZN9TimeClass3dayEv>:
{
   b6828:	b508      	push	{r3, lr}
	return day(now());
   b682a:	f7ff ffd4 	bl	b67d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b682e:	17c1      	asrs	r1, r0, #31
   b6830:	f7ff ff66 	bl	b6700 <_ZL22Refresh_UnixTime_Cachex>
}
   b6834:	4b01      	ldr	r3, [pc, #4]	; (b683c <_ZN9TimeClass3dayEv+0x14>)
   b6836:	68d8      	ldr	r0, [r3, #12]
   b6838:	bd08      	pop	{r3, pc}
   b683a:	bf00      	nop
   b683c:	2003e6a4 	.word	0x2003e6a4

000b6840 <_ZN9TimeClass5monthEv>:
{
   b6840:	b508      	push	{r3, lr}
	return month(now());
   b6842:	f7ff ffc8 	bl	b67d6 <_ZN9TimeClass3nowEv>
}
   b6846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b684a:	17c1      	asrs	r1, r0, #31
   b684c:	f7ff bf9c 	b.w	b6788 <_ZN9TimeClass5monthEx>

000b6850 <_ZN9TimeClass4yearEv>:
{
   b6850:	b508      	push	{r3, lr}
	return year(now());
   b6852:	f7ff ffc0 	bl	b67d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b6856:	17c1      	asrs	r1, r0, #31
   b6858:	f7ff ff52 	bl	b6700 <_ZL22Refresh_UnixTime_Cachex>
}
   b685c:	4b01      	ldr	r3, [pc, #4]	; (b6864 <_ZN9TimeClass4yearEv+0x14>)
   b685e:	6958      	ldr	r0, [r3, #20]
   b6860:	bd08      	pop	{r3, pc}
   b6862:	bf00      	nop
   b6864:	2003e6a4 	.word	0x2003e6a4

000b6868 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6868:	4b02      	ldr	r3, [pc, #8]	; (b6874 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b686a:	681a      	ldr	r2, [r3, #0]
   b686c:	4b02      	ldr	r3, [pc, #8]	; (b6878 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b686e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6870:	4770      	bx	lr
   b6872:	bf00      	nop
   b6874:	2003cd00 	.word	0x2003cd00
   b6878:	2003e6a0 	.word	0x2003e6a0

000b687c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b687c:	2100      	movs	r1, #0
   b687e:	f7ff bbbb 	b.w	b5ff8 <system_delay_ms>
	...

000b6884 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6884:	b510      	push	{r4, lr}
   b6886:	4b04      	ldr	r3, [pc, #16]	; (b6898 <_ZN9TCPClientD1Ev+0x14>)
   b6888:	6003      	str	r3, [r0, #0]
   b688a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b688c:	6980      	ldr	r0, [r0, #24]
   b688e:	b108      	cbz	r0, b6894 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6890:	f7ff fe6b 	bl	b656a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b6894:	4620      	mov	r0, r4
   b6896:	bd10      	pop	{r4, pc}
   b6898:	000ba710 	.word	0x000ba710

000b689c <_ZN9TCPClientD0Ev>:
   b689c:	b510      	push	{r4, lr}
   b689e:	4604      	mov	r4, r0
   b68a0:	f7ff fff0 	bl	b6884 <_ZN9TCPClientD1Ev>
   b68a4:	4620      	mov	r0, r4
   b68a6:	211c      	movs	r1, #28
   b68a8:	f7fe f90f 	bl	b4aca <_ZdlPvj>
   b68ac:	4620      	mov	r0, r4
   b68ae:	bd10      	pop	{r4, pc}

000b68b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b68b0:	4b01      	ldr	r3, [pc, #4]	; (b68b8 <_GLOBAL__sub_I_RGB+0x8>)
   b68b2:	2200      	movs	r2, #0
   b68b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b68b6:	4770      	bx	lr
   b68b8:	2003e6e0 	.word	0x2003e6e0

000b68bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b68bc:	4b01      	ldr	r3, [pc, #4]	; (b68c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b68be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b68c0:	4770      	bx	lr
   b68c2:	bf00      	nop
   b68c4:	2003cd04 	.word	0x2003cd04

000b68c8 <serialEventRun>:
{
   b68c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b68ca:	4b0b      	ldr	r3, [pc, #44]	; (b68f8 <serialEventRun+0x30>)
   b68cc:	b143      	cbz	r3, b68e0 <serialEventRun+0x18>
   b68ce:	f000 fc11 	bl	b70f4 <_Z16_fetch_usbserialv>
   b68d2:	6803      	ldr	r3, [r0, #0]
   b68d4:	691b      	ldr	r3, [r3, #16]
   b68d6:	4798      	blx	r3
   b68d8:	2800      	cmp	r0, #0
   b68da:	dd01      	ble.n	b68e0 <serialEventRun+0x18>
        serialEvent();
   b68dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b68e0:	4b06      	ldr	r3, [pc, #24]	; (b68fc <serialEventRun+0x34>)
   b68e2:	b143      	cbz	r3, b68f6 <serialEventRun+0x2e>
   b68e4:	f001 f922 	bl	b7b2c <_Z22__fetch_global_Serial1v>
   b68e8:	6803      	ldr	r3, [r0, #0]
   b68ea:	691b      	ldr	r3, [r3, #16]
   b68ec:	4798      	blx	r3
   b68ee:	2800      	cmp	r0, #0
   b68f0:	dd01      	ble.n	b68f6 <serialEventRun+0x2e>
        serialEvent1();
   b68f2:	f3af 8000 	nop.w
}
   b68f6:	bd08      	pop	{r3, pc}
	...

000b6900 <_post_loop>:
{
   b6900:	b508      	push	{r3, lr}
	serialEventRun();
   b6902:	f7ff ffe1 	bl	b68c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6906:	f7ff fa27 	bl	b5d58 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b690a:	4b01      	ldr	r3, [pc, #4]	; (b6910 <_post_loop+0x10>)
   b690c:	6018      	str	r0, [r3, #0]
}
   b690e:	bd08      	pop	{r3, pc}
   b6910:	2003e744 	.word	0x2003e744

000b6914 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6914:	4805      	ldr	r0, [pc, #20]	; (b692c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6916:	4a06      	ldr	r2, [pc, #24]	; (b6930 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6918:	4906      	ldr	r1, [pc, #24]	; (b6934 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b691a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b691c:	1a12      	subs	r2, r2, r0
   b691e:	f001 fc66 	bl	b81ee <memcpy>
    __backup_sram_signature = signature;
   b6922:	4b05      	ldr	r3, [pc, #20]	; (b6938 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6924:	4a05      	ldr	r2, [pc, #20]	; (b693c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6926:	601a      	str	r2, [r3, #0]
}
   b6928:	bd08      	pop	{r3, pc}
   b692a:	bf00      	nop
   b692c:	2003f400 	.word	0x2003f400
   b6930:	2003f404 	.word	0x2003f404
   b6934:	000bb018 	.word	0x000bb018
   b6938:	2003f400 	.word	0x2003f400
   b693c:	9a271c1e 	.word	0x9a271c1e

000b6940 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6940:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6942:	2300      	movs	r3, #0
   b6944:	9300      	str	r3, [sp, #0]
   b6946:	461a      	mov	r2, r3
   b6948:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b694c:	f7ff fb7e 	bl	b604c <system_ctrl_set_result>
}
   b6950:	b003      	add	sp, #12
   b6952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6958 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6958:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b695a:	8843      	ldrh	r3, [r0, #2]
   b695c:	2b0a      	cmp	r3, #10
   b695e:	d008      	beq.n	b6972 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6960:	2b50      	cmp	r3, #80	; 0x50
   b6962:	d10b      	bne.n	b697c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6964:	4b09      	ldr	r3, [pc, #36]	; (b698c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6966:	681b      	ldr	r3, [r3, #0]
   b6968:	b14b      	cbz	r3, b697e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b696a:	b003      	add	sp, #12
   b696c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6970:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6972:	f7ff ffe5 	bl	b6940 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6976:	b003      	add	sp, #12
   b6978:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b697c:	2300      	movs	r3, #0
   b697e:	9300      	str	r3, [sp, #0]
   b6980:	461a      	mov	r2, r3
   b6982:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6986:	f7ff fb61 	bl	b604c <system_ctrl_set_result>
}
   b698a:	e7f4      	b.n	b6976 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b698c:	2003e6f4 	.word	0x2003e6f4

000b6990 <module_user_init_hook>:
{
   b6990:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6992:	4812      	ldr	r0, [pc, #72]	; (b69dc <module_user_init_hook+0x4c>)
   b6994:	2100      	movs	r1, #0
   b6996:	f7ff fc43 	bl	b6220 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b699a:	4b11      	ldr	r3, [pc, #68]	; (b69e0 <module_user_init_hook+0x50>)
   b699c:	681a      	ldr	r2, [r3, #0]
   b699e:	4b11      	ldr	r3, [pc, #68]	; (b69e4 <module_user_init_hook+0x54>)
   b69a0:	429a      	cmp	r2, r3
   b69a2:	4b11      	ldr	r3, [pc, #68]	; (b69e8 <module_user_init_hook+0x58>)
   b69a4:	bf0c      	ite	eq
   b69a6:	2201      	moveq	r2, #1
   b69a8:	2200      	movne	r2, #0
   b69aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b69ac:	d001      	beq.n	b69b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b69ae:	f7ff ffb1 	bl	b6914 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b69b2:	f7ff f9c9 	bl	b5d48 <HAL_RNG_GetRandomNumber>
   b69b6:	4604      	mov	r4, r0
    srand(seed);
   b69b8:	f001 fc4a 	bl	b8250 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b69bc:	4b0b      	ldr	r3, [pc, #44]	; (b69ec <module_user_init_hook+0x5c>)
   b69be:	b113      	cbz	r3, b69c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b69c0:	4620      	mov	r0, r4
   b69c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b69c6:	2100      	movs	r1, #0
   b69c8:	4808      	ldr	r0, [pc, #32]	; (b69ec <module_user_init_hook+0x5c>)
   b69ca:	f7ff fbd1 	bl	b6170 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b69ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b69d2:	4807      	ldr	r0, [pc, #28]	; (b69f0 <module_user_init_hook+0x60>)
   b69d4:	2100      	movs	r1, #0
   b69d6:	f7ff bb2f 	b.w	b6038 <system_ctrl_set_app_request_handler>
   b69da:	bf00      	nop
   b69dc:	000b68bd 	.word	0x000b68bd
   b69e0:	2003f400 	.word	0x2003f400
   b69e4:	9a271c1e 	.word	0x9a271c1e
   b69e8:	2003e6f0 	.word	0x2003e6f0
   b69ec:	00000000 	.word	0x00000000
   b69f0:	000b6959 	.word	0x000b6959

000b69f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b69f4:	4770      	bx	lr

000b69f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b69f6:	2000      	movs	r0, #0
   b69f8:	4770      	bx	lr

000b69fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b69fa:	b510      	push	{r4, lr}
   b69fc:	2110      	movs	r1, #16
   b69fe:	4604      	mov	r4, r0
   b6a00:	f7fe f863 	bl	b4aca <_ZdlPvj>
   b6a04:	4620      	mov	r0, r4
   b6a06:	bd10      	pop	{r4, pc}

000b6a08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6a08:	b508      	push	{r3, lr}
      { delete this; }
   b6a0a:	f7ff fff6 	bl	b69fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6a0e:	bd08      	pop	{r3, pc}

000b6a10 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6a10:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6a12:	2200      	movs	r2, #0
   b6a14:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6a18:	6002      	str	r2, [r0, #0]
   b6a1a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a1c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a1e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6a20:	680c      	ldr	r4, [r1, #0]
   b6a22:	8085      	strh	r5, [r0, #4]
   b6a24:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6a26:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6a28:	bd30      	pop	{r4, r5, pc}

000b6a2a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6a2a:	b510      	push	{r4, lr}
   b6a2c:	4604      	mov	r4, r0
    free((void*)msg_);
   b6a2e:	6800      	ldr	r0, [r0, #0]
   b6a30:	f7ff fbae 	bl	b6190 <free>
}
   b6a34:	4620      	mov	r0, r4
   b6a36:	bd10      	pop	{r4, pc}

000b6a38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6a38:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6a3a:	68c4      	ldr	r4, [r0, #12]
   b6a3c:	b1f4      	cbz	r4, b6a7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6a3e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6a40:	2b02      	cmp	r3, #2
   b6a42:	d103      	bne.n	b6a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6a44:	f104 000c 	add.w	r0, r4, #12
   b6a48:	f7ff ffef 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6a4c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6a4e:	b135      	cbz	r5, b6a5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b6a50:	4628      	mov	r0, r5
   b6a52:	f7ff fd81 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
   b6a56:	2110      	movs	r1, #16
   b6a58:	4628      	mov	r0, r5
   b6a5a:	f7fe f836 	bl	b4aca <_ZdlPvj>
   b6a5e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6a60:	b135      	cbz	r5, b6a70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6a62:	4628      	mov	r0, r5
   b6a64:	f7ff fd78 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
   b6a68:	2110      	movs	r1, #16
   b6a6a:	4628      	mov	r0, r5
   b6a6c:	f7fe f82d 	bl	b4aca <_ZdlPvj>
   b6a70:	4620      	mov	r0, r4
   b6a72:	2114      	movs	r1, #20
   b6a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6a78:	f7fe b827 	b.w	b4aca <_ZdlPvj>
   b6a7c:	bd38      	pop	{r3, r4, r5, pc}

000b6a7e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6a7e:	680b      	ldr	r3, [r1, #0]
   b6a80:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6a82:	684b      	ldr	r3, [r1, #4]
   b6a84:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6a86:	b113      	cbz	r3, b6a8e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6a88:	685a      	ldr	r2, [r3, #4]
   b6a8a:	3201      	adds	r2, #1
   b6a8c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6a8e:	4770      	bx	lr

000b6a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a92:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6a94:	4668      	mov	r0, sp
   b6a96:	460d      	mov	r5, r1
   b6a98:	f7ff fff1 	bl	b6a7e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a9c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a9e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6aa0:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6aa2:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6aa4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6aa6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6aa8:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6aaa:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6aac:	f7fe fac8 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6ab0:	b135      	cbz	r5, b6ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6ab2:	1d28      	adds	r0, r5, #4
   b6ab4:	f7fe fac4 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6ab8:	2108      	movs	r1, #8
   b6aba:	4628      	mov	r0, r5
   b6abc:	f7fe f805 	bl	b4aca <_ZdlPvj>
        return p;
    }
   b6ac0:	4620      	mov	r0, r4
   b6ac2:	b003      	add	sp, #12
   b6ac4:	bd30      	pop	{r4, r5, pc}

000b6ac6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6ac6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6ac8:	b510      	push	{r4, lr}
      if (_M_empty())
   b6aca:	b90a      	cbnz	r2, b6ad0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6acc:	f001 f8b5 	bl	b7c3a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b6ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6ad4:	68c3      	ldr	r3, [r0, #12]
   b6ad6:	4718      	bx	r3

000b6ad8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6ad8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6ada:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6adc:	f100 0110 	add.w	r1, r0, #16
   b6ae0:	f7ff fff1 	bl	b6ac6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6ae4:	bd08      	pop	{r3, pc}

000b6ae6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6ae6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6ae8:	b510      	push	{r4, lr}
      if (_M_empty())
   b6aea:	b90a      	cbnz	r2, b6af0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6aec:	f001 f8a5 	bl	b7c3a <_ZSt25__throw_bad_function_callv>
    }
   b6af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6af4:	68c3      	ldr	r3, [r0, #12]
   b6af6:	4718      	bx	r3

000b6af8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6af8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6afa:	6800      	ldr	r0, [r0, #0]
   b6afc:	f100 0110 	add.w	r1, r0, #16
   b6b00:	f7ff fff1 	bl	b6ae6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6b04:	bd08      	pop	{r3, pc}
	...

000b6b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6b08:	b538      	push	{r3, r4, r5, lr}
   b6b0a:	2300      	movs	r3, #0
   b6b0c:	4604      	mov	r4, r0
   b6b0e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6b10:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6b12:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6b14:	f7fd ffd1 	bl	b4aba <_Znwj>
   b6b18:	b128      	cbz	r0, b6b26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b1a:	2301      	movs	r3, #1
   b6b1c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6b20:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6b22:	6003      	str	r3, [r0, #0]
   b6b24:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6b26:	6020      	str	r0, [r4, #0]
	}
   b6b28:	4620      	mov	r0, r4
   b6b2a:	bd38      	pop	{r3, r4, r5, pc}
   b6b2c:	000ba624 	.word	0x000ba624

000b6b30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6b30:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b32:	2300      	movs	r3, #0
   b6b34:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6b36:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6b38:	4604      	mov	r4, r0
   b6b3a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6b3c:	b12b      	cbz	r3, b6b4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6b3e:	2202      	movs	r2, #2
   b6b40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6b42:	68eb      	ldr	r3, [r5, #12]
   b6b44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6b46:	68ab      	ldr	r3, [r5, #8]
   b6b48:	60a3      	str	r3, [r4, #8]
    }
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6b52:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6b54:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6b56:	4668      	mov	r0, sp
   b6b58:	f7ff ff5a 	bl	b6a10 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6b5c:	f04f 0302 	mov.w	r3, #2
   b6b60:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6b64:	2a00      	cmp	r2, #0
   b6b66:	d103      	bne.n	b6b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6b68:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6b6c:	2900      	cmp	r1, #0
   b6b6e:	d1f7      	bne.n	b6b60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6b70:	d125      	bne.n	b6bbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6b72:	f104 050c 	add.w	r5, r4, #12
   b6b76:	4669      	mov	r1, sp
   b6b78:	4628      	mov	r0, r5
   b6b7a:	f7ff ff49 	bl	b6a10 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6b7e:	f3bf 8f5b 	dmb	ish
   b6b82:	2301      	movs	r3, #1
   b6b84:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6b86:	2000      	movs	r0, #0
   b6b88:	f104 0308 	add.w	r3, r4, #8
   b6b8c:	f3bf 8f5b 	dmb	ish
   b6b90:	e853 6f00 	ldrex	r6, [r3]
   b6b94:	e843 0200 	strex	r2, r0, [r3]
   b6b98:	2a00      	cmp	r2, #0
   b6b9a:	d1f9      	bne.n	b6b90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6b9c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6ba0:	b16e      	cbz	r6, b6bbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6ba2:	f7ff fa31 	bl	b6008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6ba6:	b178      	cbz	r0, b6bc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6ba8:	4629      	mov	r1, r5
   b6baa:	4630      	mov	r0, r6
   b6bac:	f7ff ff8b 	bl	b6ac6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6bb0:	4630      	mov	r0, r6
   b6bb2:	f7ff fcd1 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6bb6:	2110      	movs	r1, #16
   b6bb8:	4630      	mov	r0, r6
   b6bba:	f7fd ff86 	bl	b4aca <_ZdlPvj>
        p_->setError(std::move(error));
   b6bbe:	4668      	mov	r0, sp
   b6bc0:	f7ff ff33 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
    }
   b6bc4:	b009      	add	sp, #36	; 0x24
   b6bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6bc8:	4631      	mov	r1, r6
   b6bca:	a802      	add	r0, sp, #8
   b6bcc:	f7ff ffb0 	bl	b6b30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6bd0:	68e0      	ldr	r0, [r4, #12]
   b6bd2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6bd6:	b108      	cbz	r0, b6bdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6bd8:	f001 fb80 	bl	b82dc <strdup>
        type_(type) {
   b6bdc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6bde:	2010      	movs	r0, #16
   b6be0:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6be4:	f7fd ff69 	bl	b4aba <_Znwj>
   b6be8:	4605      	mov	r5, r0
   b6bea:	b1e8      	cbz	r0, b6c28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6bec:	2700      	movs	r7, #0
   b6bee:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6bf0:	2018      	movs	r0, #24
   b6bf2:	f7fd ff62 	bl	b4aba <_Znwj>
   b6bf6:	4604      	mov	r4, r0
   b6bf8:	b188      	cbz	r0, b6c1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6bfa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6bfc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6bfe:	a802      	add	r0, sp, #8
   b6c00:	f7ff fcc7 	bl	b6592 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c04:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6c06:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c08:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c0a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6c0c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6c0e:	a906      	add	r1, sp, #24
   b6c10:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c12:	60e3      	str	r3, [r4, #12]
   b6c14:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6c18:	9205      	str	r2, [sp, #20]
   b6c1a:	f7ff fef9 	bl	b6a10 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6c1e:	4b08      	ldr	r3, [pc, #32]	; (b6c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6c20:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6c22:	4b08      	ldr	r3, [pc, #32]	; (b6c44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6c24:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6c26:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6c28:	a806      	add	r0, sp, #24
   b6c2a:	f7ff fefe 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6c2e:	a802      	add	r0, sp, #8
   b6c30:	f7ff fc92 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6c34:	2200      	movs	r2, #0
   b6c36:	4629      	mov	r1, r5
   b6c38:	4803      	ldr	r0, [pc, #12]	; (b6c48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6c3a:	f7ff f9ed 	bl	b6018 <application_thread_invoke>
   b6c3e:	e7b7      	b.n	b6bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6c40:	000b6ad9 	.word	0x000b6ad9
   b6c44:	000b6d5d 	.word	0x000b6d5d
   b6c48:	000b723d 	.word	0x000b723d

000b6c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c50:	b08b      	sub	sp, #44	; 0x2c
   b6c52:	4605      	mov	r5, r0
   b6c54:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6c58:	460f      	mov	r7, r1
   b6c5a:	4690      	mov	r8, r2
   b6c5c:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6c5e:	f7ff fa67 	bl	b6130 <spark_cloud_flag_connected>
   b6c62:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6c64:	4683      	mov	fp, r0
   b6c66:	bb38      	cbnz	r0, b6cb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6c68:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6c6c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6c6e:	a905      	add	r1, sp, #20
   b6c70:	4630      	mov	r0, r6
   b6c72:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6c76:	f7ff fecb 	bl	b6a10 <_ZN8particle5ErrorC1EOS0_>
   b6c7a:	2014      	movs	r0, #20
   b6c7c:	f7fd ff1d 	bl	b4aba <_Znwj>
   b6c80:	4604      	mov	r4, r0
   b6c82:	b148      	cbz	r0, b6c98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6c84:	2302      	movs	r3, #2
   b6c86:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6c88:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6c8a:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6c8e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6c90:	4631      	mov	r1, r6
   b6c92:	300c      	adds	r0, #12
   b6c94:	f7ff febc 	bl	b6a10 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c98:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6c9a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c9c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6ca0:	f7ff ff32 	bl	b6b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6ca4:	4630      	mov	r0, r6
   b6ca6:	f7ff fec0 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6caa:	a805      	add	r0, sp, #20
   b6cac:	f7ff febd 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b6cb0:	4628      	mov	r0, r5
   b6cb2:	b00b      	add	sp, #44	; 0x2c
   b6cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6cb8:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6cba:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6cbc:	2014      	movs	r0, #20
   b6cbe:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6cc2:	9307      	str	r3, [sp, #28]
   b6cc4:	f7fd fef9 	bl	b4aba <_Znwj>
   b6cc8:	4601      	mov	r1, r0
   b6cca:	b118      	cbz	r0, b6cd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6cd0:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6cd2:	7044      	strb	r4, [r0, #1]
   b6cd4:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6cd6:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6cd8:	f7ff ff16 	bl	b6b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6cdc:	4b1e      	ldr	r3, [pc, #120]	; (b6d58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6cde:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6ce0:	2008      	movs	r0, #8
   b6ce2:	f7fd feea 	bl	b4aba <_Znwj>
   b6ce6:	4604      	mov	r4, r0
   b6ce8:	b110      	cbz	r0, b6cf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6cea:	a903      	add	r1, sp, #12
   b6cec:	f7ff fec7 	bl	b6a7e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6cf0:	9600      	str	r6, [sp, #0]
   b6cf2:	fa5f f38a 	uxtb.w	r3, sl
   b6cf6:	464a      	mov	r2, r9
   b6cf8:	4641      	mov	r1, r8
   b6cfa:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6cfc:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6cfe:	f7ff fa1f 	bl	b6140 <spark_send_event>
   b6d02:	b9b8      	cbnz	r0, b6d34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6d04:	9b03      	ldr	r3, [sp, #12]
   b6d06:	785b      	ldrb	r3, [r3, #1]
   b6d08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6d0c:	b993      	cbnz	r3, b6d34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6d0e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6d12:	a905      	add	r1, sp, #20
   b6d14:	a803      	add	r0, sp, #12
   b6d16:	9205      	str	r2, [sp, #20]
   b6d18:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6d1c:	f7ff ff18 	bl	b6b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6d20:	a805      	add	r0, sp, #20
   b6d22:	f7ff fe82 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6d26:	a805      	add	r0, sp, #20
   b6d28:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6d2a:	f7ff feb1 	bl	b6a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6d2e:	a806      	add	r0, sp, #24
   b6d30:	f7fe f986 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d34:	a903      	add	r1, sp, #12
   b6d36:	a805      	add	r0, sp, #20
   b6d38:	f7ff fea1 	bl	b6a7e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6d3c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6d3e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6d40:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6d42:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6d44:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6d46:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6d48:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6d4a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6d4c:	f7fe f978 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6d50:	a804      	add	r0, sp, #16
   b6d52:	f7fe f975 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6d56:	e7ab      	b.n	b6cb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6d58:	000b6dd9 	.word	0x000b6dd9

000b6d5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6d5c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d60:	4605      	mov	r5, r0
	switch (__op)
   b6d62:	d103      	bne.n	b6d6c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6d64:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6d66:	6003      	str	r3, [r0, #0]
      }
   b6d68:	2000      	movs	r0, #0
   b6d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6d6c:	2a02      	cmp	r2, #2
   b6d6e:	d010      	beq.n	b6d92 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6d70:	2a03      	cmp	r2, #3
   b6d72:	d1f9      	bne.n	b6d68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6d74:	6804      	ldr	r4, [r0, #0]
   b6d76:	2c00      	cmp	r4, #0
   b6d78:	d0f6      	beq.n	b6d68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6d7a:	f104 0010 	add.w	r0, r4, #16
   b6d7e:	f7ff fe54 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6d82:	4620      	mov	r0, r4
   b6d84:	f7ff fbe8 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6d88:	2118      	movs	r1, #24
   b6d8a:	4620      	mov	r0, r4
   b6d8c:	f7fd fe9d 	bl	b4aca <_ZdlPvj>
   b6d90:	e7ea      	b.n	b6d68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6d92:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6d94:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6d96:	f7fd fe90 	bl	b4aba <_Znwj>
   b6d9a:	4604      	mov	r4, r0
   b6d9c:	b150      	cbz	r0, b6db4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6d9e:	4631      	mov	r1, r6
   b6da0:	f7ff fec6 	bl	b6b30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6da4:	6930      	ldr	r0, [r6, #16]
   b6da6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6daa:	b108      	cbz	r0, b6db0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6dac:	f001 fa96 	bl	b82dc <strdup>
        type_(type) {
   b6db0:	6120      	str	r0, [r4, #16]
   b6db2:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6db4:	602c      	str	r4, [r5, #0]
	}
   b6db6:	e7d7      	b.n	b6d68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6db8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6db8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6dba:	2300      	movs	r3, #0
   b6dbc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6dbe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6dc0:	4604      	mov	r4, r0
   b6dc2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6dc4:	b12b      	cbz	r3, b6dd2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6dc6:	2202      	movs	r2, #2
   b6dc8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6dca:	68eb      	ldr	r3, [r5, #12]
   b6dcc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6dce:	68ab      	ldr	r3, [r5, #8]
   b6dd0:	60a3      	str	r3, [r4, #8]
    }
   b6dd2:	4620      	mov	r0, r4
   b6dd4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6dd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6dda:	b089      	sub	sp, #36	; 0x24
   b6ddc:	4604      	mov	r4, r0
   b6dde:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6de0:	a801      	add	r0, sp, #4
   b6de2:	4611      	mov	r1, r2
   b6de4:	f7ff fe54 	bl	b6a90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6de8:	b1a4      	cbz	r4, b6e14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6dea:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6dec:	b11d      	cbz	r5, b6df6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6dee:	4628      	mov	r0, r5
   b6df0:	f001 fa74 	bl	b82dc <strdup>
   b6df4:	4605      	mov	r5, r0
   b6df6:	a801      	add	r0, sp, #4
   b6df8:	a903      	add	r1, sp, #12
        type_(type) {
   b6dfa:	9503      	str	r5, [sp, #12]
   b6dfc:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6e00:	f7ff fea6 	bl	b6b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6e04:	a803      	add	r0, sp, #12
   b6e06:	f7ff fe10 	bl	b6a2a <_ZN8particle5ErrorD1Ev>
   b6e0a:	a802      	add	r0, sp, #8
   b6e0c:	f7fe f918 	bl	b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e10:	b009      	add	sp, #36	; 0x24
   b6e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6e14:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6e16:	2301      	movs	r3, #1
   b6e18:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6e1c:	2a00      	cmp	r2, #0
   b6e1e:	d103      	bne.n	b6e28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6e20:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6e24:	2900      	cmp	r1, #0
   b6e26:	d1f7      	bne.n	b6e18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6e28:	d1ef      	bne.n	b6e0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6e2a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6e2c:	f3bf 8f5b 	dmb	ish
   b6e30:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6e32:	1d2b      	adds	r3, r5, #4
   b6e34:	f3bf 8f5b 	dmb	ish
   b6e38:	e853 6f00 	ldrex	r6, [r3]
   b6e3c:	e843 4200 	strex	r2, r4, [r3]
   b6e40:	2a00      	cmp	r2, #0
   b6e42:	d1f9      	bne.n	b6e38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6e44:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6e48:	2e00      	cmp	r6, #0
   b6e4a:	d0de      	beq.n	b6e0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6e4c:	4620      	mov	r0, r4
   b6e4e:	f7ff f8db 	bl	b6008 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6e52:	4607      	mov	r7, r0
   b6e54:	b160      	cbz	r0, b6e70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6e56:	f105 010c 	add.w	r1, r5, #12
   b6e5a:	4630      	mov	r0, r6
   b6e5c:	f7ff fe43 	bl	b6ae6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6e60:	4630      	mov	r0, r6
   b6e62:	f7ff fb79 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6e66:	2110      	movs	r1, #16
   b6e68:	4630      	mov	r0, r6
   b6e6a:	f7fd fe2e 	bl	b4aca <_ZdlPvj>
   b6e6e:	e7cc      	b.n	b6e0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6e70:	4631      	mov	r1, r6
   b6e72:	a803      	add	r0, sp, #12
   b6e74:	f7ff ffa0 	bl	b6db8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6e78:	7b2b      	ldrb	r3, [r5, #12]
   b6e7a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6e7e:	2010      	movs	r0, #16
   b6e80:	f7fd fe1b 	bl	b4aba <_Znwj>
   b6e84:	4605      	mov	r5, r0
   b6e86:	b1d0      	cbz	r0, b6ebe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6e88:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e8a:	2014      	movs	r0, #20
   b6e8c:	f7fd fe15 	bl	b4aba <_Znwj>
   b6e90:	4604      	mov	r4, r0
   b6e92:	b178      	cbz	r0, b6eb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6e94:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6e96:	4601      	mov	r1, r0
   b6e98:	a803      	add	r0, sp, #12
   b6e9a:	f7ff fb7a 	bl	b6592 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e9e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6ea0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6ea2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6ea4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6ea6:	9205      	str	r2, [sp, #20]
   b6ea8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6eaa:	60e3      	str	r3, [r4, #12]
   b6eac:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6eb0:	9206      	str	r2, [sp, #24]
   b6eb2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6eb4:	4b06      	ldr	r3, [pc, #24]	; (b6ed0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6eb6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6eb8:	4b06      	ldr	r3, [pc, #24]	; (b6ed4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6eba:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6ebc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6ebe:	a803      	add	r0, sp, #12
   b6ec0:	f7ff fb4a 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6ec4:	2200      	movs	r2, #0
   b6ec6:	4629      	mov	r1, r5
   b6ec8:	4803      	ldr	r0, [pc, #12]	; (b6ed8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6eca:	f7ff f8a5 	bl	b6018 <application_thread_invoke>
   b6ece:	e7c7      	b.n	b6e60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6ed0:	000b6af9 	.word	0x000b6af9
   b6ed4:	000b6edd 	.word	0x000b6edd
   b6ed8:	000b723d 	.word	0x000b723d

000b6edc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6edc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6ede:	b570      	push	{r4, r5, r6, lr}
   b6ee0:	4604      	mov	r4, r0
	switch (__op)
   b6ee2:	d103      	bne.n	b6eec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6ee4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6ee6:	6003      	str	r3, [r0, #0]
      }
   b6ee8:	2000      	movs	r0, #0
   b6eea:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6eec:	2a02      	cmp	r2, #2
   b6eee:	d00c      	beq.n	b6f0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6ef0:	2a03      	cmp	r2, #3
   b6ef2:	d1f9      	bne.n	b6ee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6ef4:	6804      	ldr	r4, [r0, #0]
   b6ef6:	2c00      	cmp	r4, #0
   b6ef8:	d0f6      	beq.n	b6ee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6efa:	4620      	mov	r0, r4
   b6efc:	f7ff fb2c 	bl	b6558 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6f00:	2114      	movs	r1, #20
   b6f02:	4620      	mov	r0, r4
   b6f04:	f7fd fde1 	bl	b4aca <_ZdlPvj>
   b6f08:	e7ee      	b.n	b6ee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f0a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6f0c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6f0e:	f7fd fdd4 	bl	b4aba <_Znwj>
   b6f12:	4605      	mov	r5, r0
   b6f14:	b120      	cbz	r0, b6f20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6f16:	4631      	mov	r1, r6
   b6f18:	f7ff ff4e 	bl	b6db8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6f1c:	7c33      	ldrb	r3, [r6, #16]
   b6f1e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6f20:	6025      	str	r5, [r4, #0]
	}
   b6f22:	e7e1      	b.n	b6ee8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6f24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6f24:	4770      	bx	lr

000b6f26 <_ZN9IPAddressD0Ev>:
   b6f26:	b510      	push	{r4, lr}
   b6f28:	2118      	movs	r1, #24
   b6f2a:	4604      	mov	r4, r0
   b6f2c:	f7fd fdcd 	bl	b4aca <_ZdlPvj>
   b6f30:	4620      	mov	r0, r4
   b6f32:	bd10      	pop	{r4, pc}

000b6f34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6f34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6f36:	7d03      	ldrb	r3, [r0, #20]
   b6f38:	2b06      	cmp	r3, #6
{
   b6f3a:	b08d      	sub	sp, #52	; 0x34
   b6f3c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f3e:	f100 0704 	add.w	r7, r0, #4
   b6f42:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6f46:	d012      	beq.n	b6f6e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6f48:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6f4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6f50:	220a      	movs	r2, #10
   b6f52:	4630      	mov	r0, r6
   b6f54:	f7ff fb7d 	bl	b6652 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6f58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6f5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6f5c:	d019      	beq.n	b6f92 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6f5e:	2c00      	cmp	r4, #0
   b6f60:	d0f4      	beq.n	b6f4c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6f62:	212e      	movs	r1, #46	; 0x2e
   b6f64:	4630      	mov	r0, r6
   b6f66:	f7ff fb5b 	bl	b6620 <_ZN5Print5printEc>
   b6f6a:	4404      	add	r4, r0
   b6f6c:	e7ee      	b.n	b6f4c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f6e:	232f      	movs	r3, #47	; 0x2f
   b6f70:	466a      	mov	r2, sp
   b6f72:	4639      	mov	r1, r7
   b6f74:	200a      	movs	r0, #10
		buf[0] = 0;
   b6f76:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6f7a:	f7fe ff25 	bl	b5dc8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6f7e:	4668      	mov	r0, sp
   b6f80:	f7fd fd40 	bl	b4a04 <strlen>
   b6f84:	6833      	ldr	r3, [r6, #0]
   b6f86:	4602      	mov	r2, r0
   b6f88:	68db      	ldr	r3, [r3, #12]
   b6f8a:	4669      	mov	r1, sp
   b6f8c:	4630      	mov	r0, r6
   b6f8e:	4798      	blx	r3
   b6f90:	4604      	mov	r4, r0
    }
    return n;
}
   b6f92:	4620      	mov	r0, r4
   b6f94:	b00d      	add	sp, #52	; 0x34
   b6f96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6f98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6f98:	b510      	push	{r4, lr}
   b6f9a:	4b05      	ldr	r3, [pc, #20]	; (b6fb0 <_ZN9IPAddressC1Ev+0x18>)
   b6f9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6f9e:	2211      	movs	r2, #17
   b6fa0:	f840 3b04 	str.w	r3, [r0], #4
   b6fa4:	2100      	movs	r1, #0
   b6fa6:	f001 f94a 	bl	b823e <memset>
}
   b6faa:	4620      	mov	r0, r4
   b6fac:	bd10      	pop	{r4, pc}
   b6fae:	bf00      	nop
   b6fb0:	000ba640 	.word	0x000ba640

000b6fb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6fb4:	4603      	mov	r3, r0
   b6fb6:	4a07      	ldr	r2, [pc, #28]	; (b6fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6fb8:	b510      	push	{r4, lr}
   b6fba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6fbe:	f101 0210 	add.w	r2, r1, #16
   b6fc2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6fc6:	f843 4b04 	str.w	r4, [r3], #4
   b6fca:	4291      	cmp	r1, r2
   b6fcc:	d1f9      	bne.n	b6fc2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6fce:	780a      	ldrb	r2, [r1, #0]
   b6fd0:	701a      	strb	r2, [r3, #0]
}
   b6fd2:	bd10      	pop	{r4, pc}
   b6fd4:	000ba640 	.word	0x000ba640

000b6fd8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6fd8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6fda:	2b04      	cmp	r3, #4
   b6fdc:	d104      	bne.n	b6fe8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6fde:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6fe0:	3800      	subs	r0, #0
   b6fe2:	bf18      	it	ne
   b6fe4:	2001      	movne	r0, #1
   b6fe6:	4770      	bx	lr
    } else if (version() == 6) {
   b6fe8:	2b06      	cmp	r3, #6
   b6fea:	d107      	bne.n	b6ffc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6fec:	6843      	ldr	r3, [r0, #4]
   b6fee:	b93b      	cbnz	r3, b7000 <_ZNK9IPAddresscvbEv+0x28>
   b6ff0:	6883      	ldr	r3, [r0, #8]
   b6ff2:	b92b      	cbnz	r3, b7000 <_ZNK9IPAddresscvbEv+0x28>
   b6ff4:	68c3      	ldr	r3, [r0, #12]
   b6ff6:	b91b      	cbnz	r3, b7000 <_ZNK9IPAddresscvbEv+0x28>
   b6ff8:	6900      	ldr	r0, [r0, #16]
   b6ffa:	e7f1      	b.n	b6fe0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6ffc:	2000      	movs	r0, #0
   b6ffe:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7000:	2001      	movs	r0, #1
}
   b7002:	4770      	bx	lr

000b7004 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7004:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7006:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b700a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b700e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7012:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7016:	2304      	movs	r3, #4
   b7018:	6041      	str	r1, [r0, #4]
   b701a:	7503      	strb	r3, [r0, #20]
}
   b701c:	bd10      	pop	{r4, pc}
	...

000b7020 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7020:	b507      	push	{r0, r1, r2, lr}
   b7022:	4b06      	ldr	r3, [pc, #24]	; (b703c <_ZN9IPAddressC1EPKh+0x1c>)
   b7024:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7026:	78cb      	ldrb	r3, [r1, #3]
   b7028:	9300      	str	r3, [sp, #0]
   b702a:	788b      	ldrb	r3, [r1, #2]
   b702c:	784a      	ldrb	r2, [r1, #1]
   b702e:	7809      	ldrb	r1, [r1, #0]
   b7030:	f7ff ffe8 	bl	b7004 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7034:	b003      	add	sp, #12
   b7036:	f85d fb04 	ldr.w	pc, [sp], #4
   b703a:	bf00      	nop
   b703c:	000ba640 	.word	0x000ba640

000b7040 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7040:	7441      	strb	r1, [r0, #17]
}
   b7042:	4770      	bx	lr

000b7044 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7044:	4770      	bx	lr

000b7046 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7046:	4770      	bx	lr

000b7048 <_ZN9USBSerial4readEv>:
{
   b7048:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b704a:	2100      	movs	r1, #0
   b704c:	7c00      	ldrb	r0, [r0, #16]
   b704e:	f7fe ffa3 	bl	b5f98 <HAL_USB_USART_Receive_Data>
}
   b7052:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7056:	bd08      	pop	{r3, pc}

000b7058 <_ZN9USBSerial4peekEv>:
{
   b7058:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b705a:	2101      	movs	r1, #1
   b705c:	7c00      	ldrb	r0, [r0, #16]
   b705e:	f7fe ff9b 	bl	b5f98 <HAL_USB_USART_Receive_Data>
}
   b7062:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7066:	bd08      	pop	{r3, pc}

000b7068 <_ZN9USBSerial17availableForWriteEv>:
{
   b7068:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b706a:	7c00      	ldrb	r0, [r0, #16]
   b706c:	f7fe ff8c 	bl	b5f88 <HAL_USB_USART_Available_Data_For_Write>
}
   b7070:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7074:	bd08      	pop	{r3, pc}

000b7076 <_ZN9USBSerial9availableEv>:
{
   b7076:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7078:	7c00      	ldrb	r0, [r0, #16]
   b707a:	f7fe ff7d 	bl	b5f78 <HAL_USB_USART_Available_Data>
}
   b707e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7082:	bd08      	pop	{r3, pc}

000b7084 <_ZN9USBSerial5writeEh>:
{
   b7084:	b513      	push	{r0, r1, r4, lr}
   b7086:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7088:	7c00      	ldrb	r0, [r0, #16]
{
   b708a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b708c:	f7fe ff7c 	bl	b5f88 <HAL_USB_USART_Available_Data_For_Write>
   b7090:	2800      	cmp	r0, #0
   b7092:	9901      	ldr	r1, [sp, #4]
   b7094:	dc01      	bgt.n	b709a <_ZN9USBSerial5writeEh+0x16>
   b7096:	7c60      	ldrb	r0, [r4, #17]
   b7098:	b120      	cbz	r0, b70a4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b709a:	7c20      	ldrb	r0, [r4, #16]
   b709c:	f7fe ff84 	bl	b5fa8 <HAL_USB_USART_Send_Data>
   b70a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b70a4:	b002      	add	sp, #8
   b70a6:	bd10      	pop	{r4, pc}

000b70a8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b70a8:	7c00      	ldrb	r0, [r0, #16]
   b70aa:	f7fe bf85 	b.w	b5fb8 <HAL_USB_USART_Flush_Data>

000b70ae <_ZN9USBSerialD0Ev>:
   b70ae:	b510      	push	{r4, lr}
   b70b0:	2114      	movs	r1, #20
   b70b2:	4604      	mov	r4, r0
   b70b4:	f7fd fd09 	bl	b4aca <_ZdlPvj>
   b70b8:	4620      	mov	r0, r4
   b70ba:	bd10      	pop	{r4, pc}

000b70bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b70bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b70be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b70c2:	4604      	mov	r4, r0
   b70c4:	4608      	mov	r0, r1
   b70c6:	2100      	movs	r1, #0
   b70c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b70cc:	4b04      	ldr	r3, [pc, #16]	; (b70e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b70ce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b70d0:	2301      	movs	r3, #1
  _serial = serial;
   b70d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b70d4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b70d6:	4611      	mov	r1, r2
   b70d8:	f7fe ff46 	bl	b5f68 <HAL_USB_USART_Init>
}
   b70dc:	4620      	mov	r0, r4
   b70de:	bd10      	pop	{r4, pc}
   b70e0:	000ba654 	.word	0x000ba654

000b70e4 <_Z19acquireSerialBufferv>:
{
   b70e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b70e6:	2214      	movs	r2, #20
{
   b70e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b70ea:	2100      	movs	r1, #0
   b70ec:	f001 f8a7 	bl	b823e <memset>
}
   b70f0:	4620      	mov	r0, r4
   b70f2:	bd10      	pop	{r4, pc}

000b70f4 <_Z16_fetch_usbserialv>:
{
   b70f4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b70f6:	4c0f      	ldr	r4, [pc, #60]	; (b7134 <_Z16_fetch_usbserialv+0x40>)
{
   b70f8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b70fa:	a803      	add	r0, sp, #12
   b70fc:	f7ff fff2 	bl	b70e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7100:	7821      	ldrb	r1, [r4, #0]
   b7102:	f3bf 8f5b 	dmb	ish
   b7106:	f011 0101 	ands.w	r1, r1, #1
   b710a:	d10f      	bne.n	b712c <_Z16_fetch_usbserialv+0x38>
   b710c:	4620      	mov	r0, r4
   b710e:	9101      	str	r1, [sp, #4]
   b7110:	f7fd fcdd 	bl	b4ace <__cxa_guard_acquire>
   b7114:	9901      	ldr	r1, [sp, #4]
   b7116:	b148      	cbz	r0, b712c <_Z16_fetch_usbserialv+0x38>
   b7118:	aa03      	add	r2, sp, #12
   b711a:	4807      	ldr	r0, [pc, #28]	; (b7138 <_Z16_fetch_usbserialv+0x44>)
   b711c:	f7ff ffce 	bl	b70bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7120:	4620      	mov	r0, r4
   b7122:	f7fd fcd9 	bl	b4ad8 <__cxa_guard_release>
   b7126:	4805      	ldr	r0, [pc, #20]	; (b713c <_Z16_fetch_usbserialv+0x48>)
   b7128:	f001 f834 	bl	b8194 <atexit>
	return _usbserial;
}
   b712c:	4802      	ldr	r0, [pc, #8]	; (b7138 <_Z16_fetch_usbserialv+0x44>)
   b712e:	b008      	add	sp, #32
   b7130:	bd10      	pop	{r4, pc}
   b7132:	bf00      	nop
   b7134:	2003e6f8 	.word	0x2003e6f8
   b7138:	2003e6fc 	.word	0x2003e6fc
   b713c:	000b7045 	.word	0x000b7045

000b7140 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b7140:	4700      	bx	r0
	...

000b7144 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b7144:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   b7148:	2400      	movs	r4, #0
{
   b714a:	461d      	mov	r5, r3
   b714c:	460f      	mov	r7, r1
   b714e:	4690      	mov	r8, r2
   b7150:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   b7152:	f7fe fde9 	bl	b5d28 <hal_interrupt_detach>
  if (priority >= 0) {
   b7156:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7158:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   b715c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b7160:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   b7164:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b7168:	bfa2      	ittt	ge
   b716a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b716e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b7172:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7174:	4907      	ldr	r1, [pc, #28]	; (b7194 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b7176:	9400      	str	r4, [sp, #0]
   b7178:	4643      	mov	r3, r8
   b717a:	463a      	mov	r2, r7
   b717c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b717e:	bfa8      	it	ge
   b7180:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b7184:	f7fe fdc8 	bl	b5d18 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   b7188:	fab0 f080 	clz	r0, r0
   b718c:	0940      	lsrs	r0, r0, #5
   b718e:	b004      	add	sp, #16
   b7190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7194:	000b7141 	.word	0x000b7141

000b7198 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7198:	4770      	bx	lr

000b719a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b719a:	7441      	strb	r1, [r0, #17]
}
   b719c:	4770      	bx	lr

000b719e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b719e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b71a0:	7c00      	ldrb	r0, [r0, #16]
   b71a2:	f7fe fe59 	bl	b5e58 <hal_usart_available_data_for_write>
}
   b71a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b71aa:	bd08      	pop	{r3, pc}

000b71ac <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b71ac:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b71ae:	7c00      	ldrb	r0, [r0, #16]
   b71b0:	f7fe fe2a 	bl	b5e08 <hal_usart_available>
}
   b71b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b71b8:	bd08      	pop	{r3, pc}

000b71ba <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b71ba:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b71bc:	7c00      	ldrb	r0, [r0, #16]
   b71be:	f7fe fe33 	bl	b5e28 <hal_usart_peek>
}
   b71c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b71c6:	bd08      	pop	{r3, pc}

000b71c8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b71c8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b71ca:	7c00      	ldrb	r0, [r0, #16]
   b71cc:	f7fe fe24 	bl	b5e18 <hal_usart_read>
}
   b71d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b71d4:	bd08      	pop	{r3, pc}

000b71d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b71d6:	7c00      	ldrb	r0, [r0, #16]
   b71d8:	f7fe be2e 	b.w	b5e38 <hal_usart_flush>

000b71dc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b71dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b71de:	7c45      	ldrb	r5, [r0, #17]
{
   b71e0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b71e2:	b12d      	cbz	r5, b71f0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b71e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b71e6:	b003      	add	sp, #12
   b71e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b71ec:	f7fe be04 	b.w	b5df8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b71f0:	7c00      	ldrb	r0, [r0, #16]
   b71f2:	9101      	str	r1, [sp, #4]
   b71f4:	f7fe fe30 	bl	b5e58 <hal_usart_available_data_for_write>
   b71f8:	2800      	cmp	r0, #0
   b71fa:	9901      	ldr	r1, [sp, #4]
   b71fc:	dcf2      	bgt.n	b71e4 <_ZN11USARTSerial5writeEh+0x8>
}
   b71fe:	4628      	mov	r0, r5
   b7200:	b003      	add	sp, #12
   b7202:	bd30      	pop	{r4, r5, pc}

000b7204 <_ZN11USARTSerialD0Ev>:
   b7204:	b510      	push	{r4, lr}
   b7206:	2114      	movs	r1, #20
   b7208:	4604      	mov	r4, r0
   b720a:	f7fd fc5e 	bl	b4aca <_ZdlPvj>
   b720e:	4620      	mov	r0, r4
   b7210:	bd10      	pop	{r4, pc}
	...

000b7214 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7214:	b510      	push	{r4, lr}
   b7216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b721a:	4604      	mov	r4, r0
   b721c:	4608      	mov	r0, r1
   b721e:	4611      	mov	r1, r2
   b7220:	2200      	movs	r2, #0
   b7222:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7226:	4b04      	ldr	r3, [pc, #16]	; (b7238 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7228:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b722a:	2301      	movs	r3, #1
  _serial = serial;
   b722c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b722e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7230:	f7fe fe1a 	bl	b5e68 <hal_usart_init_ex>
}
   b7234:	4620      	mov	r0, r4
   b7236:	bd10      	pop	{r4, pc}
   b7238:	000ba684 	.word	0x000ba684

000b723c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b723c:	b510      	push	{r4, lr}
      if (_M_empty())
   b723e:	6883      	ldr	r3, [r0, #8]
   b7240:	4604      	mov	r4, r0
   b7242:	b90b      	cbnz	r3, b7248 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b7244:	f000 fcf9 	bl	b7c3a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7248:	68c3      	ldr	r3, [r0, #12]
   b724a:	4798      	blx	r3
      if (_M_manager)
   b724c:	68a3      	ldr	r3, [r4, #8]
   b724e:	b11b      	cbz	r3, b7258 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b7250:	2203      	movs	r2, #3
   b7252:	4621      	mov	r1, r4
   b7254:	4620      	mov	r0, r4
   b7256:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7258:	4620      	mov	r0, r4
   b725a:	2110      	movs	r1, #16
}
   b725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b7260:	f7fd bc33 	b.w	b4aca <_ZdlPvj>

000b7264 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7264:	4770      	bx	lr

000b7266 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7268:	4606      	mov	r6, r0
   b726a:	4615      	mov	r5, r2
   b726c:	460c      	mov	r4, r1
   b726e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7270:	42bc      	cmp	r4, r7
   b7272:	d006      	beq.n	b7282 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7274:	6833      	ldr	r3, [r6, #0]
   b7276:	f814 1b01 	ldrb.w	r1, [r4], #1
   b727a:	689b      	ldr	r3, [r3, #8]
   b727c:	4630      	mov	r0, r6
   b727e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7280:	e7f6      	b.n	b7270 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7282:	4628      	mov	r0, r5
   b7284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7286 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7286:	7c00      	ldrb	r0, [r0, #16]
   b7288:	2200      	movs	r2, #0
   b728a:	f7fe bdf5 	b.w	b5e78 <hal_i2c_write>

000b728e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b728e:	7c00      	ldrb	r0, [r0, #16]
   b7290:	2100      	movs	r1, #0
   b7292:	f7fe bdf9 	b.w	b5e88 <hal_i2c_available>

000b7296 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7296:	7c00      	ldrb	r0, [r0, #16]
   b7298:	2100      	movs	r1, #0
   b729a:	f7fe bdfd 	b.w	b5e98 <hal_i2c_read>

000b729e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b729e:	7c00      	ldrb	r0, [r0, #16]
   b72a0:	2100      	movs	r1, #0
   b72a2:	f7fe be01 	b.w	b5ea8 <hal_i2c_peek>

000b72a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b72a6:	7c00      	ldrb	r0, [r0, #16]
   b72a8:	2100      	movs	r1, #0
   b72aa:	f7fe be05 	b.w	b5eb8 <hal_i2c_flush>

000b72ae <_ZN7TwoWireD0Ev>:
   b72ae:	b510      	push	{r4, lr}
   b72b0:	2114      	movs	r1, #20
   b72b2:	4604      	mov	r4, r0
   b72b4:	f7fd fc09 	bl	b4aca <_ZdlPvj>
   b72b8:	4620      	mov	r0, r4
   b72ba:	bd10      	pop	{r4, pc}

000b72bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b72bc:	b510      	push	{r4, lr}
   b72be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b72c2:	4604      	mov	r4, r0
   b72c4:	4608      	mov	r0, r1
   b72c6:	2100      	movs	r1, #0
   b72c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b72cc:	4b03      	ldr	r3, [pc, #12]	; (b72dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b72ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b72d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b72d2:	4611      	mov	r1, r2
   b72d4:	f7fe fe00 	bl	b5ed8 <hal_i2c_init>
}
   b72d8:	4620      	mov	r0, r4
   b72da:	bd10      	pop	{r4, pc}
   b72dc:	000ba6b4 	.word	0x000ba6b4

000b72e0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b72e0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b72e2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b72e4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b72e8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b72ea:	2201      	movs	r2, #1
   b72ec:	f04f 33ff 	mov.w	r3, #4294967295
   b72f0:	f10d 0107 	add.w	r1, sp, #7
   b72f4:	47a0      	blx	r4
}
   b72f6:	b002      	add	sp, #8
   b72f8:	bd10      	pop	{r4, pc}

000b72fa <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b72fa:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b72fc:	6803      	ldr	r3, [r0, #0]
   b72fe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7300:	f04f 33ff 	mov.w	r3, #4294967295
   b7304:	46a4      	mov	ip, r4
}
   b7306:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b730a:	4760      	bx	ip

000b730c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b730c:	b513      	push	{r0, r1, r4, lr}
   b730e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7310:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7312:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7316:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7318:	f10d 0107 	add.w	r1, sp, #7
   b731c:	2201      	movs	r2, #1
   b731e:	47a0      	blx	r4
}
   b7320:	b002      	add	sp, #8
   b7322:	bd10      	pop	{r4, pc}

000b7324 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7324:	b510      	push	{r4, lr}
   b7326:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7328:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b732c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7330:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7332:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7334:	d008      	beq.n	b7348 <_ZN9TCPClient4readEv+0x24>
   b7336:	6963      	ldr	r3, [r4, #20]
   b7338:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b733c:	1c51      	adds	r1, r2, #1
   b733e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7342:	4413      	add	r3, r2
   b7344:	7918      	ldrb	r0, [r3, #4]
}
   b7346:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7348:	6803      	ldr	r3, [r0, #0]
   b734a:	691b      	ldr	r3, [r3, #16]
   b734c:	4798      	blx	r3
   b734e:	2800      	cmp	r0, #0
   b7350:	d1f1      	bne.n	b7336 <_ZN9TCPClient4readEv+0x12>
   b7352:	f04f 30ff 	mov.w	r0, #4294967295
   b7356:	e7f6      	b.n	b7346 <_ZN9TCPClient4readEv+0x22>

000b7358 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7358:	4770      	bx	lr

000b735a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b735a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b735c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b735e:	43c0      	mvns	r0, r0
   b7360:	0fc0      	lsrs	r0, r0, #31
   b7362:	4770      	bx	lr

000b7364 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7364:	4770      	bx	lr
	...

000b7368 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7368:	4b06      	ldr	r3, [pc, #24]	; (b7384 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b736a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b736c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b736e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7372:	d005      	beq.n	b7380 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7374:	4608      	mov	r0, r1
   b7376:	f000 fc63 	bl	b7c40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b737a:	2800      	cmp	r0, #0
   b737c:	bf08      	it	eq
   b737e:	2400      	moveq	r4, #0
      }
   b7380:	4620      	mov	r0, r4
   b7382:	bd10      	pop	{r4, pc}
   b7384:	000ba5f4 	.word	0x000ba5f4

000b7388 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7388:	b510      	push	{r4, lr}
   b738a:	21ac      	movs	r1, #172	; 0xac
   b738c:	4604      	mov	r4, r0
   b738e:	f7fd fb9c 	bl	b4aca <_ZdlPvj>
   b7392:	4620      	mov	r0, r4
   b7394:	bd10      	pop	{r4, pc}

000b7396 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7396:	21ac      	movs	r1, #172	; 0xac
   b7398:	f7fd bb97 	b.w	b4aca <_ZdlPvj>

000b739c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b73a0:	f04f 0800 	mov.w	r8, #0
   b73a4:	b086      	sub	sp, #24
   b73a6:	461c      	mov	r4, r3
   b73a8:	f8c0 8004 	str.w	r8, [r0, #4]
   b73ac:	4605      	mov	r5, r0
   b73ae:	460e      	mov	r6, r1
   b73b0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b73b2:	4641      	mov	r1, r8
   b73b4:	2210      	movs	r2, #16
   b73b6:	a802      	add	r0, sp, #8
   b73b8:	f000 ff41 	bl	b823e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b73bc:	1c63      	adds	r3, r4, #1
   b73be:	d009      	beq.n	b73d4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b73c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73c4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b73c8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b73cc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b73d0:	435c      	muls	r4, r3
   b73d2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b73d4:	6968      	ldr	r0, [r5, #20]
   b73d6:	2310      	movs	r3, #16
   b73d8:	9300      	str	r3, [sp, #0]
   b73da:	6800      	ldr	r0, [r0, #0]
   b73dc:	ab02      	add	r3, sp, #8
   b73de:	f241 0205 	movw	r2, #4101	; 0x1005
   b73e2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b73e6:	f7fe fd7f 	bl	b5ee8 <sock_setsockopt>
    if (ret < 0) {
   b73ea:	2800      	cmp	r0, #0
   b73ec:	da07      	bge.n	b73fe <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b73ee:	f7fe ff07 	bl	b6200 <__errno>
   b73f2:	6803      	ldr	r3, [r0, #0]
   b73f4:	606b      	str	r3, [r5, #4]
        return 0;
   b73f6:	2000      	movs	r0, #0
}
   b73f8:	b006      	add	sp, #24
   b73fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b73fe:	6968      	ldr	r0, [r5, #20]
   b7400:	2300      	movs	r3, #0
   b7402:	6800      	ldr	r0, [r0, #0]
   b7404:	463a      	mov	r2, r7
   b7406:	4631      	mov	r1, r6
   b7408:	f7fe fd8e 	bl	b5f28 <sock_send>
    if (ret < 0) {
   b740c:	1e03      	subs	r3, r0, #0
   b740e:	dbee      	blt.n	b73ee <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7410:	4618      	mov	r0, r3
   b7412:	e7f1      	b.n	b73f8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7414 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7414:	b530      	push	{r4, r5, lr}
   b7416:	b087      	sub	sp, #28
   b7418:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b741a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b741c:	4668      	mov	r0, sp
   b741e:	f7ff fdff 	bl	b7020 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7424:	3404      	adds	r4, #4
   b7426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7428:	682b      	ldr	r3, [r5, #0]
   b742a:	7023      	strb	r3, [r4, #0]
    }
   b742c:	b007      	add	sp, #28
   b742e:	bd30      	pop	{r4, r5, pc}

000b7430 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7430:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7432:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7434:	4b05      	ldr	r3, [pc, #20]	; (b744c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7436:	4604      	mov	r4, r0
   b7438:	358c      	adds	r5, #140	; 0x8c
   b743a:	f844 3b04 	str.w	r3, [r4], #4
   b743e:	4606      	mov	r6, r0
   b7440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7444:	682b      	ldr	r3, [r5, #0]
   b7446:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7448:	4630      	mov	r0, r6
   b744a:	bd70      	pop	{r4, r5, r6, pc}
   b744c:	000ba640 	.word	0x000ba640

000b7450 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7454:	4698      	mov	r8, r3
    stop();
   b7456:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7458:	b093      	sub	sp, #76	; 0x4c
   b745a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b745c:	2400      	movs	r4, #0
    stop();
   b745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7460:	4606      	mov	r6, r0
   b7462:	4617      	mov	r7, r2
    stop();
   b7464:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7466:	4628      	mov	r0, r5
   b7468:	466b      	mov	r3, sp
   b746a:	4622      	mov	r2, r4
   b746c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b746e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7470:	f7fe fc42 	bl	b5cf8 <netdb_getaddrinfo>
   b7474:	4605      	mov	r5, r0
   b7476:	2800      	cmp	r0, #0
   b7478:	d163      	bne.n	b7542 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b747a:	9b00      	ldr	r3, [sp, #0]
   b747c:	2b00      	cmp	r3, #0
   b747e:	d04b      	beq.n	b7518 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7480:	695b      	ldr	r3, [r3, #20]
   b7482:	2b00      	cmp	r3, #0
   b7484:	d048      	beq.n	b7518 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7486:	a806      	add	r0, sp, #24
   b7488:	f7ff fd86 	bl	b6f98 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b748c:	9b00      	ldr	r3, [sp, #0]
   b748e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7490:	7863      	ldrb	r3, [r4, #1]
   b7492:	2b02      	cmp	r3, #2
   b7494:	d104      	bne.n	b74a0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7496:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7498:	a806      	add	r0, sp, #24
   b749a:	f7ff ffbb 	bl	b7414 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b749e:	e026      	b.n	b74ee <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b74a0:	2b0a      	cmp	r3, #10
   b74a2:	d124      	bne.n	b74ee <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b74a4:	2211      	movs	r2, #17
   b74a6:	4629      	mov	r1, r5
   b74a8:	a801      	add	r0, sp, #4
   b74aa:	f000 fec8 	bl	b823e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b74ae:	68a3      	ldr	r3, [r4, #8]
   b74b0:	2b00      	cmp	r3, #0
   b74b2:	d038      	beq.n	b7526 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b74b4:	f104 0308 	add.w	r3, r4, #8
   b74b8:	f10d 0c04 	add.w	ip, sp, #4
   b74bc:	3418      	adds	r4, #24
   b74be:	6818      	ldr	r0, [r3, #0]
   b74c0:	6859      	ldr	r1, [r3, #4]
   b74c2:	4662      	mov	r2, ip
   b74c4:	c203      	stmia	r2!, {r0, r1}
   b74c6:	3308      	adds	r3, #8
   b74c8:	42a3      	cmp	r3, r4
   b74ca:	4694      	mov	ip, r2
   b74cc:	d1f7      	bne.n	b74be <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b74ce:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b74d0:	a901      	add	r1, sp, #4
   b74d2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b74d4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b74d8:	f7ff fd6c 	bl	b6fb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b74dc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b74e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b74e4:	ac07      	add	r4, sp, #28
   b74e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b74e8:	f8dc 3000 	ldr.w	r3, [ip]
   b74ec:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b74ee:	a806      	add	r0, sp, #24
   b74f0:	f7ff fd72 	bl	b6fd8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b74f4:	b180      	cbz	r0, b7518 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b74f6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b74f8:	ad07      	add	r5, sp, #28
   b74fa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b74fe:	4b12      	ldr	r3, [pc, #72]	; (b7548 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7500:	930c      	str	r3, [sp, #48]	; 0x30
   b7502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7504:	ac0d      	add	r4, sp, #52	; 0x34
   b7506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7508:	682b      	ldr	r3, [r5, #0]
   b750a:	7023      	strb	r3, [r4, #0]
   b750c:	463a      	mov	r2, r7
   b750e:	4643      	mov	r3, r8
   b7510:	a90c      	add	r1, sp, #48	; 0x30
   b7512:	4630      	mov	r0, r6
   b7514:	47c8      	blx	r9
   b7516:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7518:	9800      	ldr	r0, [sp, #0]
   b751a:	f7fe fbe5 	bl	b5ce8 <netdb_freeaddrinfo>
}
   b751e:	4628      	mov	r0, r5
   b7520:	b013      	add	sp, #76	; 0x4c
   b7522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7526:	68e3      	ldr	r3, [r4, #12]
   b7528:	2b00      	cmp	r3, #0
   b752a:	d1c3      	bne.n	b74b4 <_ZN9TCPClient7connectEPKctm+0x64>
   b752c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7530:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7534:	f7fe fc50 	bl	b5dd8 <inet_htonl>
   b7538:	4581      	cmp	r9, r0
   b753a:	d1bb      	bne.n	b74b4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b753c:	f104 0114 	add.w	r1, r4, #20
   b7540:	e7aa      	b.n	b7498 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7542:	4625      	mov	r5, r4
   b7544:	e7e8      	b.n	b7518 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7546:	bf00      	nop
   b7548:	000ba640 	.word	0x000ba640

000b754c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b754c:	b538      	push	{r3, r4, r5, lr}
   b754e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7550:	681a      	ldr	r2, [r3, #0]
   b7552:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7554:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7556:	da10      	bge.n	b757a <_ZN9TCPClient9connectedEv+0x2e>
   b7558:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b755c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7560:	429a      	cmp	r2, r3
   b7562:	d10a      	bne.n	b757a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7564:	6803      	ldr	r3, [r0, #0]
   b7566:	691b      	ldr	r3, [r3, #16]
   b7568:	4798      	blx	r3
        if (!rv) {
   b756a:	4604      	mov	r4, r0
   b756c:	b928      	cbnz	r0, b757a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b756e:	682b      	ldr	r3, [r5, #0]
   b7570:	4628      	mov	r0, r5
   b7572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7574:	4798      	blx	r3
        rv = available();
   b7576:	4620      	mov	r0, r4
}
   b7578:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b757a:	2001      	movs	r0, #1
   b757c:	e7fc      	b.n	b7578 <_ZN9TCPClient9connectedEv+0x2c>

000b757e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b757e:	b510      	push	{r4, lr}
   b7580:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7582:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7586:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b758a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b758c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b758e:	d005      	beq.n	b759c <_ZN9TCPClient4peekEv+0x1e>
   b7590:	6963      	ldr	r3, [r4, #20]
   b7592:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7596:	4413      	add	r3, r2
   b7598:	7918      	ldrb	r0, [r3, #4]
}
   b759a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b759c:	6803      	ldr	r3, [r0, #0]
   b759e:	691b      	ldr	r3, [r3, #16]
   b75a0:	4798      	blx	r3
   b75a2:	2800      	cmp	r0, #0
   b75a4:	d1f4      	bne.n	b7590 <_ZN9TCPClient4peekEv+0x12>
   b75a6:	f04f 30ff 	mov.w	r0, #4294967295
   b75aa:	e7f6      	b.n	b759a <_ZN9TCPClient4peekEv+0x1c>

000b75ac <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b75ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75ae:	6943      	ldr	r3, [r0, #20]
   b75b0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b75b2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b75b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b75ba:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b75bc:	4605      	mov	r5, r0
   b75be:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b75c0:	d016      	beq.n	b75f0 <_ZN9TCPClient4readEPhj+0x44>
   b75c2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b75c4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b75c8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b75cc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b75ce:	42bc      	cmp	r4, r7
   b75d0:	bf28      	it	cs
   b75d2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b75d4:	3304      	adds	r3, #4
   b75d6:	4622      	mov	r2, r4
   b75d8:	4419      	add	r1, r3
   b75da:	4630      	mov	r0, r6
   b75dc:	f000 fe07 	bl	b81ee <memcpy>
   b75e0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b75e2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b75e6:	4423      	add	r3, r4
   b75e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b75ec:	4620      	mov	r0, r4
   b75ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b75f0:	6803      	ldr	r3, [r0, #0]
   b75f2:	691b      	ldr	r3, [r3, #16]
   b75f4:	4798      	blx	r3
   b75f6:	2800      	cmp	r0, #0
   b75f8:	d1e3      	bne.n	b75c2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b75fa:	f04f 34ff 	mov.w	r4, #4294967295
   b75fe:	e7f5      	b.n	b75ec <_ZN9TCPClient4readEPhj+0x40>

000b7600 <_ZN9TCPClient12flush_bufferEv>:
   b7600:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7602:	2300      	movs	r3, #0
   b7604:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7608:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b760a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b760e:	4770      	bx	lr

000b7610 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7614:	461f      	mov	r7, r3
    stop();
   b7616:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7618:	460c      	mov	r4, r1
    stop();
   b761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b761c:	b08a      	sub	sp, #40	; 0x28
   b761e:	4605      	mov	r5, r0
   b7620:	4616      	mov	r6, r2
    stop();
   b7622:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7624:	7d23      	ldrb	r3, [r4, #20]
   b7626:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b762a:	2b04      	cmp	r3, #4
   b762c:	bf0c      	ite	eq
   b762e:	2002      	moveq	r0, #2
   b7630:	200a      	movne	r0, #10
   b7632:	2206      	movs	r2, #6
   b7634:	2101      	movs	r1, #1
   b7636:	f7fe fc7f 	bl	b5f38 <sock_socket>
   b763a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b763e:	696b      	ldr	r3, [r5, #20]
   b7640:	681b      	ldr	r3, [r3, #0]
   b7642:	2b00      	cmp	r3, #0
   b7644:	da08      	bge.n	b7658 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7646:	682b      	ldr	r3, [r5, #0]
   b7648:	4628      	mov	r0, r5
   b764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b764c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b764e:	4798      	blx	r3
}
   b7650:	4620      	mov	r0, r4
   b7652:	b00a      	add	sp, #40	; 0x28
   b7654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7658:	4628      	mov	r0, r5
   b765a:	f7ff ffd1 	bl	b7600 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b765e:	b1b7      	cbz	r7, b768e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7660:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7662:	a903      	add	r1, sp, #12
   b7664:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7666:	9303      	str	r3, [sp, #12]
   b7668:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b766c:	f7fe fb64 	bl	b5d38 <if_index_to_name>
   b7670:	2800      	cmp	r0, #0
   b7672:	d1e8      	bne.n	b7646 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7674:	6968      	ldr	r0, [r5, #20]
   b7676:	2306      	movs	r3, #6
   b7678:	9300      	str	r3, [sp, #0]
   b767a:	6800      	ldr	r0, [r0, #0]
   b767c:	ab03      	add	r3, sp, #12
   b767e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7682:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7686:	f7fe fc2f 	bl	b5ee8 <sock_setsockopt>
   b768a:	2800      	cmp	r0, #0
   b768c:	d1db      	bne.n	b7646 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b768e:	221c      	movs	r2, #28
   b7690:	2100      	movs	r1, #0
   b7692:	a803      	add	r0, sp, #12
   b7694:	f000 fdd3 	bl	b823e <memset>
    if (ip.version() == 4) {
   b7698:	7d23      	ldrb	r3, [r4, #20]
   b769a:	2b04      	cmp	r3, #4
   b769c:	d11d      	bne.n	b76da <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b769e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b76a2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b76a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b76a8:	f7fe fb9e 	bl	b5de8 <inet_htons>
   b76ac:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b76b0:	6860      	ldr	r0, [r4, #4]
   b76b2:	f7fe fb91 	bl	b5dd8 <inet_htonl>
   b76b6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b76b8:	696b      	ldr	r3, [r5, #20]
   b76ba:	221c      	movs	r2, #28
   b76bc:	6818      	ldr	r0, [r3, #0]
   b76be:	a903      	add	r1, sp, #12
   b76c0:	f7fe fc22 	bl	b5f08 <sock_connect>
   b76c4:	2800      	cmp	r0, #0
   b76c6:	d1be      	bne.n	b7646 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b76c8:	3404      	adds	r4, #4
   b76ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b76cc:	696d      	ldr	r5, [r5, #20]
   b76ce:	358c      	adds	r5, #140	; 0x8c
   b76d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b76d2:	6823      	ldr	r3, [r4, #0]
   b76d4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b76d6:	2401      	movs	r4, #1
   b76d8:	e7ba      	b.n	b7650 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b76da:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b76de:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b76e0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b76e4:	f7fe fb80 	bl	b5de8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b76e8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b76ea:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b76ee:	1d23      	adds	r3, r4, #4
   b76f0:	f104 0714 	add.w	r7, r4, #20
   b76f4:	6818      	ldr	r0, [r3, #0]
   b76f6:	6859      	ldr	r1, [r3, #4]
   b76f8:	4632      	mov	r2, r6
   b76fa:	c203      	stmia	r2!, {r0, r1}
   b76fc:	3308      	adds	r3, #8
   b76fe:	42bb      	cmp	r3, r7
   b7700:	4616      	mov	r6, r2
   b7702:	d1f7      	bne.n	b76f4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7704:	e7d8      	b.n	b76b8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7708 <_ZN9TCPClient9availableEv>:
{
   b7708:	b530      	push	{r4, r5, lr}
   b770a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b770c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7710:	b08b      	sub	sp, #44	; 0x2c
   b7712:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7714:	b12b      	cbz	r3, b7722 <_ZN9TCPClient9availableEv+0x1a>
   b7716:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b771a:	429a      	cmp	r2, r3
   b771c:	d101      	bne.n	b7722 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b771e:	f7ff ff6f 	bl	b7600 <_ZN9TCPClient12flush_bufferEv>
   b7722:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7724:	6808      	ldr	r0, [r1, #0]
   b7726:	2800      	cmp	r0, #0
   b7728:	db18      	blt.n	b775c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b772a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b772e:	2d7f      	cmp	r5, #127	; 0x7f
   b7730:	d814      	bhi.n	b775c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7732:	3104      	adds	r1, #4
   b7734:	2308      	movs	r3, #8
   b7736:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b773a:	4429      	add	r1, r5
   b773c:	f7fe fbec 	bl	b5f18 <sock_recv>
            if (ret > 0) {
   b7740:	2800      	cmp	r0, #0
   b7742:	dd13      	ble.n	b776c <_ZN9TCPClient9availableEv+0x64>
   b7744:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7746:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b774a:	b90a      	cbnz	r2, b7750 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b774c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7750:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7752:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7756:	4410      	add	r0, r2
   b7758:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b775c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b775e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7762:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7766:	1ac0      	subs	r0, r0, r3
   b7768:	b00b      	add	sp, #44	; 0x2c
   b776a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b776c:	f7fe fd48 	bl	b6200 <__errno>
   b7770:	6803      	ldr	r3, [r0, #0]
   b7772:	2b0b      	cmp	r3, #11
   b7774:	d0f2      	beq.n	b775c <_ZN9TCPClient9availableEv+0x54>
   b7776:	f7fe fd43 	bl	b6200 <__errno>
   b777a:	6803      	ldr	r3, [r0, #0]
   b777c:	2b0b      	cmp	r3, #11
   b777e:	d0ed      	beq.n	b775c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7780:	2320      	movs	r3, #32
   b7782:	2500      	movs	r5, #0
   b7784:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7788:	f7fe fd3a 	bl	b6200 <__errno>
   b778c:	6803      	ldr	r3, [r0, #0]
   b778e:	9301      	str	r3, [sp, #4]
   b7790:	4b08      	ldr	r3, [pc, #32]	; (b77b4 <_ZN9TCPClient9availableEv+0xac>)
   b7792:	4909      	ldr	r1, [pc, #36]	; (b77b8 <_ZN9TCPClient9availableEv+0xb0>)
   b7794:	9300      	str	r3, [sp, #0]
   b7796:	aa02      	add	r2, sp, #8
   b7798:	462b      	mov	r3, r5
   b779a:	2032      	movs	r0, #50	; 0x32
   b779c:	f7fe fc14 	bl	b5fc8 <log_message>
                    sock_close(d_->sock);
   b77a0:	6963      	ldr	r3, [r4, #20]
   b77a2:	6818      	ldr	r0, [r3, #0]
   b77a4:	f7fe fba8 	bl	b5ef8 <sock_close>
   b77a8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b77aa:	f04f 32ff 	mov.w	r2, #4294967295
   b77ae:	601a      	str	r2, [r3, #0]
   b77b0:	e7d4      	b.n	b775c <_ZN9TCPClient9availableEv+0x54>
   b77b2:	bf00      	nop
   b77b4:	000ba6db 	.word	0x000ba6db
   b77b8:	000ba6d4 	.word	0x000ba6d4

000b77bc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b77bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b77be:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b77c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b77c2:	6818      	ldr	r0, [r3, #0]
   b77c4:	2800      	cmp	r0, #0
   b77c6:	db01      	blt.n	b77cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b77c8:	f7fe fb96 	bl	b5ef8 <sock_close>
   b77cc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b77ce:	f04f 32ff 	mov.w	r2, #4294967295
   b77d2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b77d4:	6960      	ldr	r0, [r4, #20]
   b77d6:	2211      	movs	r2, #17
   b77d8:	2100      	movs	r1, #0
   b77da:	308c      	adds	r0, #140	; 0x8c
   b77dc:	f000 fd2f 	bl	b823e <memset>
    flush_buffer();
   b77e0:	4620      	mov	r0, r4
}
   b77e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b77e6:	f7ff bf0b 	b.w	b7600 <_ZN9TCPClient12flush_bufferEv>

000b77ea <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b77ea:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b77ec:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b77ee:	4604      	mov	r4, r0
          total(0) {
   b77f0:	6001      	str	r1, [r0, #0]
   b77f2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b77f6:	3088      	adds	r0, #136	; 0x88
   b77f8:	f7ff fbce 	bl	b6f98 <_ZN9IPAddressC1Ev>
}
   b77fc:	4620      	mov	r0, r4
   b77fe:	bd10      	pop	{r4, pc}

000b7800 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7800:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7802:	2300      	movs	r3, #0
   b7804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7808:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b780c:	4a0e      	ldr	r2, [pc, #56]	; (b7848 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b780e:	6103      	str	r3, [r0, #16]
   b7810:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7812:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7814:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7816:	20ac      	movs	r0, #172	; 0xac
   b7818:	9101      	str	r1, [sp, #4]
   b781a:	f7fd f94e 	bl	b4aba <_Znwj>
	  auto __pi = ::new (__mem)
   b781e:	1e05      	subs	r5, r0, #0
   b7820:	f105 060c 	add.w	r6, r5, #12
   b7824:	d008      	beq.n	b7838 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7826:	2301      	movs	r3, #1
   b7828:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b782c:	4b07      	ldr	r3, [pc, #28]	; (b784c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b782e:	9901      	ldr	r1, [sp, #4]
   b7830:	602b      	str	r3, [r5, #0]
   b7832:	4630      	mov	r0, r6
   b7834:	f7ff ffd9 	bl	b77ea <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7838:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b783a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b783e:	f7ff fedf 	bl	b7600 <_ZN9TCPClient12flush_bufferEv>
}
   b7842:	b002      	add	sp, #8
   b7844:	bd70      	pop	{r4, r5, r6, pc}
   b7846:	bf00      	nop
   b7848:	000ba710 	.word	0x000ba710
   b784c:	000ba6f4 	.word	0x000ba6f4

000b7850 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7850:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7852:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7856:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7858:	f7ff ffd2 	bl	b7800 <_ZN9TCPClientC1Ei>
}
   b785c:	4620      	mov	r0, r4
   b785e:	bd10      	pop	{r4, pc}

000b7860 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7860:	b510      	push	{r4, lr}
   b7862:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7864:	6800      	ldr	r0, [r0, #0]
   b7866:	2800      	cmp	r0, #0
   b7868:	db01      	blt.n	b786e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b786a:	f7fe fb45 	bl	b5ef8 <sock_close>
    }
}
   b786e:	4620      	mov	r0, r4
   b7870:	bd10      	pop	{r4, pc}

000b7872 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7872:	300c      	adds	r0, #12
   b7874:	f7ff bff4 	b.w	b7860 <_ZN9TCPClient4DataD1Ev>

000b7878 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7878:	2200      	movs	r2, #0
   b787a:	6840      	ldr	r0, [r0, #4]
   b787c:	4611      	mov	r1, r2
   b787e:	f7fe bc07 	b.w	b6090 <network_ready>

000b7882 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7882:	2200      	movs	r2, #0
   b7884:	6840      	ldr	r0, [r0, #4]
   b7886:	4611      	mov	r1, r2
   b7888:	f7fe bc22 	b.w	b60d0 <network_listening>

000b788c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b788c:	2200      	movs	r2, #0
   b788e:	6840      	ldr	r0, [r0, #4]
   b7890:	4611      	mov	r1, r2
   b7892:	f7fe bc2d 	b.w	b60f0 <network_get_listen_timeout>

000b7896 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7896:	6840      	ldr	r0, [r0, #4]
   b7898:	2200      	movs	r2, #0
   b789a:	f7fe bc21 	b.w	b60e0 <network_set_listen_timeout>

000b789e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b789e:	6840      	ldr	r0, [r0, #4]
   b78a0:	2200      	movs	r2, #0
   b78a2:	f081 0101 	eor.w	r1, r1, #1
   b78a6:	f7fe bc0b 	b.w	b60c0 <network_listen>

000b78aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b78aa:	2300      	movs	r3, #0
   b78ac:	6840      	ldr	r0, [r0, #4]
   b78ae:	461a      	mov	r2, r3
   b78b0:	4619      	mov	r1, r3
   b78b2:	f7fe bbfd 	b.w	b60b0 <network_off>

000b78b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b78b6:	2300      	movs	r3, #0
   b78b8:	6840      	ldr	r0, [r0, #4]
   b78ba:	461a      	mov	r2, r3
   b78bc:	4619      	mov	r1, r3
   b78be:	f7fe bbef 	b.w	b60a0 <network_on>

000b78c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b78c2:	2200      	movs	r2, #0
   b78c4:	6840      	ldr	r0, [r0, #4]
   b78c6:	4611      	mov	r1, r2
   b78c8:	f7fe bbd2 	b.w	b6070 <network_connecting>

000b78cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b78cc:	6840      	ldr	r0, [r0, #4]
   b78ce:	2200      	movs	r2, #0
   b78d0:	2102      	movs	r1, #2
   b78d2:	f7fe bbd5 	b.w	b6080 <network_disconnect>

000b78d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b78d6:	2300      	movs	r3, #0
   b78d8:	6840      	ldr	r0, [r0, #4]
   b78da:	461a      	mov	r2, r3
   b78dc:	f7fe bbc0 	b.w	b6060 <network_connect>

000b78e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b78e0:	4b02      	ldr	r3, [pc, #8]	; (b78ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b78e2:	2204      	movs	r2, #4
   b78e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b78e6:	4a02      	ldr	r2, [pc, #8]	; (b78f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b78e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b78ea:	4770      	bx	lr
   b78ec:	2003e710 	.word	0x2003e710
   b78f0:	000ba75c 	.word	0x000ba75c

000b78f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b78f4:	2300      	movs	r3, #0
   b78f6:	6840      	ldr	r0, [r0, #4]
   b78f8:	461a      	mov	r2, r3
   b78fa:	f7fe bbb1 	b.w	b6060 <network_connect>

000b78fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b78fe:	6840      	ldr	r0, [r0, #4]
   b7900:	2200      	movs	r2, #0
   b7902:	2102      	movs	r1, #2
   b7904:	f7fe bbbc 	b.w	b6080 <network_disconnect>

000b7908 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7908:	2200      	movs	r2, #0
   b790a:	6840      	ldr	r0, [r0, #4]
   b790c:	4611      	mov	r1, r2
   b790e:	f7fe bbaf 	b.w	b6070 <network_connecting>

000b7912 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7912:	2200      	movs	r2, #0
   b7914:	6840      	ldr	r0, [r0, #4]
   b7916:	4611      	mov	r1, r2
   b7918:	f7fe bbba 	b.w	b6090 <network_ready>

000b791c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b791c:	2300      	movs	r3, #0
   b791e:	6840      	ldr	r0, [r0, #4]
   b7920:	461a      	mov	r2, r3
   b7922:	4619      	mov	r1, r3
   b7924:	f7fe bbbc 	b.w	b60a0 <network_on>

000b7928 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7928:	2300      	movs	r3, #0
   b792a:	6840      	ldr	r0, [r0, #4]
   b792c:	461a      	mov	r2, r3
   b792e:	4619      	mov	r1, r3
   b7930:	f7fe bbbe 	b.w	b60b0 <network_off>

000b7934 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7934:	6840      	ldr	r0, [r0, #4]
   b7936:	2100      	movs	r1, #0
   b7938:	f7fe bbe2 	b.w	b6100 <network_is_on>

000b793c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b793c:	6840      	ldr	r0, [r0, #4]
   b793e:	2100      	movs	r1, #0
   b7940:	f7fe bbe6 	b.w	b6110 <network_is_off>

000b7944 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7944:	6840      	ldr	r0, [r0, #4]
   b7946:	2200      	movs	r2, #0
   b7948:	f081 0101 	eor.w	r1, r1, #1
   b794c:	f7fe bbb8 	b.w	b60c0 <network_listen>

000b7950 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7950:	6840      	ldr	r0, [r0, #4]
   b7952:	2200      	movs	r2, #0
   b7954:	f7fe bbc4 	b.w	b60e0 <network_set_listen_timeout>

000b7958 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7958:	2200      	movs	r2, #0
   b795a:	6840      	ldr	r0, [r0, #4]
   b795c:	4611      	mov	r1, r2
   b795e:	f7fe bbc7 	b.w	b60f0 <network_get_listen_timeout>

000b7962 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7962:	2200      	movs	r2, #0
   b7964:	6840      	ldr	r0, [r0, #4]
   b7966:	4611      	mov	r1, r2
   b7968:	f7fe bbb2 	b.w	b60d0 <network_listening>

000b796c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b796c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7970:	b095      	sub	sp, #84	; 0x54
   b7972:	4614      	mov	r4, r2
   b7974:	460d      	mov	r5, r1
   b7976:	4607      	mov	r7, r0
    IPAddress addr;
   b7978:	f7ff fb0e 	bl	b6f98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b797c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b797e:	221c      	movs	r2, #28
   b7980:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7982:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7984:	f000 fc5b 	bl	b823e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7988:	2340      	movs	r3, #64	; 0x40
   b798a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b798c:	4620      	mov	r0, r4
   b798e:	466b      	mov	r3, sp
   b7990:	aa0c      	add	r2, sp, #48	; 0x30
   b7992:	2100      	movs	r1, #0
   b7994:	f7fe f9b0 	bl	b5cf8 <netdb_getaddrinfo>
    if (!r) {
   b7998:	4604      	mov	r4, r0
   b799a:	2800      	cmp	r0, #0
   b799c:	d14b      	bne.n	b7a36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b799e:	4602      	mov	r2, r0
   b79a0:	2101      	movs	r1, #1
   b79a2:	6868      	ldr	r0, [r5, #4]
   b79a4:	f7fe fb74 	bl	b6090 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79a8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b79aa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79ac:	4622      	mov	r2, r4
   b79ae:	6868      	ldr	r0, [r5, #4]
   b79b0:	f7fe fb6e 	bl	b6090 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79b4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b79b6:	4681      	mov	r9, r0
        bool ok = false;
   b79b8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79ba:	2e00      	cmp	r6, #0
   b79bc:	d03b      	beq.n	b7a36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b79be:	2900      	cmp	r1, #0
   b79c0:	d139      	bne.n	b7a36 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b79c2:	6873      	ldr	r3, [r6, #4]
   b79c4:	2b02      	cmp	r3, #2
   b79c6:	d003      	beq.n	b79d0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b79c8:	2b0a      	cmp	r3, #10
   b79ca:	d011      	beq.n	b79f0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b79cc:	69f6      	ldr	r6, [r6, #28]
   b79ce:	e7f4      	b.n	b79ba <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b79d0:	f1b8 0f00 	cmp.w	r8, #0
   b79d4:	d0fa      	beq.n	b79cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b79d6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b79d8:	a806      	add	r0, sp, #24
   b79da:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b79dc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b79de:	f7ff fb1f 	bl	b7020 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b79e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b79e4:	1d3c      	adds	r4, r7, #4
   b79e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b79e8:	682b      	ldr	r3, [r5, #0]
   b79ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b79ec:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b79ee:	e7ed      	b.n	b79cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b79f0:	f1b9 0f00 	cmp.w	r9, #0
   b79f4:	d0ea      	beq.n	b79cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b79f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b79f8:	2210      	movs	r2, #16
   b79fa:	a801      	add	r0, sp, #4
   b79fc:	f000 fc1f 	bl	b823e <memset>
                    a.v = 6;
   b7a00:	2306      	movs	r3, #6
   b7a02:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7a06:	ad01      	add	r5, sp, #4
   b7a08:	f104 0308 	add.w	r3, r4, #8
   b7a0c:	3418      	adds	r4, #24
   b7a0e:	6818      	ldr	r0, [r3, #0]
   b7a10:	6859      	ldr	r1, [r3, #4]
   b7a12:	462a      	mov	r2, r5
   b7a14:	c203      	stmia	r2!, {r0, r1}
   b7a16:	3308      	adds	r3, #8
   b7a18:	42a3      	cmp	r3, r4
   b7a1a:	4615      	mov	r5, r2
   b7a1c:	d1f7      	bne.n	b7a0e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7a1e:	a901      	add	r1, sp, #4
   b7a20:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7a22:	ad07      	add	r5, sp, #28
   b7a24:	f7ff fac6 	bl	b6fb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7a2a:	1d3c      	adds	r4, r7, #4
   b7a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7a2e:	682b      	ldr	r3, [r5, #0]
   b7a30:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7a32:	4649      	mov	r1, r9
   b7a34:	e7ca      	b.n	b79cc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7a36:	9800      	ldr	r0, [sp, #0]
   b7a38:	f7fe f956 	bl	b5ce8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7a3c:	4638      	mov	r0, r7
   b7a3e:	b015      	add	sp, #84	; 0x54
   b7a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7a44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7a44:	4b02      	ldr	r3, [pc, #8]	; (b7a50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7a46:	4a03      	ldr	r2, [pc, #12]	; (b7a54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7a48:	601a      	str	r2, [r3, #0]
   b7a4a:	2200      	movs	r2, #0
   b7a4c:	605a      	str	r2, [r3, #4]

} // spark
   b7a4e:	4770      	bx	lr
   b7a50:	2003e718 	.word	0x2003e718
   b7a54:	000ba798 	.word	0x000ba798

000b7a58 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7a58:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7a5a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7a5c:	d902      	bls.n	b7a64 <pinAvailable+0xc>
    return false;
   b7a5e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7a60:	b002      	add	sp, #8
   b7a62:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7a64:	f1a0 030b 	sub.w	r3, r0, #11
   b7a68:	2b02      	cmp	r3, #2
   b7a6a:	d81a      	bhi.n	b7aa2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7a6c:	4c17      	ldr	r4, [pc, #92]	; (b7acc <pinAvailable+0x74>)
   b7a6e:	7821      	ldrb	r1, [r4, #0]
   b7a70:	f3bf 8f5b 	dmb	ish
   b7a74:	f011 0101 	ands.w	r1, r1, #1
   b7a78:	d10b      	bne.n	b7a92 <pinAvailable+0x3a>
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	9101      	str	r1, [sp, #4]
   b7a7e:	f7fd f826 	bl	b4ace <__cxa_guard_acquire>
   b7a82:	9901      	ldr	r1, [sp, #4]
   b7a84:	b128      	cbz	r0, b7a92 <pinAvailable+0x3a>
   b7a86:	4812      	ldr	r0, [pc, #72]	; (b7ad0 <pinAvailable+0x78>)
   b7a88:	f7fe fc18 	bl	b62bc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7a8c:	4620      	mov	r0, r4
   b7a8e:	f7fd f823 	bl	b4ad8 <__cxa_guard_release>
   b7a92:	4b0f      	ldr	r3, [pc, #60]	; (b7ad0 <pinAvailable+0x78>)
   b7a94:	7818      	ldrb	r0, [r3, #0]
   b7a96:	f7fe fa5f 	bl	b5f58 <hal_spi_is_enabled>
   b7a9a:	2800      	cmp	r0, #0
   b7a9c:	d1df      	bne.n	b7a5e <pinAvailable+0x6>
  return true; // 'pin' is available
   b7a9e:	2001      	movs	r0, #1
   b7aa0:	e7de      	b.n	b7a60 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7aa2:	2801      	cmp	r0, #1
   b7aa4:	d809      	bhi.n	b7aba <pinAvailable+0x62>
   b7aa6:	f000 f87d 	bl	b7ba4 <_Z19__fetch_global_Wirev>
   b7aaa:	2100      	movs	r1, #0
   b7aac:	7c00      	ldrb	r0, [r0, #16]
   b7aae:	f7fe fa0b 	bl	b5ec8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7ab2:	f080 0001 	eor.w	r0, r0, #1
   b7ab6:	b2c0      	uxtb	r0, r0
   b7ab8:	e7d2      	b.n	b7a60 <pinAvailable+0x8>
   b7aba:	3809      	subs	r0, #9
   b7abc:	2801      	cmp	r0, #1
   b7abe:	d8ee      	bhi.n	b7a9e <pinAvailable+0x46>
   b7ac0:	f000 f834 	bl	b7b2c <_Z22__fetch_global_Serial1v>
   b7ac4:	7c00      	ldrb	r0, [r0, #16]
   b7ac6:	f7fe f9bf 	bl	b5e48 <hal_usart_is_enabled>
   b7aca:	e7f2      	b.n	b7ab2 <pinAvailable+0x5a>
   b7acc:	2003e720 	.word	0x2003e720
   b7ad0:	2003e724 	.word	0x2003e724

000b7ad4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7ad4:	2823      	cmp	r0, #35	; 0x23
{
   b7ad6:	b538      	push	{r3, r4, r5, lr}
   b7ad8:	4604      	mov	r4, r0
   b7ada:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7adc:	d80a      	bhi.n	b7af4 <pinMode+0x20>
   b7ade:	29ff      	cmp	r1, #255	; 0xff
   b7ae0:	d008      	beq.n	b7af4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7ae2:	f7ff ffb9 	bl	b7a58 <pinAvailable>
   b7ae6:	b128      	cbz	r0, b7af4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7ae8:	4629      	mov	r1, r5
   b7aea:	4620      	mov	r0, r4
}
   b7aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7af0:	f7fe b90a 	b.w	b5d08 <hal_gpio_mode>
}
   b7af4:	bd38      	pop	{r3, r4, r5, pc}

000b7af6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7af6:	4770      	bx	lr

000b7af8 <_Z20acquireSerial1Bufferv>:
{
   b7af8:	b538      	push	{r3, r4, r5, lr}
   b7afa:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7afc:	2514      	movs	r5, #20
   b7afe:	462a      	mov	r2, r5
   b7b00:	2100      	movs	r1, #0
   b7b02:	f000 fb9c 	bl	b823e <memset>
   b7b06:	8025      	strh	r5, [r4, #0]
   b7b08:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b0a:	4907      	ldr	r1, [pc, #28]	; (b7b28 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7b0c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b0e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7b10:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b12:	f000 f86b 	bl	b7bec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b16:	4904      	ldr	r1, [pc, #16]	; (b7b28 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7b18:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7b1a:	4628      	mov	r0, r5
   b7b1c:	f000 f866 	bl	b7bec <_ZnajRKSt9nothrow_t>
    };
   b7b20:	60e0      	str	r0, [r4, #12]
}
   b7b22:	4620      	mov	r0, r4
   b7b24:	bd38      	pop	{r3, r4, r5, pc}
   b7b26:	bf00      	nop
   b7b28:	000ba7cc 	.word	0x000ba7cc

000b7b2c <_Z22__fetch_global_Serial1v>:
{
   b7b2c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b2e:	4d0e      	ldr	r5, [pc, #56]	; (b7b68 <_Z22__fetch_global_Serial1v+0x3c>)
   b7b30:	7829      	ldrb	r1, [r5, #0]
   b7b32:	f3bf 8f5b 	dmb	ish
   b7b36:	f011 0401 	ands.w	r4, r1, #1
{
   b7b3a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7b3c:	d111      	bne.n	b7b62 <_Z22__fetch_global_Serial1v+0x36>
   b7b3e:	4628      	mov	r0, r5
   b7b40:	f7fc ffc5 	bl	b4ace <__cxa_guard_acquire>
   b7b44:	b168      	cbz	r0, b7b62 <_Z22__fetch_global_Serial1v+0x36>
   b7b46:	a801      	add	r0, sp, #4
   b7b48:	f7ff ffd6 	bl	b7af8 <_Z20acquireSerial1Bufferv>
   b7b4c:	aa01      	add	r2, sp, #4
   b7b4e:	4621      	mov	r1, r4
   b7b50:	4806      	ldr	r0, [pc, #24]	; (b7b6c <_Z22__fetch_global_Serial1v+0x40>)
   b7b52:	f7ff fb5f 	bl	b7214 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7b56:	4628      	mov	r0, r5
   b7b58:	f7fc ffbe 	bl	b4ad8 <__cxa_guard_release>
   b7b5c:	4804      	ldr	r0, [pc, #16]	; (b7b70 <_Z22__fetch_global_Serial1v+0x44>)
   b7b5e:	f000 fb19 	bl	b8194 <atexit>
    return serial1;
}
   b7b62:	4802      	ldr	r0, [pc, #8]	; (b7b6c <_Z22__fetch_global_Serial1v+0x40>)
   b7b64:	b007      	add	sp, #28
   b7b66:	bd30      	pop	{r4, r5, pc}
   b7b68:	2003e72c 	.word	0x2003e72c
   b7b6c:	2003e730 	.word	0x2003e730
   b7b70:	000b7af7 	.word	0x000b7af7

000b7b74 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7b74:	4770      	bx	lr
	...

000b7b78 <_Z17acquireWireBufferv>:
{
   b7b78:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7b7a:	2520      	movs	r5, #32
   b7b7c:	2314      	movs	r3, #20
{
   b7b7e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7b80:	6003      	str	r3, [r0, #0]
   b7b82:	6085      	str	r5, [r0, #8]
   b7b84:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7b86:	4906      	ldr	r1, [pc, #24]	; (b7ba0 <_Z17acquireWireBufferv+0x28>)
   b7b88:	4628      	mov	r0, r5
   b7b8a:	f000 f82f 	bl	b7bec <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7b8e:	4904      	ldr	r1, [pc, #16]	; (b7ba0 <_Z17acquireWireBufferv+0x28>)
	};
   b7b90:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7b92:	4628      	mov	r0, r5
   b7b94:	f000 f82a 	bl	b7bec <_ZnajRKSt9nothrow_t>
	};
   b7b98:	60e0      	str	r0, [r4, #12]
}
   b7b9a:	4620      	mov	r0, r4
   b7b9c:	bd38      	pop	{r3, r4, r5, pc}
   b7b9e:	bf00      	nop
   b7ba0:	000ba7cc 	.word	0x000ba7cc

000b7ba4 <_Z19__fetch_global_Wirev>:
{
   b7ba4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ba6:	4d0e      	ldr	r5, [pc, #56]	; (b7be0 <_Z19__fetch_global_Wirev+0x3c>)
   b7ba8:	7829      	ldrb	r1, [r5, #0]
   b7baa:	f3bf 8f5b 	dmb	ish
   b7bae:	f011 0401 	ands.w	r4, r1, #1
{
   b7bb2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7bb4:	d111      	bne.n	b7bda <_Z19__fetch_global_Wirev+0x36>
   b7bb6:	4628      	mov	r0, r5
   b7bb8:	f7fc ff89 	bl	b4ace <__cxa_guard_acquire>
   b7bbc:	b168      	cbz	r0, b7bda <_Z19__fetch_global_Wirev+0x36>
   b7bbe:	a801      	add	r0, sp, #4
   b7bc0:	f7ff ffda 	bl	b7b78 <_Z17acquireWireBufferv>
   b7bc4:	aa01      	add	r2, sp, #4
   b7bc6:	4621      	mov	r1, r4
   b7bc8:	4806      	ldr	r0, [pc, #24]	; (b7be4 <_Z19__fetch_global_Wirev+0x40>)
   b7bca:	f7ff fb77 	bl	b72bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7bce:	4628      	mov	r0, r5
   b7bd0:	f7fc ff82 	bl	b4ad8 <__cxa_guard_release>
   b7bd4:	4804      	ldr	r0, [pc, #16]	; (b7be8 <_Z19__fetch_global_Wirev+0x44>)
   b7bd6:	f000 fadd 	bl	b8194 <atexit>
	return wire;
}
   b7bda:	4802      	ldr	r0, [pc, #8]	; (b7be4 <_Z19__fetch_global_Wirev+0x40>)
   b7bdc:	b007      	add	sp, #28
   b7bde:	bd30      	pop	{r4, r5, pc}
   b7be0:	2003e748 	.word	0x2003e748
   b7be4:	2003e74c 	.word	0x2003e74c
   b7be8:	000b7b75 	.word	0x000b7b75

000b7bec <_ZnajRKSt9nothrow_t>:
   b7bec:	f7fc bf67 	b.w	b4abe <_Znaj>

000b7bf0 <_ZSt17__throw_bad_allocv>:
   b7bf0:	b508      	push	{r3, lr}
   b7bf2:	f7fe faf5 	bl	b61e0 <abort>

000b7bf6 <_ZSt19__throw_logic_errorPKc>:
   b7bf6:	b508      	push	{r3, lr}
   b7bf8:	f7fe faf2 	bl	b61e0 <abort>

000b7bfc <_ZSt20__throw_length_errorPKc>:
   b7bfc:	b508      	push	{r3, lr}
   b7bfe:	f7fe faef 	bl	b61e0 <abort>

000b7c02 <_ZSt24__throw_out_of_range_fmtPKcz>:
   b7c02:	b40f      	push	{r0, r1, r2, r3}
   b7c04:	b580      	push	{r7, lr}
   b7c06:	b084      	sub	sp, #16
   b7c08:	af00      	add	r7, sp, #0
   b7c0a:	f107 0418 	add.w	r4, r7, #24
   b7c0e:	f854 2b04 	ldr.w	r2, [r4], #4
   b7c12:	607a      	str	r2, [r7, #4]
   b7c14:	4610      	mov	r0, r2
   b7c16:	f7fc fef5 	bl	b4a04 <strlen>
   b7c1a:	f200 2307 	addw	r3, r0, #519	; 0x207
   b7c1e:	f023 0307 	bic.w	r3, r3, #7
   b7c22:	ebad 0d03 	sub.w	sp, sp, r3
   b7c26:	f500 7100 	add.w	r1, r0, #512	; 0x200
   b7c2a:	687a      	ldr	r2, [r7, #4]
   b7c2c:	60fc      	str	r4, [r7, #12]
   b7c2e:	4623      	mov	r3, r4
   b7c30:	4668      	mov	r0, sp
   b7c32:	f000 f85d 	bl	b7cf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   b7c36:	f7fe fad3 	bl	b61e0 <abort>

000b7c3a <_ZSt25__throw_bad_function_callv>:
   b7c3a:	b508      	push	{r3, lr}
   b7c3c:	f7fe fad0 	bl	b61e0 <abort>

000b7c40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7c40:	4901      	ldr	r1, [pc, #4]	; (b7c48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7c42:	f000 ba91 	b.w	b8168 <_ZNKSt9type_infoeqERKS_>
   b7c46:	bf00      	nop
   b7c48:	000ba7e8 	.word	0x000ba7e8

000b7c4c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   b7c4c:	b580      	push	{r7, lr}
   b7c4e:	b09c      	sub	sp, #112	; 0x70
   b7c50:	4606      	mov	r6, r0
   b7c52:	af00      	add	r7, sp, #0
   b7c54:	460c      	mov	r4, r1
   b7c56:	1ba4      	subs	r4, r4, r6
   b7c58:	490e      	ldr	r1, [pc, #56]	; (b7c94 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   b7c5a:	2269      	movs	r2, #105	; 0x69
   b7c5c:	1d38      	adds	r0, r7, #4
   b7c5e:	f000 fac6 	bl	b81ee <memcpy>
   b7c62:	f104 0370 	add.w	r3, r4, #112	; 0x70
   b7c66:	f023 0307 	bic.w	r3, r3, #7
   b7c6a:	ebad 0d03 	sub.w	sp, sp, r3
   b7c6e:	466d      	mov	r5, sp
   b7c70:	2268      	movs	r2, #104	; 0x68
   b7c72:	1d39      	adds	r1, r7, #4
   b7c74:	4628      	mov	r0, r5
   b7c76:	f000 faba 	bl	b81ee <memcpy>
   b7c7a:	4622      	mov	r2, r4
   b7c7c:	4631      	mov	r1, r6
   b7c7e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   b7c82:	442c      	add	r4, r5
   b7c84:	f000 fab3 	bl	b81ee <memcpy>
   b7c88:	2300      	movs	r3, #0
   b7c8a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   b7c8e:	4628      	mov	r0, r5
   b7c90:	f7ff ffb1 	bl	b7bf6 <_ZSt19__throw_logic_errorPKc>
   b7c94:	000ba7f0 	.word	0x000ba7f0

000b7c98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   b7c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c9c:	af00      	add	r7, sp, #0
   b7c9e:	b084      	sub	sp, #16
   b7ca0:	466d      	mov	r5, sp
   b7ca2:	f105 040c 	add.w	r4, r5, #12
   b7ca6:	f8df 8044 	ldr.w	r8, [pc, #68]	; b7cec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   b7caa:	4623      	mov	r3, r4
   b7cac:	f04f 0c0a 	mov.w	ip, #10
   b7cb0:	fbb2 f6fc 	udiv	r6, r2, ip
   b7cb4:	fb0c 2e16 	mls	lr, ip, r6, r2
   b7cb8:	f818 e00e 	ldrb.w	lr, [r8, lr]
   b7cbc:	f803 ed01 	strb.w	lr, [r3, #-1]!
   b7cc0:	4696      	mov	lr, r2
   b7cc2:	f1be 0f09 	cmp.w	lr, #9
   b7cc6:	4632      	mov	r2, r6
   b7cc8:	d8f2      	bhi.n	b7cb0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   b7cca:	1ae4      	subs	r4, r4, r3
   b7ccc:	428c      	cmp	r4, r1
   b7cce:	d809      	bhi.n	b7ce4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   b7cd0:	f1c4 030c 	rsb	r3, r4, #12
   b7cd4:	4622      	mov	r2, r4
   b7cd6:	18e9      	adds	r1, r5, r3
   b7cd8:	f000 fa89 	bl	b81ee <memcpy>
   b7cdc:	4620      	mov	r0, r4
   b7cde:	46bd      	mov	sp, r7
   b7ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7ce4:	f04f 34ff 	mov.w	r4, #4294967295
   b7ce8:	e7f8      	b.n	b7cdc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   b7cea:	bf00      	nop
   b7cec:	000ba859 	.word	0x000ba859

000b7cf0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   b7cf0:	3901      	subs	r1, #1
   b7cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7cf6:	4607      	mov	r7, r0
   b7cf8:	4615      	mov	r5, r2
   b7cfa:	eb00 0801 	add.w	r8, r0, r1
   b7cfe:	4604      	mov	r4, r0
   b7d00:	782a      	ldrb	r2, [r5, #0]
   b7d02:	b392      	cbz	r2, b7d6a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   b7d04:	4544      	cmp	r4, r8
   b7d06:	d22a      	bcs.n	b7d5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b7d08:	2a25      	cmp	r2, #37	; 0x25
   b7d0a:	d107      	bne.n	b7d1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7d0c:	786a      	ldrb	r2, [r5, #1]
   b7d0e:	2a73      	cmp	r2, #115	; 0x73
   b7d10:	d009      	beq.n	b7d26 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   b7d12:	2a7a      	cmp	r2, #122	; 0x7a
   b7d14:	d012      	beq.n	b7d3c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   b7d16:	2a25      	cmp	r2, #37	; 0x25
   b7d18:	d100      	bne.n	b7d1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7d1a:	3501      	adds	r5, #1
   b7d1c:	f815 2b01 	ldrb.w	r2, [r5], #1
   b7d20:	f804 2b01 	strb.w	r2, [r4], #1
   b7d24:	e7ec      	b.n	b7d00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7d26:	f853 2b04 	ldr.w	r2, [r3], #4
   b7d2a:	3a01      	subs	r2, #1
   b7d2c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   b7d30:	b1c9      	cbz	r1, b7d66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   b7d32:	4544      	cmp	r4, r8
   b7d34:	d013      	beq.n	b7d5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b7d36:	f804 1b01 	strb.w	r1, [r4], #1
   b7d3a:	e7f7      	b.n	b7d2c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   b7d3c:	78aa      	ldrb	r2, [r5, #2]
   b7d3e:	2a75      	cmp	r2, #117	; 0x75
   b7d40:	d1ec      	bne.n	b7d1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   b7d42:	461e      	mov	r6, r3
   b7d44:	eba8 0104 	sub.w	r1, r8, r4
   b7d48:	f856 2b04 	ldr.w	r2, [r6], #4
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	f7ff ffa3 	bl	b7c98 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   b7d52:	2800      	cmp	r0, #0
   b7d54:	dd03      	ble.n	b7d5e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   b7d56:	4404      	add	r4, r0
   b7d58:	3503      	adds	r5, #3
   b7d5a:	4633      	mov	r3, r6
   b7d5c:	e7d0      	b.n	b7d00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7d5e:	4621      	mov	r1, r4
   b7d60:	4638      	mov	r0, r7
   b7d62:	f7ff ff73 	bl	b7c4c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   b7d66:	3502      	adds	r5, #2
   b7d68:	e7ca      	b.n	b7d00 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   b7d6a:	7022      	strb	r2, [r4, #0]
   b7d6c:	1be0      	subs	r0, r4, r7
   b7d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7d72 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b7d72:	b10a      	cbz	r2, b7d78 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b7d74:	f000 ba3b 	b.w	b81ee <memcpy>
   b7d78:	4770      	bx	lr

000b7d7a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
   b7d7a:	b10a      	cbz	r2, b7d80 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
   b7d7c:	f000 ba27 	b.w	b81ce <memcmp>
   b7d80:	4610      	mov	r0, r2
   b7d82:	4770      	bx	lr

000b7d84 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
   b7d84:	4613      	mov	r3, r2
   b7d86:	460a      	mov	r2, r1
   b7d88:	b111      	cbz	r1, b7d90 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
   b7d8a:	7819      	ldrb	r1, [r3, #0]
   b7d8c:	f7fc bde0 	b.w	b4950 <memchr>
   b7d90:	4608      	mov	r0, r1
   b7d92:	4770      	bx	lr

000b7d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b7d94:	b508      	push	{r3, lr}
   b7d96:	680b      	ldr	r3, [r1, #0]
   b7d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b7d9c:	d302      	bcc.n	b7da4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b7d9e:	480d      	ldr	r0, [pc, #52]	; (b7dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b7da0:	f7ff ff2c 	bl	b7bfc <_ZSt20__throw_length_errorPKc>
   b7da4:	4293      	cmp	r3, r2
   b7da6:	d90b      	bls.n	b7dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b7da8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b7dac:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b7db0:	d206      	bcs.n	b7dc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b7db2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b7db6:	bf2a      	itet	cs
   b7db8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b7dbc:	6008      	strcc	r0, [r1, #0]
   b7dbe:	600b      	strcs	r3, [r1, #0]
   b7dc0:	6808      	ldr	r0, [r1, #0]
   b7dc2:	3001      	adds	r0, #1
   b7dc4:	d501      	bpl.n	b7dca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b7dc6:	f7ff ff13 	bl	b7bf0 <_ZSt17__throw_bad_allocv>
   b7dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7dce:	f7fc be74 	b.w	b4aba <_Znwj>
   b7dd2:	bf00      	nop
   b7dd4:	000ba864 	.word	0x000ba864

000b7dd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b7dd8:	f850 3b08 	ldr.w	r3, [r0], #8
   b7ddc:	4283      	cmp	r3, r0
   b7dde:	d002      	beq.n	b7de6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b7de0:	4618      	mov	r0, r3
   b7de2:	f7fc be6e 	b.w	b4ac2 <_ZdlPv>
   b7de6:	4770      	bx	lr

000b7de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b7de8:	2a01      	cmp	r2, #1
   b7dea:	b410      	push	{r4}
   b7dec:	d104      	bne.n	b7df8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b7dee:	780a      	ldrb	r2, [r1, #0]
   b7df0:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7df4:	7002      	strb	r2, [r0, #0]
   b7df6:	4770      	bx	lr
   b7df8:	f85d 4b04 	ldr.w	r4, [sp], #4
   b7dfc:	f7ff bfb9 	b.w	b7d72 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b7e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
   b7e00:	2a01      	cmp	r2, #1
   b7e02:	b430      	push	{r4, r5}
   b7e04:	d103      	bne.n	b7e0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
   b7e06:	780b      	ldrb	r3, [r1, #0]
   b7e08:	7003      	strb	r3, [r0, #0]
   b7e0a:	bc30      	pop	{r4, r5}
   b7e0c:	4770      	bx	lr
   b7e0e:	2a00      	cmp	r2, #0
   b7e10:	d0fb      	beq.n	b7e0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
   b7e12:	bc30      	pop	{r4, r5}
   b7e14:	f000 b9f9 	b.w	b820a <memmove>

000b7e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b7e18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7e1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b7e1e:	461f      	mov	r7, r3
   b7e20:	6843      	ldr	r3, [r0, #4]
   b7e22:	eb01 0802 	add.w	r8, r1, r2
   b7e26:	1ab2      	subs	r2, r6, r2
   b7e28:	441a      	add	r2, r3
   b7e2a:	eba3 0908 	sub.w	r9, r3, r8
   b7e2e:	4603      	mov	r3, r0
   b7e30:	9201      	str	r2, [sp, #4]
   b7e32:	f853 2b08 	ldr.w	r2, [r3], #8
   b7e36:	429a      	cmp	r2, r3
   b7e38:	bf18      	it	ne
   b7e3a:	6882      	ldrne	r2, [r0, #8]
   b7e3c:	460d      	mov	r5, r1
   b7e3e:	bf08      	it	eq
   b7e40:	220f      	moveq	r2, #15
   b7e42:	a901      	add	r1, sp, #4
   b7e44:	4604      	mov	r4, r0
   b7e46:	f7ff ffa5 	bl	b7d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b7e4a:	4682      	mov	sl, r0
   b7e4c:	b11d      	cbz	r5, b7e56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b7e4e:	6821      	ldr	r1, [r4, #0]
   b7e50:	462a      	mov	r2, r5
   b7e52:	f7ff ffc9 	bl	b7de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7e56:	b137      	cbz	r7, b7e66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b7e58:	b12e      	cbz	r6, b7e66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b7e5a:	4632      	mov	r2, r6
   b7e5c:	4639      	mov	r1, r7
   b7e5e:	eb0a 0005 	add.w	r0, sl, r5
   b7e62:	f7ff ffc1 	bl	b7de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7e66:	f1b9 0f00 	cmp.w	r9, #0
   b7e6a:	d007      	beq.n	b7e7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b7e6c:	6821      	ldr	r1, [r4, #0]
   b7e6e:	4435      	add	r5, r6
   b7e70:	464a      	mov	r2, r9
   b7e72:	4441      	add	r1, r8
   b7e74:	eb0a 0005 	add.w	r0, sl, r5
   b7e78:	f7ff ffb6 	bl	b7de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7e7c:	4620      	mov	r0, r4
   b7e7e:	f7ff ffab 	bl	b7dd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b7e82:	9b01      	ldr	r3, [sp, #4]
   b7e84:	f8c4 a000 	str.w	sl, [r4]
   b7e88:	60a3      	str	r3, [r4, #8]
   b7e8a:	b002      	add	sp, #8
   b7e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
   b7e90:	b538      	push	{r3, r4, r5, lr}
   b7e92:	4604      	mov	r4, r0
   b7e94:	4615      	mov	r5, r2
   b7e96:	4608      	mov	r0, r1
   b7e98:	4411      	add	r1, r2
   b7e9a:	6862      	ldr	r2, [r4, #4]
   b7e9c:	1a52      	subs	r2, r2, r1
   b7e9e:	d005      	beq.n	b7eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b7ea0:	b125      	cbz	r5, b7eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
   b7ea2:	6823      	ldr	r3, [r4, #0]
   b7ea4:	4419      	add	r1, r3
   b7ea6:	4418      	add	r0, r3
   b7ea8:	f7ff ffaa 	bl	b7e00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
   b7eac:	6862      	ldr	r2, [r4, #4]
   b7eae:	6823      	ldr	r3, [r4, #0]
   b7eb0:	1b55      	subs	r5, r2, r5
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	6065      	str	r5, [r4, #4]
   b7eb6:	555a      	strb	r2, [r3, r5]
   b7eb8:	bd38      	pop	{r3, r4, r5, pc}

000b7eba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
   b7eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ebc:	4604      	mov	r4, r0
   b7ebe:	4623      	mov	r3, r4
   b7ec0:	6840      	ldr	r0, [r0, #4]
   b7ec2:	f853 6b08 	ldr.w	r6, [r3], #8
   b7ec6:	429e      	cmp	r6, r3
   b7ec8:	bf18      	it	ne
   b7eca:	68a3      	ldrne	r3, [r4, #8]
   b7ecc:	eb00 0502 	add.w	r5, r0, r2
   b7ed0:	bf08      	it	eq
   b7ed2:	230f      	moveq	r3, #15
   b7ed4:	429d      	cmp	r5, r3
   b7ed6:	d80a      	bhi.n	b7eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
   b7ed8:	b112      	cbz	r2, b7ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
   b7eda:	4430      	add	r0, r6
   b7edc:	f7ff ff84 	bl	b7de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b7ee0:	6823      	ldr	r3, [r4, #0]
   b7ee2:	6065      	str	r5, [r4, #4]
   b7ee4:	2200      	movs	r2, #0
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	555a      	strb	r2, [r3, r5]
   b7eea:	b002      	add	sp, #8
   b7eec:	bd70      	pop	{r4, r5, r6, pc}
   b7eee:	9200      	str	r2, [sp, #0]
   b7ef0:	460b      	mov	r3, r1
   b7ef2:	2200      	movs	r2, #0
   b7ef4:	4601      	mov	r1, r0
   b7ef6:	4620      	mov	r0, r4
   b7ef8:	f7ff ff8e 	bl	b7e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b7efc:	e7f0      	b.n	b7ee0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

000b7efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
   b7efe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7f02:	460e      	mov	r6, r1
   b7f04:	461d      	mov	r5, r3
   b7f06:	6841      	ldr	r1, [r0, #4]
   b7f08:	b923      	cbnz	r3, b7f14 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x16>
   b7f0a:	4291      	cmp	r1, r2
   b7f0c:	d221      	bcs.n	b7f52 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b7f0e:	f04f 32ff 	mov.w	r2, #4294967295
   b7f12:	e01e      	b.n	b7f52 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
   b7f14:	4291      	cmp	r1, r2
   b7f16:	d9fa      	bls.n	b7f0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b7f18:	f8d0 8000 	ldr.w	r8, [r0]
   b7f1c:	7833      	ldrb	r3, [r6, #0]
   b7f1e:	f88d 3007 	strb.w	r3, [sp, #7]
   b7f22:	eb08 0701 	add.w	r7, r8, r1
   b7f26:	eb08 0002 	add.w	r0, r8, r2
   b7f2a:	1a89      	subs	r1, r1, r2
   b7f2c:	f1c5 0901 	rsb	r9, r5, #1
   b7f30:	42a9      	cmp	r1, r5
   b7f32:	d3ec      	bcc.n	b7f0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b7f34:	f10d 0207 	add.w	r2, sp, #7
   b7f38:	4449      	add	r1, r9
   b7f3a:	f7ff ff23 	bl	b7d84 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
   b7f3e:	4604      	mov	r4, r0
   b7f40:	2800      	cmp	r0, #0
   b7f42:	d0e4      	beq.n	b7f0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
   b7f44:	462a      	mov	r2, r5
   b7f46:	4631      	mov	r1, r6
   b7f48:	f7ff ff17 	bl	b7d7a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
   b7f4c:	b928      	cbnz	r0, b7f5a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
   b7f4e:	eba4 0208 	sub.w	r2, r4, r8
   b7f52:	4610      	mov	r0, r2
   b7f54:	b003      	add	sp, #12
   b7f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7f5a:	1c60      	adds	r0, r4, #1
   b7f5c:	1a39      	subs	r1, r7, r0
   b7f5e:	e7e7      	b.n	b7f30 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x32>

000b7f60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
   b7f60:	b513      	push	{r0, r1, r4, lr}
   b7f62:	4604      	mov	r4, r0
   b7f64:	4608      	mov	r0, r1
   b7f66:	9201      	str	r2, [sp, #4]
   b7f68:	9100      	str	r1, [sp, #0]
   b7f6a:	f7fc fd4b 	bl	b4a04 <strlen>
   b7f6e:	e9dd 1200 	ldrd	r1, r2, [sp]
   b7f72:	4603      	mov	r3, r0
   b7f74:	4620      	mov	r0, r4
   b7f76:	f7ff ffc2 	bl	b7efe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
   b7f7a:	b002      	add	sp, #8
   b7f7c:	bd10      	pop	{r4, pc}

000b7f7e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7f7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7f80:	2400      	movs	r4, #0
   b7f82:	2310      	movs	r3, #16
   b7f84:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7f88:	6803      	ldr	r3, [r0, #0]
   b7f8a:	4615      	mov	r5, r2
   b7f8c:	699e      	ldr	r6, [r3, #24]
   b7f8e:	6812      	ldr	r2, [r2, #0]
   b7f90:	466b      	mov	r3, sp
   b7f92:	e9cd 4400 	strd	r4, r4, [sp]
   b7f96:	47b0      	blx	r6
   b7f98:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7f9c:	f003 0306 	and.w	r3, r3, #6
   b7fa0:	2b06      	cmp	r3, #6
   b7fa2:	bf03      	ittte	eq
   b7fa4:	9b00      	ldreq	r3, [sp, #0]
   b7fa6:	602b      	streq	r3, [r5, #0]
   b7fa8:	2001      	moveq	r0, #1
   b7faa:	4620      	movne	r0, r4
   b7fac:	b004      	add	sp, #16
   b7fae:	bd70      	pop	{r4, r5, r6, pc}

000b7fb0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7fb0:	9800      	ldr	r0, [sp, #0]
   b7fb2:	4290      	cmp	r0, r2
   b7fb4:	bf14      	ite	ne
   b7fb6:	2001      	movne	r0, #1
   b7fb8:	2006      	moveq	r0, #6
   b7fba:	4770      	bx	lr

000b7fbc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7fbc:	b510      	push	{r4, lr}
   b7fbe:	4b03      	ldr	r3, [pc, #12]	; (b7fcc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7fc0:	6003      	str	r3, [r0, #0]
   b7fc2:	4604      	mov	r4, r0
   b7fc4:	f000 f8cd 	bl	b8162 <_ZNSt9type_infoD1Ev>
   b7fc8:	4620      	mov	r0, r4
   b7fca:	bd10      	pop	{r4, pc}
   b7fcc:	000ba8b4 	.word	0x000ba8b4

000b7fd0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7fd0:	b510      	push	{r4, lr}
   b7fd2:	4604      	mov	r4, r0
   b7fd4:	f7ff fff2 	bl	b7fbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7fd8:	4620      	mov	r0, r4
   b7fda:	2108      	movs	r1, #8
   b7fdc:	f7fc fd75 	bl	b4aca <_ZdlPvj>
   b7fe0:	4620      	mov	r0, r4
   b7fe2:	bd10      	pop	{r4, pc}

000b7fe4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fe8:	461f      	mov	r7, r3
   b7fea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7fee:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7ff2:	4598      	cmp	r8, r3
   b7ff4:	4606      	mov	r6, r0
   b7ff6:	4615      	mov	r5, r2
   b7ff8:	d107      	bne.n	b800a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7ffa:	9907      	ldr	r1, [sp, #28]
   b7ffc:	f000 f8b4 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b8000:	b118      	cbz	r0, b800a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8002:	7165      	strb	r5, [r4, #5]
   b8004:	2000      	movs	r0, #0
   b8006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b800a:	4639      	mov	r1, r7
   b800c:	4630      	mov	r0, r6
   b800e:	f000 f8ab 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b8012:	2800      	cmp	r0, #0
   b8014:	d0f6      	beq.n	b8004 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8016:	2301      	movs	r3, #1
   b8018:	f8c4 8000 	str.w	r8, [r4]
   b801c:	7125      	strb	r5, [r4, #4]
   b801e:	71a3      	strb	r3, [r4, #6]
   b8020:	e7f0      	b.n	b8004 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8022 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8022:	b538      	push	{r3, r4, r5, lr}
   b8024:	4615      	mov	r5, r2
   b8026:	461c      	mov	r4, r3
   b8028:	f000 f89e 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b802c:	b120      	cbz	r0, b8038 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b802e:	2308      	movs	r3, #8
   b8030:	60e3      	str	r3, [r4, #12]
   b8032:	2306      	movs	r3, #6
   b8034:	6025      	str	r5, [r4, #0]
   b8036:	7123      	strb	r3, [r4, #4]
   b8038:	bd38      	pop	{r3, r4, r5, pc}

000b803a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b803a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b803c:	4605      	mov	r5, r0
   b803e:	460c      	mov	r4, r1
   b8040:	9201      	str	r2, [sp, #4]
   b8042:	461e      	mov	r6, r3
   b8044:	f000 f890 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b8048:	b950      	cbnz	r0, b8060 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b804a:	2e03      	cmp	r6, #3
   b804c:	d808      	bhi.n	b8060 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b804e:	6823      	ldr	r3, [r4, #0]
   b8050:	9a01      	ldr	r2, [sp, #4]
   b8052:	695b      	ldr	r3, [r3, #20]
   b8054:	4629      	mov	r1, r5
   b8056:	4620      	mov	r0, r4
   b8058:	b002      	add	sp, #8
   b805a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b805e:	4718      	bx	r3
   b8060:	b002      	add	sp, #8
   b8062:	bd70      	pop	{r4, r5, r6, pc}

000b8064 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8064:	b510      	push	{r4, lr}
   b8066:	4b03      	ldr	r3, [pc, #12]	; (b8074 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8068:	6003      	str	r3, [r0, #0]
   b806a:	4604      	mov	r4, r0
   b806c:	f7ff ffa6 	bl	b7fbc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8070:	4620      	mov	r0, r4
   b8072:	bd10      	pop	{r4, pc}
   b8074:	000ba914 	.word	0x000ba914

000b8078 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8078:	b510      	push	{r4, lr}
   b807a:	4604      	mov	r4, r0
   b807c:	f7ff fff2 	bl	b8064 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8080:	4620      	mov	r0, r4
   b8082:	210c      	movs	r1, #12
   b8084:	f7fc fd21 	bl	b4aca <_ZdlPvj>
   b8088:	4620      	mov	r0, r4
   b808a:	bd10      	pop	{r4, pc}

000b808c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b808c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b808e:	9f08      	ldr	r7, [sp, #32]
   b8090:	4297      	cmp	r7, r2
   b8092:	4605      	mov	r5, r0
   b8094:	460e      	mov	r6, r1
   b8096:	4614      	mov	r4, r2
   b8098:	d00a      	beq.n	b80b0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b809a:	68a8      	ldr	r0, [r5, #8]
   b809c:	6802      	ldr	r2, [r0, #0]
   b809e:	9708      	str	r7, [sp, #32]
   b80a0:	6a15      	ldr	r5, [r2, #32]
   b80a2:	4631      	mov	r1, r6
   b80a4:	4622      	mov	r2, r4
   b80a6:	46ac      	mov	ip, r5
   b80a8:	b003      	add	sp, #12
   b80aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b80ae:	4760      	bx	ip
   b80b0:	4619      	mov	r1, r3
   b80b2:	9301      	str	r3, [sp, #4]
   b80b4:	f000 f858 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b80b8:	9b01      	ldr	r3, [sp, #4]
   b80ba:	2800      	cmp	r0, #0
   b80bc:	d0ed      	beq.n	b809a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b80be:	2006      	movs	r0, #6
   b80c0:	b003      	add	sp, #12
   b80c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b80c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b80c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80c8:	460d      	mov	r5, r1
   b80ca:	4619      	mov	r1, r3
   b80cc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b80d0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b80d4:	4681      	mov	r9, r0
   b80d6:	4617      	mov	r7, r2
   b80d8:	4698      	mov	r8, r3
   b80da:	f000 f845 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b80de:	b190      	cbz	r0, b8106 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b80e0:	2d00      	cmp	r5, #0
   b80e2:	6034      	str	r4, [r6, #0]
   b80e4:	7137      	strb	r7, [r6, #4]
   b80e6:	db09      	blt.n	b80fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b80e8:	1961      	adds	r1, r4, r5
   b80ea:	458a      	cmp	sl, r1
   b80ec:	bf0c      	ite	eq
   b80ee:	2106      	moveq	r1, #6
   b80f0:	2101      	movne	r1, #1
   b80f2:	71b1      	strb	r1, [r6, #6]
   b80f4:	2000      	movs	r0, #0
   b80f6:	b001      	add	sp, #4
   b80f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b80fc:	3502      	adds	r5, #2
   b80fe:	d1f9      	bne.n	b80f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8100:	2301      	movs	r3, #1
   b8102:	71b3      	strb	r3, [r6, #6]
   b8104:	e7f6      	b.n	b80f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8106:	4554      	cmp	r4, sl
   b8108:	d106      	bne.n	b8118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b810a:	4659      	mov	r1, fp
   b810c:	4648      	mov	r0, r9
   b810e:	f000 f82b 	bl	b8168 <_ZNKSt9type_infoeqERKS_>
   b8112:	b108      	cbz	r0, b8118 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8114:	7177      	strb	r7, [r6, #5]
   b8116:	e7ed      	b.n	b80f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8118:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b811c:	6803      	ldr	r3, [r0, #0]
   b811e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8122:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8126:	69dc      	ldr	r4, [r3, #28]
   b8128:	463a      	mov	r2, r7
   b812a:	4643      	mov	r3, r8
   b812c:	4629      	mov	r1, r5
   b812e:	46a4      	mov	ip, r4
   b8130:	b001      	add	sp, #4
   b8132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8136:	4760      	bx	ip

000b8138 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b813c:	4607      	mov	r7, r0
   b813e:	460c      	mov	r4, r1
   b8140:	4615      	mov	r5, r2
   b8142:	461e      	mov	r6, r3
   b8144:	f7ff ff6d 	bl	b8022 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8148:	b948      	cbnz	r0, b815e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b814a:	68b8      	ldr	r0, [r7, #8]
   b814c:	6803      	ldr	r3, [r0, #0]
   b814e:	699f      	ldr	r7, [r3, #24]
   b8150:	462a      	mov	r2, r5
   b8152:	4633      	mov	r3, r6
   b8154:	4621      	mov	r1, r4
   b8156:	46bc      	mov	ip, r7
   b8158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b815c:	4760      	bx	ip
   b815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8162 <_ZNSt9type_infoD1Ev>:
   b8162:	4770      	bx	lr

000b8164 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8164:	2000      	movs	r0, #0
   b8166:	4770      	bx	lr

000b8168 <_ZNKSt9type_infoeqERKS_>:
   b8168:	4281      	cmp	r1, r0
   b816a:	b508      	push	{r3, lr}
   b816c:	d00e      	beq.n	b818c <_ZNKSt9type_infoeqERKS_+0x24>
   b816e:	6840      	ldr	r0, [r0, #4]
   b8170:	7803      	ldrb	r3, [r0, #0]
   b8172:	2b2a      	cmp	r3, #42	; 0x2a
   b8174:	d00c      	beq.n	b8190 <_ZNKSt9type_infoeqERKS_+0x28>
   b8176:	6849      	ldr	r1, [r1, #4]
   b8178:	780b      	ldrb	r3, [r1, #0]
   b817a:	2b2a      	cmp	r3, #42	; 0x2a
   b817c:	bf08      	it	eq
   b817e:	3101      	addeq	r1, #1
   b8180:	f7fc fc36 	bl	b49f0 <strcmp>
   b8184:	fab0 f080 	clz	r0, r0
   b8188:	0940      	lsrs	r0, r0, #5
   b818a:	bd08      	pop	{r3, pc}
   b818c:	2001      	movs	r0, #1
   b818e:	e7fc      	b.n	b818a <_ZNKSt9type_infoeqERKS_+0x22>
   b8190:	2000      	movs	r0, #0
   b8192:	e7fa      	b.n	b818a <_ZNKSt9type_infoeqERKS_+0x22>

000b8194 <atexit>:
   b8194:	2300      	movs	r3, #0
   b8196:	4601      	mov	r1, r0
   b8198:	461a      	mov	r2, r3
   b819a:	4618      	mov	r0, r3
   b819c:	f000 bf5a 	b.w	b9054 <__register_exitproc>

000b81a0 <atof>:
   b81a0:	2100      	movs	r1, #0
   b81a2:	f000 beef 	b.w	b8f84 <strtod>

000b81a6 <ldiv>:
   b81a6:	2900      	cmp	r1, #0
   b81a8:	b510      	push	{r4, lr}
   b81aa:	fb91 f4f2 	sdiv	r4, r1, r2
   b81ae:	fb02 1314 	mls	r3, r2, r4, r1
   b81b2:	db06      	blt.n	b81c2 <ldiv+0x1c>
   b81b4:	2b00      	cmp	r3, #0
   b81b6:	da01      	bge.n	b81bc <ldiv+0x16>
   b81b8:	3401      	adds	r4, #1
   b81ba:	1a9b      	subs	r3, r3, r2
   b81bc:	e9c0 4300 	strd	r4, r3, [r0]
   b81c0:	bd10      	pop	{r4, pc}
   b81c2:	2b00      	cmp	r3, #0
   b81c4:	bfc4      	itt	gt
   b81c6:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b81ca:	189b      	addgt	r3, r3, r2
   b81cc:	e7f6      	b.n	b81bc <ldiv+0x16>

000b81ce <memcmp>:
   b81ce:	b510      	push	{r4, lr}
   b81d0:	3901      	subs	r1, #1
   b81d2:	4402      	add	r2, r0
   b81d4:	4290      	cmp	r0, r2
   b81d6:	d101      	bne.n	b81dc <memcmp+0xe>
   b81d8:	2000      	movs	r0, #0
   b81da:	e005      	b.n	b81e8 <memcmp+0x1a>
   b81dc:	7803      	ldrb	r3, [r0, #0]
   b81de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b81e2:	42a3      	cmp	r3, r4
   b81e4:	d001      	beq.n	b81ea <memcmp+0x1c>
   b81e6:	1b18      	subs	r0, r3, r4
   b81e8:	bd10      	pop	{r4, pc}
   b81ea:	3001      	adds	r0, #1
   b81ec:	e7f2      	b.n	b81d4 <memcmp+0x6>

000b81ee <memcpy>:
   b81ee:	440a      	add	r2, r1
   b81f0:	4291      	cmp	r1, r2
   b81f2:	f100 33ff 	add.w	r3, r0, #4294967295
   b81f6:	d100      	bne.n	b81fa <memcpy+0xc>
   b81f8:	4770      	bx	lr
   b81fa:	b510      	push	{r4, lr}
   b81fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8200:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8204:	4291      	cmp	r1, r2
   b8206:	d1f9      	bne.n	b81fc <memcpy+0xe>
   b8208:	bd10      	pop	{r4, pc}

000b820a <memmove>:
   b820a:	4288      	cmp	r0, r1
   b820c:	b510      	push	{r4, lr}
   b820e:	eb01 0402 	add.w	r4, r1, r2
   b8212:	d902      	bls.n	b821a <memmove+0x10>
   b8214:	4284      	cmp	r4, r0
   b8216:	4623      	mov	r3, r4
   b8218:	d807      	bhi.n	b822a <memmove+0x20>
   b821a:	1e43      	subs	r3, r0, #1
   b821c:	42a1      	cmp	r1, r4
   b821e:	d008      	beq.n	b8232 <memmove+0x28>
   b8220:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8224:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8228:	e7f8      	b.n	b821c <memmove+0x12>
   b822a:	4402      	add	r2, r0
   b822c:	4601      	mov	r1, r0
   b822e:	428a      	cmp	r2, r1
   b8230:	d100      	bne.n	b8234 <memmove+0x2a>
   b8232:	bd10      	pop	{r4, pc}
   b8234:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8238:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b823c:	e7f7      	b.n	b822e <memmove+0x24>

000b823e <memset>:
   b823e:	4402      	add	r2, r0
   b8240:	4603      	mov	r3, r0
   b8242:	4293      	cmp	r3, r2
   b8244:	d100      	bne.n	b8248 <memset+0xa>
   b8246:	4770      	bx	lr
   b8248:	f803 1b01 	strb.w	r1, [r3], #1
   b824c:	e7f9      	b.n	b8242 <memset+0x4>
	...

000b8250 <srand>:
   b8250:	b538      	push	{r3, r4, r5, lr}
   b8252:	4b10      	ldr	r3, [pc, #64]	; (b8294 <srand+0x44>)
   b8254:	681d      	ldr	r5, [r3, #0]
   b8256:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8258:	4604      	mov	r4, r0
   b825a:	b9b3      	cbnz	r3, b828a <srand+0x3a>
   b825c:	2018      	movs	r0, #24
   b825e:	f7fd ff8f 	bl	b6180 <malloc>
   b8262:	4602      	mov	r2, r0
   b8264:	63a8      	str	r0, [r5, #56]	; 0x38
   b8266:	b920      	cbnz	r0, b8272 <srand+0x22>
   b8268:	4b0b      	ldr	r3, [pc, #44]	; (b8298 <srand+0x48>)
   b826a:	480c      	ldr	r0, [pc, #48]	; (b829c <srand+0x4c>)
   b826c:	2142      	movs	r1, #66	; 0x42
   b826e:	f7fd ffcf 	bl	b6210 <__assert_func>
   b8272:	490b      	ldr	r1, [pc, #44]	; (b82a0 <srand+0x50>)
   b8274:	4b0b      	ldr	r3, [pc, #44]	; (b82a4 <srand+0x54>)
   b8276:	e9c0 1300 	strd	r1, r3, [r0]
   b827a:	4b0b      	ldr	r3, [pc, #44]	; (b82a8 <srand+0x58>)
   b827c:	6083      	str	r3, [r0, #8]
   b827e:	230b      	movs	r3, #11
   b8280:	8183      	strh	r3, [r0, #12]
   b8282:	2100      	movs	r1, #0
   b8284:	2001      	movs	r0, #1
   b8286:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b828a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b828c:	2200      	movs	r2, #0
   b828e:	611c      	str	r4, [r3, #16]
   b8290:	615a      	str	r2, [r3, #20]
   b8292:	bd38      	pop	{r3, r4, r5, pc}
   b8294:	2003cd04 	.word	0x2003cd04
   b8298:	000ba94d 	.word	0x000ba94d
   b829c:	000ba964 	.word	0x000ba964
   b82a0:	abcd330e 	.word	0xabcd330e
   b82a4:	e66d1234 	.word	0xe66d1234
   b82a8:	0005deec 	.word	0x0005deec

000b82ac <strcat>:
   b82ac:	b510      	push	{r4, lr}
   b82ae:	4602      	mov	r2, r0
   b82b0:	7814      	ldrb	r4, [r2, #0]
   b82b2:	4613      	mov	r3, r2
   b82b4:	3201      	adds	r2, #1
   b82b6:	2c00      	cmp	r4, #0
   b82b8:	d1fa      	bne.n	b82b0 <strcat+0x4>
   b82ba:	3b01      	subs	r3, #1
   b82bc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b82c0:	f803 2f01 	strb.w	r2, [r3, #1]!
   b82c4:	2a00      	cmp	r2, #0
   b82c6:	d1f9      	bne.n	b82bc <strcat+0x10>
   b82c8:	bd10      	pop	{r4, pc}

000b82ca <strcpy>:
   b82ca:	4603      	mov	r3, r0
   b82cc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b82d0:	f803 2b01 	strb.w	r2, [r3], #1
   b82d4:	2a00      	cmp	r2, #0
   b82d6:	d1f9      	bne.n	b82cc <strcpy+0x2>
   b82d8:	4770      	bx	lr
	...

000b82dc <strdup>:
   b82dc:	4b02      	ldr	r3, [pc, #8]	; (b82e8 <strdup+0xc>)
   b82de:	4601      	mov	r1, r0
   b82e0:	6818      	ldr	r0, [r3, #0]
   b82e2:	f000 b803 	b.w	b82ec <_strdup_r>
   b82e6:	bf00      	nop
   b82e8:	2003cd04 	.word	0x2003cd04

000b82ec <_strdup_r>:
   b82ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b82ee:	4604      	mov	r4, r0
   b82f0:	4608      	mov	r0, r1
   b82f2:	460d      	mov	r5, r1
   b82f4:	f7fc fb86 	bl	b4a04 <strlen>
   b82f8:	1c42      	adds	r2, r0, #1
   b82fa:	4611      	mov	r1, r2
   b82fc:	4620      	mov	r0, r4
   b82fe:	9201      	str	r2, [sp, #4]
   b8300:	f7fd ff76 	bl	b61f0 <_malloc_r>
   b8304:	4604      	mov	r4, r0
   b8306:	b118      	cbz	r0, b8310 <_strdup_r+0x24>
   b8308:	9a01      	ldr	r2, [sp, #4]
   b830a:	4629      	mov	r1, r5
   b830c:	f7ff ff6f 	bl	b81ee <memcpy>
   b8310:	4620      	mov	r0, r4
   b8312:	b003      	add	sp, #12
   b8314:	bd30      	pop	{r4, r5, pc}

000b8316 <strncmp>:
   b8316:	b510      	push	{r4, lr}
   b8318:	b17a      	cbz	r2, b833a <strncmp+0x24>
   b831a:	4603      	mov	r3, r0
   b831c:	3901      	subs	r1, #1
   b831e:	1884      	adds	r4, r0, r2
   b8320:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8324:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8328:	4290      	cmp	r0, r2
   b832a:	d101      	bne.n	b8330 <strncmp+0x1a>
   b832c:	42a3      	cmp	r3, r4
   b832e:	d101      	bne.n	b8334 <strncmp+0x1e>
   b8330:	1a80      	subs	r0, r0, r2
   b8332:	bd10      	pop	{r4, pc}
   b8334:	2800      	cmp	r0, #0
   b8336:	d1f3      	bne.n	b8320 <strncmp+0xa>
   b8338:	e7fa      	b.n	b8330 <strncmp+0x1a>
   b833a:	4610      	mov	r0, r2
   b833c:	e7f9      	b.n	b8332 <strncmp+0x1c>

000b833e <sulp>:
   b833e:	b570      	push	{r4, r5, r6, lr}
   b8340:	4604      	mov	r4, r0
   b8342:	460d      	mov	r5, r1
   b8344:	ec45 4b10 	vmov	d0, r4, r5
   b8348:	4616      	mov	r6, r2
   b834a:	f001 fddd 	bl	b9f08 <__ulp>
   b834e:	ec51 0b10 	vmov	r0, r1, d0
   b8352:	b17e      	cbz	r6, b8374 <sulp+0x36>
   b8354:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b8358:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b835c:	2b00      	cmp	r3, #0
   b835e:	dd09      	ble.n	b8374 <sulp+0x36>
   b8360:	051b      	lsls	r3, r3, #20
   b8362:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b8366:	2400      	movs	r4, #0
   b8368:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b836c:	4622      	mov	r2, r4
   b836e:	462b      	mov	r3, r5
   b8370:	f7fc f812 	bl	b4398 <__aeabi_dmul>
   b8374:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8378 <_strtod_l>:
   b8378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b837c:	ed2d 8b02 	vpush	{d8}
   b8380:	b09d      	sub	sp, #116	; 0x74
   b8382:	461f      	mov	r7, r3
   b8384:	2300      	movs	r3, #0
   b8386:	9318      	str	r3, [sp, #96]	; 0x60
   b8388:	4ba2      	ldr	r3, [pc, #648]	; (b8614 <_strtod_l+0x29c>)
   b838a:	9213      	str	r2, [sp, #76]	; 0x4c
   b838c:	681b      	ldr	r3, [r3, #0]
   b838e:	9305      	str	r3, [sp, #20]
   b8390:	4604      	mov	r4, r0
   b8392:	4618      	mov	r0, r3
   b8394:	4688      	mov	r8, r1
   b8396:	f7fc fb35 	bl	b4a04 <strlen>
   b839a:	f04f 0a00 	mov.w	sl, #0
   b839e:	4605      	mov	r5, r0
   b83a0:	f04f 0b00 	mov.w	fp, #0
   b83a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b83a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b83aa:	781a      	ldrb	r2, [r3, #0]
   b83ac:	2a2b      	cmp	r2, #43	; 0x2b
   b83ae:	d04e      	beq.n	b844e <_strtod_l+0xd6>
   b83b0:	d83b      	bhi.n	b842a <_strtod_l+0xb2>
   b83b2:	2a0d      	cmp	r2, #13
   b83b4:	d834      	bhi.n	b8420 <_strtod_l+0xa8>
   b83b6:	2a08      	cmp	r2, #8
   b83b8:	d834      	bhi.n	b8424 <_strtod_l+0xac>
   b83ba:	2a00      	cmp	r2, #0
   b83bc:	d03e      	beq.n	b843c <_strtod_l+0xc4>
   b83be:	2300      	movs	r3, #0
   b83c0:	930a      	str	r3, [sp, #40]	; 0x28
   b83c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b83c4:	7833      	ldrb	r3, [r6, #0]
   b83c6:	2b30      	cmp	r3, #48	; 0x30
   b83c8:	f040 80b0 	bne.w	b852c <_strtod_l+0x1b4>
   b83cc:	7873      	ldrb	r3, [r6, #1]
   b83ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b83d2:	2b58      	cmp	r3, #88	; 0x58
   b83d4:	d168      	bne.n	b84a8 <_strtod_l+0x130>
   b83d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b83d8:	9301      	str	r3, [sp, #4]
   b83da:	ab18      	add	r3, sp, #96	; 0x60
   b83dc:	9702      	str	r7, [sp, #8]
   b83de:	9300      	str	r3, [sp, #0]
   b83e0:	4a8d      	ldr	r2, [pc, #564]	; (b8618 <_strtod_l+0x2a0>)
   b83e2:	ab19      	add	r3, sp, #100	; 0x64
   b83e4:	a917      	add	r1, sp, #92	; 0x5c
   b83e6:	4620      	mov	r0, r4
   b83e8:	f000 fefe 	bl	b91e8 <__gethex>
   b83ec:	f010 0707 	ands.w	r7, r0, #7
   b83f0:	4605      	mov	r5, r0
   b83f2:	d005      	beq.n	b8400 <_strtod_l+0x88>
   b83f4:	2f06      	cmp	r7, #6
   b83f6:	d12c      	bne.n	b8452 <_strtod_l+0xda>
   b83f8:	3601      	adds	r6, #1
   b83fa:	2300      	movs	r3, #0
   b83fc:	9617      	str	r6, [sp, #92]	; 0x5c
   b83fe:	930a      	str	r3, [sp, #40]	; 0x28
   b8400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b8402:	2b00      	cmp	r3, #0
   b8404:	f040 8590 	bne.w	b8f28 <_strtod_l+0xbb0>
   b8408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b840a:	b1eb      	cbz	r3, b8448 <_strtod_l+0xd0>
   b840c:	4652      	mov	r2, sl
   b840e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b8412:	ec43 2b10 	vmov	d0, r2, r3
   b8416:	b01d      	add	sp, #116	; 0x74
   b8418:	ecbd 8b02 	vpop	{d8}
   b841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8420:	2a20      	cmp	r2, #32
   b8422:	d1cc      	bne.n	b83be <_strtod_l+0x46>
   b8424:	3301      	adds	r3, #1
   b8426:	9317      	str	r3, [sp, #92]	; 0x5c
   b8428:	e7be      	b.n	b83a8 <_strtod_l+0x30>
   b842a:	2a2d      	cmp	r2, #45	; 0x2d
   b842c:	d1c7      	bne.n	b83be <_strtod_l+0x46>
   b842e:	2201      	movs	r2, #1
   b8430:	920a      	str	r2, [sp, #40]	; 0x28
   b8432:	1c5a      	adds	r2, r3, #1
   b8434:	9217      	str	r2, [sp, #92]	; 0x5c
   b8436:	785b      	ldrb	r3, [r3, #1]
   b8438:	2b00      	cmp	r3, #0
   b843a:	d1c2      	bne.n	b83c2 <_strtod_l+0x4a>
   b843c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b843e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8442:	2b00      	cmp	r3, #0
   b8444:	f040 856e 	bne.w	b8f24 <_strtod_l+0xbac>
   b8448:	4652      	mov	r2, sl
   b844a:	465b      	mov	r3, fp
   b844c:	e7e1      	b.n	b8412 <_strtod_l+0x9a>
   b844e:	2200      	movs	r2, #0
   b8450:	e7ee      	b.n	b8430 <_strtod_l+0xb8>
   b8452:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8454:	b13a      	cbz	r2, b8466 <_strtod_l+0xee>
   b8456:	2135      	movs	r1, #53	; 0x35
   b8458:	a81a      	add	r0, sp, #104	; 0x68
   b845a:	f001 fe60 	bl	ba11e <__copybits>
   b845e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8460:	4620      	mov	r0, r4
   b8462:	f001 fa1f 	bl	b98a4 <_Bfree>
   b8466:	3f01      	subs	r7, #1
   b8468:	2f04      	cmp	r7, #4
   b846a:	d806      	bhi.n	b847a <_strtod_l+0x102>
   b846c:	e8df f007 	tbb	[pc, r7]
   b8470:	1714030a 	.word	0x1714030a
   b8474:	0a          	.byte	0x0a
   b8475:	00          	.byte	0x00
   b8476:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b847a:	0728      	lsls	r0, r5, #28
   b847c:	d5c0      	bpl.n	b8400 <_strtod_l+0x88>
   b847e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b8482:	e7bd      	b.n	b8400 <_strtod_l+0x88>
   b8484:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b8488:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b848a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b848e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b8492:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b8496:	e7f0      	b.n	b847a <_strtod_l+0x102>
   b8498:	f8df b180 	ldr.w	fp, [pc, #384]	; b861c <_strtod_l+0x2a4>
   b849c:	e7ed      	b.n	b847a <_strtod_l+0x102>
   b849e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b84a2:	f04f 3aff 	mov.w	sl, #4294967295
   b84a6:	e7e8      	b.n	b847a <_strtod_l+0x102>
   b84a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b84aa:	1c5a      	adds	r2, r3, #1
   b84ac:	9217      	str	r2, [sp, #92]	; 0x5c
   b84ae:	785b      	ldrb	r3, [r3, #1]
   b84b0:	2b30      	cmp	r3, #48	; 0x30
   b84b2:	d0f9      	beq.n	b84a8 <_strtod_l+0x130>
   b84b4:	2b00      	cmp	r3, #0
   b84b6:	d0a3      	beq.n	b8400 <_strtod_l+0x88>
   b84b8:	2301      	movs	r3, #1
   b84ba:	f04f 0900 	mov.w	r9, #0
   b84be:	9304      	str	r3, [sp, #16]
   b84c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b84c2:	9308      	str	r3, [sp, #32]
   b84c4:	f8cd 901c 	str.w	r9, [sp, #28]
   b84c8:	464f      	mov	r7, r9
   b84ca:	220a      	movs	r2, #10
   b84cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b84ce:	7806      	ldrb	r6, [r0, #0]
   b84d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b84d4:	b2d9      	uxtb	r1, r3
   b84d6:	2909      	cmp	r1, #9
   b84d8:	d92a      	bls.n	b8530 <_strtod_l+0x1b8>
   b84da:	9905      	ldr	r1, [sp, #20]
   b84dc:	462a      	mov	r2, r5
   b84de:	f7ff ff1a 	bl	b8316 <strncmp>
   b84e2:	b398      	cbz	r0, b854c <_strtod_l+0x1d4>
   b84e4:	2000      	movs	r0, #0
   b84e6:	4632      	mov	r2, r6
   b84e8:	463d      	mov	r5, r7
   b84ea:	9005      	str	r0, [sp, #20]
   b84ec:	4603      	mov	r3, r0
   b84ee:	2a65      	cmp	r2, #101	; 0x65
   b84f0:	d001      	beq.n	b84f6 <_strtod_l+0x17e>
   b84f2:	2a45      	cmp	r2, #69	; 0x45
   b84f4:	d118      	bne.n	b8528 <_strtod_l+0x1b0>
   b84f6:	b91d      	cbnz	r5, b8500 <_strtod_l+0x188>
   b84f8:	9a04      	ldr	r2, [sp, #16]
   b84fa:	4302      	orrs	r2, r0
   b84fc:	d09e      	beq.n	b843c <_strtod_l+0xc4>
   b84fe:	2500      	movs	r5, #0
   b8500:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b8504:	f108 0201 	add.w	r2, r8, #1
   b8508:	9217      	str	r2, [sp, #92]	; 0x5c
   b850a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b850e:	2a2b      	cmp	r2, #43	; 0x2b
   b8510:	d075      	beq.n	b85fe <_strtod_l+0x286>
   b8512:	2a2d      	cmp	r2, #45	; 0x2d
   b8514:	d07b      	beq.n	b860e <_strtod_l+0x296>
   b8516:	f04f 0c00 	mov.w	ip, #0
   b851a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b851e:	2909      	cmp	r1, #9
   b8520:	f240 8082 	bls.w	b8628 <_strtod_l+0x2b0>
   b8524:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b8528:	2600      	movs	r6, #0
   b852a:	e09d      	b.n	b8668 <_strtod_l+0x2f0>
   b852c:	2300      	movs	r3, #0
   b852e:	e7c4      	b.n	b84ba <_strtod_l+0x142>
   b8530:	2f08      	cmp	r7, #8
   b8532:	bfd8      	it	le
   b8534:	9907      	ldrle	r1, [sp, #28]
   b8536:	f100 0001 	add.w	r0, r0, #1
   b853a:	bfda      	itte	le
   b853c:	fb02 3301 	mlale	r3, r2, r1, r3
   b8540:	9307      	strle	r3, [sp, #28]
   b8542:	fb02 3909 	mlagt	r9, r2, r9, r3
   b8546:	3701      	adds	r7, #1
   b8548:	9017      	str	r0, [sp, #92]	; 0x5c
   b854a:	e7bf      	b.n	b84cc <_strtod_l+0x154>
   b854c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b854e:	195a      	adds	r2, r3, r5
   b8550:	9217      	str	r2, [sp, #92]	; 0x5c
   b8552:	5d5a      	ldrb	r2, [r3, r5]
   b8554:	2f00      	cmp	r7, #0
   b8556:	d037      	beq.n	b85c8 <_strtod_l+0x250>
   b8558:	9005      	str	r0, [sp, #20]
   b855a:	463d      	mov	r5, r7
   b855c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b8560:	2b09      	cmp	r3, #9
   b8562:	d912      	bls.n	b858a <_strtod_l+0x212>
   b8564:	2301      	movs	r3, #1
   b8566:	e7c2      	b.n	b84ee <_strtod_l+0x176>
   b8568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b856a:	1c5a      	adds	r2, r3, #1
   b856c:	9217      	str	r2, [sp, #92]	; 0x5c
   b856e:	785a      	ldrb	r2, [r3, #1]
   b8570:	3001      	adds	r0, #1
   b8572:	2a30      	cmp	r2, #48	; 0x30
   b8574:	d0f8      	beq.n	b8568 <_strtod_l+0x1f0>
   b8576:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b857a:	2b08      	cmp	r3, #8
   b857c:	f200 84d9 	bhi.w	b8f32 <_strtod_l+0xbba>
   b8580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8582:	9005      	str	r0, [sp, #20]
   b8584:	2000      	movs	r0, #0
   b8586:	9308      	str	r3, [sp, #32]
   b8588:	4605      	mov	r5, r0
   b858a:	3a30      	subs	r2, #48	; 0x30
   b858c:	f100 0301 	add.w	r3, r0, #1
   b8590:	d014      	beq.n	b85bc <_strtod_l+0x244>
   b8592:	9905      	ldr	r1, [sp, #20]
   b8594:	4419      	add	r1, r3
   b8596:	9105      	str	r1, [sp, #20]
   b8598:	462b      	mov	r3, r5
   b859a:	eb00 0e05 	add.w	lr, r0, r5
   b859e:	210a      	movs	r1, #10
   b85a0:	4573      	cmp	r3, lr
   b85a2:	d113      	bne.n	b85cc <_strtod_l+0x254>
   b85a4:	182b      	adds	r3, r5, r0
   b85a6:	2b08      	cmp	r3, #8
   b85a8:	f105 0501 	add.w	r5, r5, #1
   b85ac:	4405      	add	r5, r0
   b85ae:	dc1c      	bgt.n	b85ea <_strtod_l+0x272>
   b85b0:	9907      	ldr	r1, [sp, #28]
   b85b2:	230a      	movs	r3, #10
   b85b4:	fb03 2301 	mla	r3, r3, r1, r2
   b85b8:	9307      	str	r3, [sp, #28]
   b85ba:	2300      	movs	r3, #0
   b85bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b85be:	1c51      	adds	r1, r2, #1
   b85c0:	9117      	str	r1, [sp, #92]	; 0x5c
   b85c2:	7852      	ldrb	r2, [r2, #1]
   b85c4:	4618      	mov	r0, r3
   b85c6:	e7c9      	b.n	b855c <_strtod_l+0x1e4>
   b85c8:	4638      	mov	r0, r7
   b85ca:	e7d2      	b.n	b8572 <_strtod_l+0x1fa>
   b85cc:	2b08      	cmp	r3, #8
   b85ce:	dc04      	bgt.n	b85da <_strtod_l+0x262>
   b85d0:	9e07      	ldr	r6, [sp, #28]
   b85d2:	434e      	muls	r6, r1
   b85d4:	9607      	str	r6, [sp, #28]
   b85d6:	3301      	adds	r3, #1
   b85d8:	e7e2      	b.n	b85a0 <_strtod_l+0x228>
   b85da:	f103 0c01 	add.w	ip, r3, #1
   b85de:	f1bc 0f10 	cmp.w	ip, #16
   b85e2:	bfd8      	it	le
   b85e4:	fb01 f909 	mulle.w	r9, r1, r9
   b85e8:	e7f5      	b.n	b85d6 <_strtod_l+0x25e>
   b85ea:	2d10      	cmp	r5, #16
   b85ec:	bfdc      	itt	le
   b85ee:	230a      	movle	r3, #10
   b85f0:	fb03 2909 	mlale	r9, r3, r9, r2
   b85f4:	e7e1      	b.n	b85ba <_strtod_l+0x242>
   b85f6:	2300      	movs	r3, #0
   b85f8:	9305      	str	r3, [sp, #20]
   b85fa:	2301      	movs	r3, #1
   b85fc:	e77c      	b.n	b84f8 <_strtod_l+0x180>
   b85fe:	f04f 0c00 	mov.w	ip, #0
   b8602:	f108 0202 	add.w	r2, r8, #2
   b8606:	9217      	str	r2, [sp, #92]	; 0x5c
   b8608:	f898 2002 	ldrb.w	r2, [r8, #2]
   b860c:	e785      	b.n	b851a <_strtod_l+0x1a2>
   b860e:	f04f 0c01 	mov.w	ip, #1
   b8612:	e7f6      	b.n	b8602 <_strtod_l+0x28a>
   b8614:	000bac58 	.word	0x000bac58
   b8618:	000ba9f0 	.word	0x000ba9f0
   b861c:	7ff00000 	.word	0x7ff00000
   b8620:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8622:	1c51      	adds	r1, r2, #1
   b8624:	9117      	str	r1, [sp, #92]	; 0x5c
   b8626:	7852      	ldrb	r2, [r2, #1]
   b8628:	2a30      	cmp	r2, #48	; 0x30
   b862a:	d0f9      	beq.n	b8620 <_strtod_l+0x2a8>
   b862c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b8630:	2908      	cmp	r1, #8
   b8632:	f63f af79 	bhi.w	b8528 <_strtod_l+0x1b0>
   b8636:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b863a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b863c:	9206      	str	r2, [sp, #24]
   b863e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b8640:	1c51      	adds	r1, r2, #1
   b8642:	9117      	str	r1, [sp, #92]	; 0x5c
   b8644:	7852      	ldrb	r2, [r2, #1]
   b8646:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b864a:	2e09      	cmp	r6, #9
   b864c:	d937      	bls.n	b86be <_strtod_l+0x346>
   b864e:	9e06      	ldr	r6, [sp, #24]
   b8650:	1b89      	subs	r1, r1, r6
   b8652:	2908      	cmp	r1, #8
   b8654:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b8658:	dc02      	bgt.n	b8660 <_strtod_l+0x2e8>
   b865a:	4576      	cmp	r6, lr
   b865c:	bfa8      	it	ge
   b865e:	4676      	movge	r6, lr
   b8660:	f1bc 0f00 	cmp.w	ip, #0
   b8664:	d000      	beq.n	b8668 <_strtod_l+0x2f0>
   b8666:	4276      	negs	r6, r6
   b8668:	2d00      	cmp	r5, #0
   b866a:	d14d      	bne.n	b8708 <_strtod_l+0x390>
   b866c:	9904      	ldr	r1, [sp, #16]
   b866e:	4301      	orrs	r1, r0
   b8670:	f47f aec6 	bne.w	b8400 <_strtod_l+0x88>
   b8674:	2b00      	cmp	r3, #0
   b8676:	f47f aee1 	bne.w	b843c <_strtod_l+0xc4>
   b867a:	2a69      	cmp	r2, #105	; 0x69
   b867c:	d027      	beq.n	b86ce <_strtod_l+0x356>
   b867e:	dc24      	bgt.n	b86ca <_strtod_l+0x352>
   b8680:	2a49      	cmp	r2, #73	; 0x49
   b8682:	d024      	beq.n	b86ce <_strtod_l+0x356>
   b8684:	2a4e      	cmp	r2, #78	; 0x4e
   b8686:	f47f aed9 	bne.w	b843c <_strtod_l+0xc4>
   b868a:	499f      	ldr	r1, [pc, #636]	; (b8908 <_strtod_l+0x590>)
   b868c:	a817      	add	r0, sp, #92	; 0x5c
   b868e:	f001 f803 	bl	b9698 <__match>
   b8692:	2800      	cmp	r0, #0
   b8694:	f43f aed2 	beq.w	b843c <_strtod_l+0xc4>
   b8698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b869a:	781b      	ldrb	r3, [r3, #0]
   b869c:	2b28      	cmp	r3, #40	; 0x28
   b869e:	d12d      	bne.n	b86fc <_strtod_l+0x384>
   b86a0:	499a      	ldr	r1, [pc, #616]	; (b890c <_strtod_l+0x594>)
   b86a2:	aa1a      	add	r2, sp, #104	; 0x68
   b86a4:	a817      	add	r0, sp, #92	; 0x5c
   b86a6:	f001 f80b 	bl	b96c0 <__hexnan>
   b86aa:	2805      	cmp	r0, #5
   b86ac:	d126      	bne.n	b86fc <_strtod_l+0x384>
   b86ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b86b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b86b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b86b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b86bc:	e6a0      	b.n	b8400 <_strtod_l+0x88>
   b86be:	210a      	movs	r1, #10
   b86c0:	fb01 2e0e 	mla	lr, r1, lr, r2
   b86c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b86c8:	e7b9      	b.n	b863e <_strtod_l+0x2c6>
   b86ca:	2a6e      	cmp	r2, #110	; 0x6e
   b86cc:	e7db      	b.n	b8686 <_strtod_l+0x30e>
   b86ce:	4990      	ldr	r1, [pc, #576]	; (b8910 <_strtod_l+0x598>)
   b86d0:	a817      	add	r0, sp, #92	; 0x5c
   b86d2:	f000 ffe1 	bl	b9698 <__match>
   b86d6:	2800      	cmp	r0, #0
   b86d8:	f43f aeb0 	beq.w	b843c <_strtod_l+0xc4>
   b86dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86de:	498d      	ldr	r1, [pc, #564]	; (b8914 <_strtod_l+0x59c>)
   b86e0:	3b01      	subs	r3, #1
   b86e2:	a817      	add	r0, sp, #92	; 0x5c
   b86e4:	9317      	str	r3, [sp, #92]	; 0x5c
   b86e6:	f000 ffd7 	bl	b9698 <__match>
   b86ea:	b910      	cbnz	r0, b86f2 <_strtod_l+0x37a>
   b86ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b86ee:	3301      	adds	r3, #1
   b86f0:	9317      	str	r3, [sp, #92]	; 0x5c
   b86f2:	f8df b230 	ldr.w	fp, [pc, #560]	; b8924 <_strtod_l+0x5ac>
   b86f6:	f04f 0a00 	mov.w	sl, #0
   b86fa:	e681      	b.n	b8400 <_strtod_l+0x88>
   b86fc:	4886      	ldr	r0, [pc, #536]	; (b8918 <_strtod_l+0x5a0>)
   b86fe:	f001 fd63 	bl	ba1c8 <nan>
   b8702:	ec5b ab10 	vmov	sl, fp, d0
   b8706:	e67b      	b.n	b8400 <_strtod_l+0x88>
   b8708:	9b05      	ldr	r3, [sp, #20]
   b870a:	9807      	ldr	r0, [sp, #28]
   b870c:	1af3      	subs	r3, r6, r3
   b870e:	2f00      	cmp	r7, #0
   b8710:	bf08      	it	eq
   b8712:	462f      	moveq	r7, r5
   b8714:	2d10      	cmp	r5, #16
   b8716:	9306      	str	r3, [sp, #24]
   b8718:	46a8      	mov	r8, r5
   b871a:	bfa8      	it	ge
   b871c:	f04f 0810 	movge.w	r8, #16
   b8720:	f7fb fdc0 	bl	b42a4 <__aeabi_ui2d>
   b8724:	2d09      	cmp	r5, #9
   b8726:	4682      	mov	sl, r0
   b8728:	468b      	mov	fp, r1
   b872a:	dd13      	ble.n	b8754 <_strtod_l+0x3dc>
   b872c:	4b7b      	ldr	r3, [pc, #492]	; (b891c <_strtod_l+0x5a4>)
   b872e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b8732:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b8736:	f7fb fe2f 	bl	b4398 <__aeabi_dmul>
   b873a:	4682      	mov	sl, r0
   b873c:	4648      	mov	r0, r9
   b873e:	468b      	mov	fp, r1
   b8740:	f7fb fdb0 	bl	b42a4 <__aeabi_ui2d>
   b8744:	4602      	mov	r2, r0
   b8746:	460b      	mov	r3, r1
   b8748:	4650      	mov	r0, sl
   b874a:	4659      	mov	r1, fp
   b874c:	f7fb fc6e 	bl	b402c <__adddf3>
   b8750:	4682      	mov	sl, r0
   b8752:	468b      	mov	fp, r1
   b8754:	2d0f      	cmp	r5, #15
   b8756:	dc38      	bgt.n	b87ca <_strtod_l+0x452>
   b8758:	9b06      	ldr	r3, [sp, #24]
   b875a:	2b00      	cmp	r3, #0
   b875c:	f43f ae50 	beq.w	b8400 <_strtod_l+0x88>
   b8760:	dd24      	ble.n	b87ac <_strtod_l+0x434>
   b8762:	2b16      	cmp	r3, #22
   b8764:	dc0b      	bgt.n	b877e <_strtod_l+0x406>
   b8766:	496d      	ldr	r1, [pc, #436]	; (b891c <_strtod_l+0x5a4>)
   b8768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b876c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b8770:	4652      	mov	r2, sl
   b8772:	465b      	mov	r3, fp
   b8774:	f7fb fe10 	bl	b4398 <__aeabi_dmul>
   b8778:	4682      	mov	sl, r0
   b877a:	468b      	mov	fp, r1
   b877c:	e640      	b.n	b8400 <_strtod_l+0x88>
   b877e:	9a06      	ldr	r2, [sp, #24]
   b8780:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b8784:	4293      	cmp	r3, r2
   b8786:	db20      	blt.n	b87ca <_strtod_l+0x452>
   b8788:	4c64      	ldr	r4, [pc, #400]	; (b891c <_strtod_l+0x5a4>)
   b878a:	f1c5 050f 	rsb	r5, r5, #15
   b878e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b8792:	4652      	mov	r2, sl
   b8794:	465b      	mov	r3, fp
   b8796:	e9d1 0100 	ldrd	r0, r1, [r1]
   b879a:	f7fb fdfd 	bl	b4398 <__aeabi_dmul>
   b879e:	9b06      	ldr	r3, [sp, #24]
   b87a0:	1b5d      	subs	r5, r3, r5
   b87a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b87a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   b87aa:	e7e3      	b.n	b8774 <_strtod_l+0x3fc>
   b87ac:	9b06      	ldr	r3, [sp, #24]
   b87ae:	3316      	adds	r3, #22
   b87b0:	db0b      	blt.n	b87ca <_strtod_l+0x452>
   b87b2:	9b05      	ldr	r3, [sp, #20]
   b87b4:	1b9e      	subs	r6, r3, r6
   b87b6:	4b59      	ldr	r3, [pc, #356]	; (b891c <_strtod_l+0x5a4>)
   b87b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b87bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   b87c0:	4650      	mov	r0, sl
   b87c2:	4659      	mov	r1, fp
   b87c4:	f7fb ff12 	bl	b45ec <__aeabi_ddiv>
   b87c8:	e7d6      	b.n	b8778 <_strtod_l+0x400>
   b87ca:	9b06      	ldr	r3, [sp, #24]
   b87cc:	eba5 0808 	sub.w	r8, r5, r8
   b87d0:	4498      	add	r8, r3
   b87d2:	f1b8 0f00 	cmp.w	r8, #0
   b87d6:	dd74      	ble.n	b88c2 <_strtod_l+0x54a>
   b87d8:	f018 030f 	ands.w	r3, r8, #15
   b87dc:	d00a      	beq.n	b87f4 <_strtod_l+0x47c>
   b87de:	494f      	ldr	r1, [pc, #316]	; (b891c <_strtod_l+0x5a4>)
   b87e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b87e4:	4652      	mov	r2, sl
   b87e6:	465b      	mov	r3, fp
   b87e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b87ec:	f7fb fdd4 	bl	b4398 <__aeabi_dmul>
   b87f0:	4682      	mov	sl, r0
   b87f2:	468b      	mov	fp, r1
   b87f4:	f038 080f 	bics.w	r8, r8, #15
   b87f8:	d04f      	beq.n	b889a <_strtod_l+0x522>
   b87fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b87fe:	dd22      	ble.n	b8846 <_strtod_l+0x4ce>
   b8800:	2500      	movs	r5, #0
   b8802:	462e      	mov	r6, r5
   b8804:	9507      	str	r5, [sp, #28]
   b8806:	9505      	str	r5, [sp, #20]
   b8808:	2322      	movs	r3, #34	; 0x22
   b880a:	f8df b118 	ldr.w	fp, [pc, #280]	; b8924 <_strtod_l+0x5ac>
   b880e:	6023      	str	r3, [r4, #0]
   b8810:	f04f 0a00 	mov.w	sl, #0
   b8814:	9b07      	ldr	r3, [sp, #28]
   b8816:	2b00      	cmp	r3, #0
   b8818:	f43f adf2 	beq.w	b8400 <_strtod_l+0x88>
   b881c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b881e:	4620      	mov	r0, r4
   b8820:	f001 f840 	bl	b98a4 <_Bfree>
   b8824:	9905      	ldr	r1, [sp, #20]
   b8826:	4620      	mov	r0, r4
   b8828:	f001 f83c 	bl	b98a4 <_Bfree>
   b882c:	4631      	mov	r1, r6
   b882e:	4620      	mov	r0, r4
   b8830:	f001 f838 	bl	b98a4 <_Bfree>
   b8834:	9907      	ldr	r1, [sp, #28]
   b8836:	4620      	mov	r0, r4
   b8838:	f001 f834 	bl	b98a4 <_Bfree>
   b883c:	4629      	mov	r1, r5
   b883e:	4620      	mov	r0, r4
   b8840:	f001 f830 	bl	b98a4 <_Bfree>
   b8844:	e5dc      	b.n	b8400 <_strtod_l+0x88>
   b8846:	4b36      	ldr	r3, [pc, #216]	; (b8920 <_strtod_l+0x5a8>)
   b8848:	9304      	str	r3, [sp, #16]
   b884a:	2300      	movs	r3, #0
   b884c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b8850:	4650      	mov	r0, sl
   b8852:	4659      	mov	r1, fp
   b8854:	4699      	mov	r9, r3
   b8856:	f1b8 0f01 	cmp.w	r8, #1
   b885a:	dc21      	bgt.n	b88a0 <_strtod_l+0x528>
   b885c:	b10b      	cbz	r3, b8862 <_strtod_l+0x4ea>
   b885e:	4682      	mov	sl, r0
   b8860:	468b      	mov	fp, r1
   b8862:	4b2f      	ldr	r3, [pc, #188]	; (b8920 <_strtod_l+0x5a8>)
   b8864:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b8868:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b886c:	4652      	mov	r2, sl
   b886e:	465b      	mov	r3, fp
   b8870:	e9d9 0100 	ldrd	r0, r1, [r9]
   b8874:	f7fb fd90 	bl	b4398 <__aeabi_dmul>
   b8878:	4b2a      	ldr	r3, [pc, #168]	; (b8924 <_strtod_l+0x5ac>)
   b887a:	460a      	mov	r2, r1
   b887c:	400b      	ands	r3, r1
   b887e:	492a      	ldr	r1, [pc, #168]	; (b8928 <_strtod_l+0x5b0>)
   b8880:	428b      	cmp	r3, r1
   b8882:	4682      	mov	sl, r0
   b8884:	d8bc      	bhi.n	b8800 <_strtod_l+0x488>
   b8886:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b888a:	428b      	cmp	r3, r1
   b888c:	bf86      	itte	hi
   b888e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b892c <_strtod_l+0x5b4>
   b8892:	f04f 3aff 	movhi.w	sl, #4294967295
   b8896:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b889a:	2300      	movs	r3, #0
   b889c:	9304      	str	r3, [sp, #16]
   b889e:	e084      	b.n	b89aa <_strtod_l+0x632>
   b88a0:	f018 0f01 	tst.w	r8, #1
   b88a4:	d005      	beq.n	b88b2 <_strtod_l+0x53a>
   b88a6:	9b04      	ldr	r3, [sp, #16]
   b88a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88ac:	f7fb fd74 	bl	b4398 <__aeabi_dmul>
   b88b0:	2301      	movs	r3, #1
   b88b2:	9a04      	ldr	r2, [sp, #16]
   b88b4:	3208      	adds	r2, #8
   b88b6:	f109 0901 	add.w	r9, r9, #1
   b88ba:	ea4f 0868 	mov.w	r8, r8, asr #1
   b88be:	9204      	str	r2, [sp, #16]
   b88c0:	e7c9      	b.n	b8856 <_strtod_l+0x4de>
   b88c2:	d0ea      	beq.n	b889a <_strtod_l+0x522>
   b88c4:	f1c8 0800 	rsb	r8, r8, #0
   b88c8:	f018 020f 	ands.w	r2, r8, #15
   b88cc:	d00a      	beq.n	b88e4 <_strtod_l+0x56c>
   b88ce:	4b13      	ldr	r3, [pc, #76]	; (b891c <_strtod_l+0x5a4>)
   b88d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b88d4:	4650      	mov	r0, sl
   b88d6:	4659      	mov	r1, fp
   b88d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b88dc:	f7fb fe86 	bl	b45ec <__aeabi_ddiv>
   b88e0:	4682      	mov	sl, r0
   b88e2:	468b      	mov	fp, r1
   b88e4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b88e8:	d0d7      	beq.n	b889a <_strtod_l+0x522>
   b88ea:	f1b8 0f1f 	cmp.w	r8, #31
   b88ee:	dd1f      	ble.n	b8930 <_strtod_l+0x5b8>
   b88f0:	2500      	movs	r5, #0
   b88f2:	462e      	mov	r6, r5
   b88f4:	9507      	str	r5, [sp, #28]
   b88f6:	9505      	str	r5, [sp, #20]
   b88f8:	2322      	movs	r3, #34	; 0x22
   b88fa:	f04f 0a00 	mov.w	sl, #0
   b88fe:	f04f 0b00 	mov.w	fp, #0
   b8902:	6023      	str	r3, [r4, #0]
   b8904:	e786      	b.n	b8814 <_strtod_l+0x49c>
   b8906:	bf00      	nop
   b8908:	000ba9ea 	.word	0x000ba9ea
   b890c:	000baa04 	.word	0x000baa04
   b8910:	000ba9e1 	.word	0x000ba9e1
   b8914:	000ba9e4 	.word	0x000ba9e4
   b8918:	000ba417 	.word	0x000ba417
   b891c:	000bad18 	.word	0x000bad18
   b8920:	000bacf0 	.word	0x000bacf0
   b8924:	7ff00000 	.word	0x7ff00000
   b8928:	7ca00000 	.word	0x7ca00000
   b892c:	7fefffff 	.word	0x7fefffff
   b8930:	f018 0310 	ands.w	r3, r8, #16
   b8934:	bf18      	it	ne
   b8936:	236a      	movne	r3, #106	; 0x6a
   b8938:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b8ce8 <_strtod_l+0x970>
   b893c:	9304      	str	r3, [sp, #16]
   b893e:	4650      	mov	r0, sl
   b8940:	4659      	mov	r1, fp
   b8942:	2300      	movs	r3, #0
   b8944:	f018 0f01 	tst.w	r8, #1
   b8948:	d004      	beq.n	b8954 <_strtod_l+0x5dc>
   b894a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b894e:	f7fb fd23 	bl	b4398 <__aeabi_dmul>
   b8952:	2301      	movs	r3, #1
   b8954:	ea5f 0868 	movs.w	r8, r8, asr #1
   b8958:	f109 0908 	add.w	r9, r9, #8
   b895c:	d1f2      	bne.n	b8944 <_strtod_l+0x5cc>
   b895e:	b10b      	cbz	r3, b8964 <_strtod_l+0x5ec>
   b8960:	4682      	mov	sl, r0
   b8962:	468b      	mov	fp, r1
   b8964:	9b04      	ldr	r3, [sp, #16]
   b8966:	b1c3      	cbz	r3, b899a <_strtod_l+0x622>
   b8968:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b896c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b8970:	2b00      	cmp	r3, #0
   b8972:	4659      	mov	r1, fp
   b8974:	dd11      	ble.n	b899a <_strtod_l+0x622>
   b8976:	2b1f      	cmp	r3, #31
   b8978:	f340 8124 	ble.w	b8bc4 <_strtod_l+0x84c>
   b897c:	2b34      	cmp	r3, #52	; 0x34
   b897e:	bfde      	ittt	le
   b8980:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b8984:	f04f 33ff 	movle.w	r3, #4294967295
   b8988:	fa03 f202 	lslle.w	r2, r3, r2
   b898c:	f04f 0a00 	mov.w	sl, #0
   b8990:	bfcc      	ite	gt
   b8992:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b8996:	ea02 0b01 	andle.w	fp, r2, r1
   b899a:	2200      	movs	r2, #0
   b899c:	2300      	movs	r3, #0
   b899e:	4650      	mov	r0, sl
   b89a0:	4659      	mov	r1, fp
   b89a2:	f7fb ff61 	bl	b4868 <__aeabi_dcmpeq>
   b89a6:	2800      	cmp	r0, #0
   b89a8:	d1a2      	bne.n	b88f0 <_strtod_l+0x578>
   b89aa:	9b07      	ldr	r3, [sp, #28]
   b89ac:	9300      	str	r3, [sp, #0]
   b89ae:	9908      	ldr	r1, [sp, #32]
   b89b0:	462b      	mov	r3, r5
   b89b2:	463a      	mov	r2, r7
   b89b4:	4620      	mov	r0, r4
   b89b6:	f000 ffdd 	bl	b9974 <__s2b>
   b89ba:	9007      	str	r0, [sp, #28]
   b89bc:	2800      	cmp	r0, #0
   b89be:	f43f af1f 	beq.w	b8800 <_strtod_l+0x488>
   b89c2:	9b05      	ldr	r3, [sp, #20]
   b89c4:	1b9e      	subs	r6, r3, r6
   b89c6:	9b06      	ldr	r3, [sp, #24]
   b89c8:	2b00      	cmp	r3, #0
   b89ca:	bfb4      	ite	lt
   b89cc:	4633      	movlt	r3, r6
   b89ce:	2300      	movge	r3, #0
   b89d0:	930c      	str	r3, [sp, #48]	; 0x30
   b89d2:	9b06      	ldr	r3, [sp, #24]
   b89d4:	2500      	movs	r5, #0
   b89d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b89da:	9312      	str	r3, [sp, #72]	; 0x48
   b89dc:	462e      	mov	r6, r5
   b89de:	9b07      	ldr	r3, [sp, #28]
   b89e0:	4620      	mov	r0, r4
   b89e2:	6859      	ldr	r1, [r3, #4]
   b89e4:	f000 ff1e 	bl	b9824 <_Balloc>
   b89e8:	9005      	str	r0, [sp, #20]
   b89ea:	2800      	cmp	r0, #0
   b89ec:	f43f af0c 	beq.w	b8808 <_strtod_l+0x490>
   b89f0:	9b07      	ldr	r3, [sp, #28]
   b89f2:	691a      	ldr	r2, [r3, #16]
   b89f4:	3202      	adds	r2, #2
   b89f6:	f103 010c 	add.w	r1, r3, #12
   b89fa:	0092      	lsls	r2, r2, #2
   b89fc:	300c      	adds	r0, #12
   b89fe:	f7ff fbf6 	bl	b81ee <memcpy>
   b8a02:	ec4b ab10 	vmov	d0, sl, fp
   b8a06:	aa1a      	add	r2, sp, #104	; 0x68
   b8a08:	a919      	add	r1, sp, #100	; 0x64
   b8a0a:	4620      	mov	r0, r4
   b8a0c:	f001 faf8 	bl	ba000 <__d2b>
   b8a10:	ec4b ab18 	vmov	d8, sl, fp
   b8a14:	9018      	str	r0, [sp, #96]	; 0x60
   b8a16:	2800      	cmp	r0, #0
   b8a18:	f43f aef6 	beq.w	b8808 <_strtod_l+0x490>
   b8a1c:	2101      	movs	r1, #1
   b8a1e:	4620      	mov	r0, r4
   b8a20:	f001 f842 	bl	b9aa8 <__i2b>
   b8a24:	4606      	mov	r6, r0
   b8a26:	2800      	cmp	r0, #0
   b8a28:	f43f aeee 	beq.w	b8808 <_strtod_l+0x490>
   b8a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8a2e:	9904      	ldr	r1, [sp, #16]
   b8a30:	2b00      	cmp	r3, #0
   b8a32:	bfab      	itete	ge
   b8a34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b8a36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b8a38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b8a3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b8a3e:	bfac      	ite	ge
   b8a40:	eb03 0902 	addge.w	r9, r3, r2
   b8a44:	1ad7      	sublt	r7, r2, r3
   b8a46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b8a48:	eba3 0801 	sub.w	r8, r3, r1
   b8a4c:	4490      	add	r8, r2
   b8a4e:	4ba1      	ldr	r3, [pc, #644]	; (b8cd4 <_strtod_l+0x95c>)
   b8a50:	f108 38ff 	add.w	r8, r8, #4294967295
   b8a54:	4598      	cmp	r8, r3
   b8a56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b8a5a:	f280 80c7 	bge.w	b8bec <_strtod_l+0x874>
   b8a5e:	eba3 0308 	sub.w	r3, r3, r8
   b8a62:	2b1f      	cmp	r3, #31
   b8a64:	eba2 0203 	sub.w	r2, r2, r3
   b8a68:	f04f 0101 	mov.w	r1, #1
   b8a6c:	f300 80b1 	bgt.w	b8bd2 <_strtod_l+0x85a>
   b8a70:	fa01 f303 	lsl.w	r3, r1, r3
   b8a74:	930d      	str	r3, [sp, #52]	; 0x34
   b8a76:	2300      	movs	r3, #0
   b8a78:	9308      	str	r3, [sp, #32]
   b8a7a:	eb09 0802 	add.w	r8, r9, r2
   b8a7e:	9b04      	ldr	r3, [sp, #16]
   b8a80:	45c1      	cmp	r9, r8
   b8a82:	4417      	add	r7, r2
   b8a84:	441f      	add	r7, r3
   b8a86:	464b      	mov	r3, r9
   b8a88:	bfa8      	it	ge
   b8a8a:	4643      	movge	r3, r8
   b8a8c:	42bb      	cmp	r3, r7
   b8a8e:	bfa8      	it	ge
   b8a90:	463b      	movge	r3, r7
   b8a92:	2b00      	cmp	r3, #0
   b8a94:	bfc2      	ittt	gt
   b8a96:	eba8 0803 	subgt.w	r8, r8, r3
   b8a9a:	1aff      	subgt	r7, r7, r3
   b8a9c:	eba9 0903 	subgt.w	r9, r9, r3
   b8aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8aa2:	2b00      	cmp	r3, #0
   b8aa4:	dd17      	ble.n	b8ad6 <_strtod_l+0x75e>
   b8aa6:	4631      	mov	r1, r6
   b8aa8:	461a      	mov	r2, r3
   b8aaa:	4620      	mov	r0, r4
   b8aac:	f001 f8bc 	bl	b9c28 <__pow5mult>
   b8ab0:	4606      	mov	r6, r0
   b8ab2:	2800      	cmp	r0, #0
   b8ab4:	f43f aea8 	beq.w	b8808 <_strtod_l+0x490>
   b8ab8:	4601      	mov	r1, r0
   b8aba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b8abc:	4620      	mov	r0, r4
   b8abe:	f001 f809 	bl	b9ad4 <__multiply>
   b8ac2:	900b      	str	r0, [sp, #44]	; 0x2c
   b8ac4:	2800      	cmp	r0, #0
   b8ac6:	f43f ae9f 	beq.w	b8808 <_strtod_l+0x490>
   b8aca:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8acc:	4620      	mov	r0, r4
   b8ace:	f000 fee9 	bl	b98a4 <_Bfree>
   b8ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8ad4:	9318      	str	r3, [sp, #96]	; 0x60
   b8ad6:	f1b8 0f00 	cmp.w	r8, #0
   b8ada:	f300 808c 	bgt.w	b8bf6 <_strtod_l+0x87e>
   b8ade:	9b06      	ldr	r3, [sp, #24]
   b8ae0:	2b00      	cmp	r3, #0
   b8ae2:	dd08      	ble.n	b8af6 <_strtod_l+0x77e>
   b8ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b8ae6:	9905      	ldr	r1, [sp, #20]
   b8ae8:	4620      	mov	r0, r4
   b8aea:	f001 f89d 	bl	b9c28 <__pow5mult>
   b8aee:	9005      	str	r0, [sp, #20]
   b8af0:	2800      	cmp	r0, #0
   b8af2:	f43f ae89 	beq.w	b8808 <_strtod_l+0x490>
   b8af6:	2f00      	cmp	r7, #0
   b8af8:	dd08      	ble.n	b8b0c <_strtod_l+0x794>
   b8afa:	9905      	ldr	r1, [sp, #20]
   b8afc:	463a      	mov	r2, r7
   b8afe:	4620      	mov	r0, r4
   b8b00:	f001 f8ec 	bl	b9cdc <__lshift>
   b8b04:	9005      	str	r0, [sp, #20]
   b8b06:	2800      	cmp	r0, #0
   b8b08:	f43f ae7e 	beq.w	b8808 <_strtod_l+0x490>
   b8b0c:	f1b9 0f00 	cmp.w	r9, #0
   b8b10:	dd08      	ble.n	b8b24 <_strtod_l+0x7ac>
   b8b12:	4631      	mov	r1, r6
   b8b14:	464a      	mov	r2, r9
   b8b16:	4620      	mov	r0, r4
   b8b18:	f001 f8e0 	bl	b9cdc <__lshift>
   b8b1c:	4606      	mov	r6, r0
   b8b1e:	2800      	cmp	r0, #0
   b8b20:	f43f ae72 	beq.w	b8808 <_strtod_l+0x490>
   b8b24:	9a05      	ldr	r2, [sp, #20]
   b8b26:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8b28:	4620      	mov	r0, r4
   b8b2a:	f001 f963 	bl	b9df4 <__mdiff>
   b8b2e:	4605      	mov	r5, r0
   b8b30:	2800      	cmp	r0, #0
   b8b32:	f43f ae69 	beq.w	b8808 <_strtod_l+0x490>
   b8b36:	68c3      	ldr	r3, [r0, #12]
   b8b38:	930b      	str	r3, [sp, #44]	; 0x2c
   b8b3a:	2300      	movs	r3, #0
   b8b3c:	60c3      	str	r3, [r0, #12]
   b8b3e:	4631      	mov	r1, r6
   b8b40:	f001 f93c 	bl	b9dbc <__mcmp>
   b8b44:	2800      	cmp	r0, #0
   b8b46:	da60      	bge.n	b8c0a <_strtod_l+0x892>
   b8b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8b4a:	ea53 030a 	orrs.w	r3, r3, sl
   b8b4e:	f040 8082 	bne.w	b8c56 <_strtod_l+0x8de>
   b8b52:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8b56:	2b00      	cmp	r3, #0
   b8b58:	d17d      	bne.n	b8c56 <_strtod_l+0x8de>
   b8b5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8b5e:	0d1b      	lsrs	r3, r3, #20
   b8b60:	051b      	lsls	r3, r3, #20
   b8b62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b8b66:	d976      	bls.n	b8c56 <_strtod_l+0x8de>
   b8b68:	696b      	ldr	r3, [r5, #20]
   b8b6a:	b913      	cbnz	r3, b8b72 <_strtod_l+0x7fa>
   b8b6c:	692b      	ldr	r3, [r5, #16]
   b8b6e:	2b01      	cmp	r3, #1
   b8b70:	dd71      	ble.n	b8c56 <_strtod_l+0x8de>
   b8b72:	4629      	mov	r1, r5
   b8b74:	2201      	movs	r2, #1
   b8b76:	4620      	mov	r0, r4
   b8b78:	f001 f8b0 	bl	b9cdc <__lshift>
   b8b7c:	4631      	mov	r1, r6
   b8b7e:	4605      	mov	r5, r0
   b8b80:	f001 f91c 	bl	b9dbc <__mcmp>
   b8b84:	2800      	cmp	r0, #0
   b8b86:	dd66      	ble.n	b8c56 <_strtod_l+0x8de>
   b8b88:	9904      	ldr	r1, [sp, #16]
   b8b8a:	4a53      	ldr	r2, [pc, #332]	; (b8cd8 <_strtod_l+0x960>)
   b8b8c:	465b      	mov	r3, fp
   b8b8e:	2900      	cmp	r1, #0
   b8b90:	f000 8081 	beq.w	b8c96 <_strtod_l+0x91e>
   b8b94:	ea02 010b 	and.w	r1, r2, fp
   b8b98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b8b9c:	dc7b      	bgt.n	b8c96 <_strtod_l+0x91e>
   b8b9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b8ba2:	f77f aea9 	ble.w	b88f8 <_strtod_l+0x580>
   b8ba6:	4b4d      	ldr	r3, [pc, #308]	; (b8cdc <_strtod_l+0x964>)
   b8ba8:	4650      	mov	r0, sl
   b8baa:	4659      	mov	r1, fp
   b8bac:	2200      	movs	r2, #0
   b8bae:	f7fb fbf3 	bl	b4398 <__aeabi_dmul>
   b8bb2:	460b      	mov	r3, r1
   b8bb4:	4303      	orrs	r3, r0
   b8bb6:	bf08      	it	eq
   b8bb8:	2322      	moveq	r3, #34	; 0x22
   b8bba:	4682      	mov	sl, r0
   b8bbc:	468b      	mov	fp, r1
   b8bbe:	bf08      	it	eq
   b8bc0:	6023      	streq	r3, [r4, #0]
   b8bc2:	e62b      	b.n	b881c <_strtod_l+0x4a4>
   b8bc4:	f04f 32ff 	mov.w	r2, #4294967295
   b8bc8:	fa02 f303 	lsl.w	r3, r2, r3
   b8bcc:	ea03 0a0a 	and.w	sl, r3, sl
   b8bd0:	e6e3      	b.n	b899a <_strtod_l+0x622>
   b8bd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b8bd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b8bda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b8bde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b8be2:	fa01 f308 	lsl.w	r3, r1, r8
   b8be6:	9308      	str	r3, [sp, #32]
   b8be8:	910d      	str	r1, [sp, #52]	; 0x34
   b8bea:	e746      	b.n	b8a7a <_strtod_l+0x702>
   b8bec:	2300      	movs	r3, #0
   b8bee:	9308      	str	r3, [sp, #32]
   b8bf0:	2301      	movs	r3, #1
   b8bf2:	930d      	str	r3, [sp, #52]	; 0x34
   b8bf4:	e741      	b.n	b8a7a <_strtod_l+0x702>
   b8bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8bf8:	4642      	mov	r2, r8
   b8bfa:	4620      	mov	r0, r4
   b8bfc:	f001 f86e 	bl	b9cdc <__lshift>
   b8c00:	9018      	str	r0, [sp, #96]	; 0x60
   b8c02:	2800      	cmp	r0, #0
   b8c04:	f47f af6b 	bne.w	b8ade <_strtod_l+0x766>
   b8c08:	e5fe      	b.n	b8808 <_strtod_l+0x490>
   b8c0a:	465f      	mov	r7, fp
   b8c0c:	d16e      	bne.n	b8cec <_strtod_l+0x974>
   b8c0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8c10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8c14:	b342      	cbz	r2, b8c68 <_strtod_l+0x8f0>
   b8c16:	4a32      	ldr	r2, [pc, #200]	; (b8ce0 <_strtod_l+0x968>)
   b8c18:	4293      	cmp	r3, r2
   b8c1a:	d128      	bne.n	b8c6e <_strtod_l+0x8f6>
   b8c1c:	9b04      	ldr	r3, [sp, #16]
   b8c1e:	4651      	mov	r1, sl
   b8c20:	b1eb      	cbz	r3, b8c5e <_strtod_l+0x8e6>
   b8c22:	4b2d      	ldr	r3, [pc, #180]	; (b8cd8 <_strtod_l+0x960>)
   b8c24:	403b      	ands	r3, r7
   b8c26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8c2a:	f04f 32ff 	mov.w	r2, #4294967295
   b8c2e:	d819      	bhi.n	b8c64 <_strtod_l+0x8ec>
   b8c30:	0d1b      	lsrs	r3, r3, #20
   b8c32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b8c36:	fa02 f303 	lsl.w	r3, r2, r3
   b8c3a:	4299      	cmp	r1, r3
   b8c3c:	d117      	bne.n	b8c6e <_strtod_l+0x8f6>
   b8c3e:	4b29      	ldr	r3, [pc, #164]	; (b8ce4 <_strtod_l+0x96c>)
   b8c40:	429f      	cmp	r7, r3
   b8c42:	d102      	bne.n	b8c4a <_strtod_l+0x8d2>
   b8c44:	3101      	adds	r1, #1
   b8c46:	f43f addf 	beq.w	b8808 <_strtod_l+0x490>
   b8c4a:	4b23      	ldr	r3, [pc, #140]	; (b8cd8 <_strtod_l+0x960>)
   b8c4c:	403b      	ands	r3, r7
   b8c4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b8c52:	f04f 0a00 	mov.w	sl, #0
   b8c56:	9b04      	ldr	r3, [sp, #16]
   b8c58:	2b00      	cmp	r3, #0
   b8c5a:	d1a4      	bne.n	b8ba6 <_strtod_l+0x82e>
   b8c5c:	e5de      	b.n	b881c <_strtod_l+0x4a4>
   b8c5e:	f04f 33ff 	mov.w	r3, #4294967295
   b8c62:	e7ea      	b.n	b8c3a <_strtod_l+0x8c2>
   b8c64:	4613      	mov	r3, r2
   b8c66:	e7e8      	b.n	b8c3a <_strtod_l+0x8c2>
   b8c68:	ea53 030a 	orrs.w	r3, r3, sl
   b8c6c:	d08c      	beq.n	b8b88 <_strtod_l+0x810>
   b8c6e:	9b08      	ldr	r3, [sp, #32]
   b8c70:	b1db      	cbz	r3, b8caa <_strtod_l+0x932>
   b8c72:	423b      	tst	r3, r7
   b8c74:	d0ef      	beq.n	b8c56 <_strtod_l+0x8de>
   b8c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8c78:	9a04      	ldr	r2, [sp, #16]
   b8c7a:	4650      	mov	r0, sl
   b8c7c:	4659      	mov	r1, fp
   b8c7e:	b1c3      	cbz	r3, b8cb2 <_strtod_l+0x93a>
   b8c80:	f7ff fb5d 	bl	b833e <sulp>
   b8c84:	4602      	mov	r2, r0
   b8c86:	460b      	mov	r3, r1
   b8c88:	ec51 0b18 	vmov	r0, r1, d8
   b8c8c:	f7fb f9ce 	bl	b402c <__adddf3>
   b8c90:	4682      	mov	sl, r0
   b8c92:	468b      	mov	fp, r1
   b8c94:	e7df      	b.n	b8c56 <_strtod_l+0x8de>
   b8c96:	4013      	ands	r3, r2
   b8c98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b8c9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b8ca0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b8ca4:	f04f 3aff 	mov.w	sl, #4294967295
   b8ca8:	e7d5      	b.n	b8c56 <_strtod_l+0x8de>
   b8caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8cac:	ea13 0f0a 	tst.w	r3, sl
   b8cb0:	e7e0      	b.n	b8c74 <_strtod_l+0x8fc>
   b8cb2:	f7ff fb44 	bl	b833e <sulp>
   b8cb6:	4602      	mov	r2, r0
   b8cb8:	460b      	mov	r3, r1
   b8cba:	ec51 0b18 	vmov	r0, r1, d8
   b8cbe:	f7fb f9b3 	bl	b4028 <__aeabi_dsub>
   b8cc2:	2200      	movs	r2, #0
   b8cc4:	2300      	movs	r3, #0
   b8cc6:	4682      	mov	sl, r0
   b8cc8:	468b      	mov	fp, r1
   b8cca:	f7fb fdcd 	bl	b4868 <__aeabi_dcmpeq>
   b8cce:	2800      	cmp	r0, #0
   b8cd0:	d0c1      	beq.n	b8c56 <_strtod_l+0x8de>
   b8cd2:	e611      	b.n	b88f8 <_strtod_l+0x580>
   b8cd4:	fffffc02 	.word	0xfffffc02
   b8cd8:	7ff00000 	.word	0x7ff00000
   b8cdc:	39500000 	.word	0x39500000
   b8ce0:	000fffff 	.word	0x000fffff
   b8ce4:	7fefffff 	.word	0x7fefffff
   b8ce8:	000baa18 	.word	0x000baa18
   b8cec:	4631      	mov	r1, r6
   b8cee:	4628      	mov	r0, r5
   b8cf0:	f001 f9e2 	bl	ba0b8 <__ratio>
   b8cf4:	ec59 8b10 	vmov	r8, r9, d0
   b8cf8:	ee10 0a10 	vmov	r0, s0
   b8cfc:	2200      	movs	r2, #0
   b8cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b8d02:	4649      	mov	r1, r9
   b8d04:	f7fb fdc4 	bl	b4890 <__aeabi_dcmple>
   b8d08:	2800      	cmp	r0, #0
   b8d0a:	d07a      	beq.n	b8e02 <_strtod_l+0xa8a>
   b8d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8d0e:	2b00      	cmp	r3, #0
   b8d10:	d04a      	beq.n	b8da8 <_strtod_l+0xa30>
   b8d12:	4b95      	ldr	r3, [pc, #596]	; (b8f68 <_strtod_l+0xbf0>)
   b8d14:	2200      	movs	r2, #0
   b8d16:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8d1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b8f68 <_strtod_l+0xbf0>
   b8d1e:	f04f 0800 	mov.w	r8, #0
   b8d22:	4b92      	ldr	r3, [pc, #584]	; (b8f6c <_strtod_l+0xbf4>)
   b8d24:	403b      	ands	r3, r7
   b8d26:	930d      	str	r3, [sp, #52]	; 0x34
   b8d28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8d2a:	4b91      	ldr	r3, [pc, #580]	; (b8f70 <_strtod_l+0xbf8>)
   b8d2c:	429a      	cmp	r2, r3
   b8d2e:	f040 80b0 	bne.w	b8e92 <_strtod_l+0xb1a>
   b8d32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8d36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b8d3a:	ec4b ab10 	vmov	d0, sl, fp
   b8d3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8d42:	f001 f8e1 	bl	b9f08 <__ulp>
   b8d46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8d4a:	ec53 2b10 	vmov	r2, r3, d0
   b8d4e:	f7fb fb23 	bl	b4398 <__aeabi_dmul>
   b8d52:	4652      	mov	r2, sl
   b8d54:	465b      	mov	r3, fp
   b8d56:	f7fb f969 	bl	b402c <__adddf3>
   b8d5a:	460b      	mov	r3, r1
   b8d5c:	4983      	ldr	r1, [pc, #524]	; (b8f6c <_strtod_l+0xbf4>)
   b8d5e:	4a85      	ldr	r2, [pc, #532]	; (b8f74 <_strtod_l+0xbfc>)
   b8d60:	4019      	ands	r1, r3
   b8d62:	4291      	cmp	r1, r2
   b8d64:	4682      	mov	sl, r0
   b8d66:	d960      	bls.n	b8e2a <_strtod_l+0xab2>
   b8d68:	ee18 3a90 	vmov	r3, s17
   b8d6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b8d70:	4293      	cmp	r3, r2
   b8d72:	d104      	bne.n	b8d7e <_strtod_l+0xa06>
   b8d74:	ee18 3a10 	vmov	r3, s16
   b8d78:	3301      	adds	r3, #1
   b8d7a:	f43f ad45 	beq.w	b8808 <_strtod_l+0x490>
   b8d7e:	f8df b200 	ldr.w	fp, [pc, #512]	; b8f80 <_strtod_l+0xc08>
   b8d82:	f04f 3aff 	mov.w	sl, #4294967295
   b8d86:	9918      	ldr	r1, [sp, #96]	; 0x60
   b8d88:	4620      	mov	r0, r4
   b8d8a:	f000 fd8b 	bl	b98a4 <_Bfree>
   b8d8e:	9905      	ldr	r1, [sp, #20]
   b8d90:	4620      	mov	r0, r4
   b8d92:	f000 fd87 	bl	b98a4 <_Bfree>
   b8d96:	4631      	mov	r1, r6
   b8d98:	4620      	mov	r0, r4
   b8d9a:	f000 fd83 	bl	b98a4 <_Bfree>
   b8d9e:	4629      	mov	r1, r5
   b8da0:	4620      	mov	r0, r4
   b8da2:	f000 fd7f 	bl	b98a4 <_Bfree>
   b8da6:	e61a      	b.n	b89de <_strtod_l+0x666>
   b8da8:	f1ba 0f00 	cmp.w	sl, #0
   b8dac:	d11b      	bne.n	b8de6 <_strtod_l+0xa6e>
   b8dae:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8db2:	b9f3      	cbnz	r3, b8df2 <_strtod_l+0xa7a>
   b8db4:	4b6c      	ldr	r3, [pc, #432]	; (b8f68 <_strtod_l+0xbf0>)
   b8db6:	2200      	movs	r2, #0
   b8db8:	4640      	mov	r0, r8
   b8dba:	4649      	mov	r1, r9
   b8dbc:	f7fb fd5e 	bl	b487c <__aeabi_dcmplt>
   b8dc0:	b9d0      	cbnz	r0, b8df8 <_strtod_l+0xa80>
   b8dc2:	4640      	mov	r0, r8
   b8dc4:	4649      	mov	r1, r9
   b8dc6:	4b6c      	ldr	r3, [pc, #432]	; (b8f78 <_strtod_l+0xc00>)
   b8dc8:	2200      	movs	r2, #0
   b8dca:	f7fb fae5 	bl	b4398 <__aeabi_dmul>
   b8dce:	4680      	mov	r8, r0
   b8dd0:	4689      	mov	r9, r1
   b8dd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b8dd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b8dda:	9315      	str	r3, [sp, #84]	; 0x54
   b8ddc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b8de0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8de4:	e79d      	b.n	b8d22 <_strtod_l+0x9aa>
   b8de6:	f1ba 0f01 	cmp.w	sl, #1
   b8dea:	d102      	bne.n	b8df2 <_strtod_l+0xa7a>
   b8dec:	2f00      	cmp	r7, #0
   b8dee:	f43f ad83 	beq.w	b88f8 <_strtod_l+0x580>
   b8df2:	4b62      	ldr	r3, [pc, #392]	; (b8f7c <_strtod_l+0xc04>)
   b8df4:	2200      	movs	r2, #0
   b8df6:	e78e      	b.n	b8d16 <_strtod_l+0x99e>
   b8df8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b8f78 <_strtod_l+0xc00>
   b8dfc:	f04f 0800 	mov.w	r8, #0
   b8e00:	e7e7      	b.n	b8dd2 <_strtod_l+0xa5a>
   b8e02:	4b5d      	ldr	r3, [pc, #372]	; (b8f78 <_strtod_l+0xc00>)
   b8e04:	4640      	mov	r0, r8
   b8e06:	4649      	mov	r1, r9
   b8e08:	2200      	movs	r2, #0
   b8e0a:	f7fb fac5 	bl	b4398 <__aeabi_dmul>
   b8e0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8e10:	4680      	mov	r8, r0
   b8e12:	4689      	mov	r9, r1
   b8e14:	b933      	cbnz	r3, b8e24 <_strtod_l+0xaac>
   b8e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8e1a:	900e      	str	r0, [sp, #56]	; 0x38
   b8e1c:	930f      	str	r3, [sp, #60]	; 0x3c
   b8e1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b8e22:	e7dd      	b.n	b8de0 <_strtod_l+0xa68>
   b8e24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b8e28:	e7f9      	b.n	b8e1e <_strtod_l+0xaa6>
   b8e2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b8e2e:	9b04      	ldr	r3, [sp, #16]
   b8e30:	2b00      	cmp	r3, #0
   b8e32:	d1a8      	bne.n	b8d86 <_strtod_l+0xa0e>
   b8e34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b8e38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8e3a:	0d1b      	lsrs	r3, r3, #20
   b8e3c:	051b      	lsls	r3, r3, #20
   b8e3e:	429a      	cmp	r2, r3
   b8e40:	d1a1      	bne.n	b8d86 <_strtod_l+0xa0e>
   b8e42:	4640      	mov	r0, r8
   b8e44:	4649      	mov	r1, r9
   b8e46:	f7fb fde5 	bl	b4a14 <__aeabi_d2lz>
   b8e4a:	f7fb fa77 	bl	b433c <__aeabi_l2d>
   b8e4e:	4602      	mov	r2, r0
   b8e50:	460b      	mov	r3, r1
   b8e52:	4640      	mov	r0, r8
   b8e54:	4649      	mov	r1, r9
   b8e56:	f7fb f8e7 	bl	b4028 <__aeabi_dsub>
   b8e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b8e60:	ea43 030a 	orr.w	r3, r3, sl
   b8e64:	4313      	orrs	r3, r2
   b8e66:	4680      	mov	r8, r0
   b8e68:	4689      	mov	r9, r1
   b8e6a:	d055      	beq.n	b8f18 <_strtod_l+0xba0>
   b8e6c:	a336      	add	r3, pc, #216	; (adr r3, b8f48 <_strtod_l+0xbd0>)
   b8e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e72:	f7fb fd03 	bl	b487c <__aeabi_dcmplt>
   b8e76:	2800      	cmp	r0, #0
   b8e78:	f47f acd0 	bne.w	b881c <_strtod_l+0x4a4>
   b8e7c:	a334      	add	r3, pc, #208	; (adr r3, b8f50 <_strtod_l+0xbd8>)
   b8e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8e82:	4640      	mov	r0, r8
   b8e84:	4649      	mov	r1, r9
   b8e86:	f7fb fd17 	bl	b48b8 <__aeabi_dcmpgt>
   b8e8a:	2800      	cmp	r0, #0
   b8e8c:	f43f af7b 	beq.w	b8d86 <_strtod_l+0xa0e>
   b8e90:	e4c4      	b.n	b881c <_strtod_l+0x4a4>
   b8e92:	9b04      	ldr	r3, [sp, #16]
   b8e94:	b333      	cbz	r3, b8ee4 <_strtod_l+0xb6c>
   b8e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8e98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b8e9c:	d822      	bhi.n	b8ee4 <_strtod_l+0xb6c>
   b8e9e:	a32e      	add	r3, pc, #184	; (adr r3, b8f58 <_strtod_l+0xbe0>)
   b8ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ea4:	4640      	mov	r0, r8
   b8ea6:	4649      	mov	r1, r9
   b8ea8:	f7fb fcf2 	bl	b4890 <__aeabi_dcmple>
   b8eac:	b1a0      	cbz	r0, b8ed8 <_strtod_l+0xb60>
   b8eae:	4649      	mov	r1, r9
   b8eb0:	4640      	mov	r0, r8
   b8eb2:	f7fb fd0b 	bl	b48cc <__aeabi_d2uiz>
   b8eb6:	2801      	cmp	r0, #1
   b8eb8:	bf38      	it	cc
   b8eba:	2001      	movcc	r0, #1
   b8ebc:	f7fb f9f2 	bl	b42a4 <__aeabi_ui2d>
   b8ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b8ec2:	4680      	mov	r8, r0
   b8ec4:	4689      	mov	r9, r1
   b8ec6:	bb23      	cbnz	r3, b8f12 <_strtod_l+0xb9a>
   b8ec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b8ecc:	9010      	str	r0, [sp, #64]	; 0x40
   b8ece:	9311      	str	r3, [sp, #68]	; 0x44
   b8ed0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b8ed4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b8ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8eda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b8edc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b8ee0:	1a9b      	subs	r3, r3, r2
   b8ee2:	9309      	str	r3, [sp, #36]	; 0x24
   b8ee4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8ee8:	eeb0 0a48 	vmov.f32	s0, s16
   b8eec:	eef0 0a68 	vmov.f32	s1, s17
   b8ef0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b8ef4:	f001 f808 	bl	b9f08 <__ulp>
   b8ef8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b8efc:	ec53 2b10 	vmov	r2, r3, d0
   b8f00:	f7fb fa4a 	bl	b4398 <__aeabi_dmul>
   b8f04:	ec53 2b18 	vmov	r2, r3, d8
   b8f08:	f7fb f890 	bl	b402c <__adddf3>
   b8f0c:	4682      	mov	sl, r0
   b8f0e:	468b      	mov	fp, r1
   b8f10:	e78d      	b.n	b8e2e <_strtod_l+0xab6>
   b8f12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b8f16:	e7db      	b.n	b8ed0 <_strtod_l+0xb58>
   b8f18:	a311      	add	r3, pc, #68	; (adr r3, b8f60 <_strtod_l+0xbe8>)
   b8f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8f1e:	f7fb fcad 	bl	b487c <__aeabi_dcmplt>
   b8f22:	e7b2      	b.n	b8e8a <_strtod_l+0xb12>
   b8f24:	2300      	movs	r3, #0
   b8f26:	930a      	str	r3, [sp, #40]	; 0x28
   b8f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b8f2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b8f2c:	6013      	str	r3, [r2, #0]
   b8f2e:	f7ff ba6b 	b.w	b8408 <_strtod_l+0x90>
   b8f32:	2a65      	cmp	r2, #101	; 0x65
   b8f34:	f43f ab5f 	beq.w	b85f6 <_strtod_l+0x27e>
   b8f38:	2a45      	cmp	r2, #69	; 0x45
   b8f3a:	f43f ab5c 	beq.w	b85f6 <_strtod_l+0x27e>
   b8f3e:	2301      	movs	r3, #1
   b8f40:	f7ff bb94 	b.w	b866c <_strtod_l+0x2f4>
   b8f44:	f3af 8000 	nop.w
   b8f48:	94a03595 	.word	0x94a03595
   b8f4c:	3fdfffff 	.word	0x3fdfffff
   b8f50:	35afe535 	.word	0x35afe535
   b8f54:	3fe00000 	.word	0x3fe00000
   b8f58:	ffc00000 	.word	0xffc00000
   b8f5c:	41dfffff 	.word	0x41dfffff
   b8f60:	94a03595 	.word	0x94a03595
   b8f64:	3fcfffff 	.word	0x3fcfffff
   b8f68:	3ff00000 	.word	0x3ff00000
   b8f6c:	7ff00000 	.word	0x7ff00000
   b8f70:	7fe00000 	.word	0x7fe00000
   b8f74:	7c9fffff 	.word	0x7c9fffff
   b8f78:	3fe00000 	.word	0x3fe00000
   b8f7c:	bff00000 	.word	0xbff00000
   b8f80:	7fefffff 	.word	0x7fefffff

000b8f84 <strtod>:
   b8f84:	460a      	mov	r2, r1
   b8f86:	4601      	mov	r1, r0
   b8f88:	4802      	ldr	r0, [pc, #8]	; (b8f94 <strtod+0x10>)
   b8f8a:	4b03      	ldr	r3, [pc, #12]	; (b8f98 <strtod+0x14>)
   b8f8c:	6800      	ldr	r0, [r0, #0]
   b8f8e:	f7ff b9f3 	b.w	b8378 <_strtod_l>
   b8f92:	bf00      	nop
   b8f94:	2003cd04 	.word	0x2003cd04
   b8f98:	2003cd70 	.word	0x2003cd70

000b8f9c <strtok>:
   b8f9c:	4b16      	ldr	r3, [pc, #88]	; (b8ff8 <strtok+0x5c>)
   b8f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8fa0:	681e      	ldr	r6, [r3, #0]
   b8fa2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b8fa4:	4605      	mov	r5, r0
   b8fa6:	b9fc      	cbnz	r4, b8fe8 <strtok+0x4c>
   b8fa8:	2050      	movs	r0, #80	; 0x50
   b8faa:	9101      	str	r1, [sp, #4]
   b8fac:	f7fd f8e8 	bl	b6180 <malloc>
   b8fb0:	9901      	ldr	r1, [sp, #4]
   b8fb2:	65b0      	str	r0, [r6, #88]	; 0x58
   b8fb4:	4602      	mov	r2, r0
   b8fb6:	b920      	cbnz	r0, b8fc2 <strtok+0x26>
   b8fb8:	4b10      	ldr	r3, [pc, #64]	; (b8ffc <strtok+0x60>)
   b8fba:	4811      	ldr	r0, [pc, #68]	; (b9000 <strtok+0x64>)
   b8fbc:	2157      	movs	r1, #87	; 0x57
   b8fbe:	f7fd f927 	bl	b6210 <__assert_func>
   b8fc2:	e9c0 4400 	strd	r4, r4, [r0]
   b8fc6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b8fca:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b8fce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b8fd2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b8fd6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b8fda:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b8fde:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b8fe2:	6184      	str	r4, [r0, #24]
   b8fe4:	7704      	strb	r4, [r0, #28]
   b8fe6:	6244      	str	r4, [r0, #36]	; 0x24
   b8fe8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b8fea:	2301      	movs	r3, #1
   b8fec:	4628      	mov	r0, r5
   b8fee:	b002      	add	sp, #8
   b8ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8ff4:	f000 b806 	b.w	b9004 <__strtok_r>
   b8ff8:	2003cd04 	.word	0x2003cd04
   b8ffc:	000ba94d 	.word	0x000ba94d
   b9000:	000baa40 	.word	0x000baa40

000b9004 <__strtok_r>:
   b9004:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9006:	b908      	cbnz	r0, b900c <__strtok_r+0x8>
   b9008:	6810      	ldr	r0, [r2, #0]
   b900a:	b188      	cbz	r0, b9030 <__strtok_r+0x2c>
   b900c:	4604      	mov	r4, r0
   b900e:	4620      	mov	r0, r4
   b9010:	f814 5b01 	ldrb.w	r5, [r4], #1
   b9014:	460f      	mov	r7, r1
   b9016:	f817 6b01 	ldrb.w	r6, [r7], #1
   b901a:	b91e      	cbnz	r6, b9024 <__strtok_r+0x20>
   b901c:	b965      	cbnz	r5, b9038 <__strtok_r+0x34>
   b901e:	6015      	str	r5, [r2, #0]
   b9020:	4628      	mov	r0, r5
   b9022:	e005      	b.n	b9030 <__strtok_r+0x2c>
   b9024:	42b5      	cmp	r5, r6
   b9026:	d1f6      	bne.n	b9016 <__strtok_r+0x12>
   b9028:	2b00      	cmp	r3, #0
   b902a:	d1f0      	bne.n	b900e <__strtok_r+0xa>
   b902c:	6014      	str	r4, [r2, #0]
   b902e:	7003      	strb	r3, [r0, #0]
   b9030:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9032:	461c      	mov	r4, r3
   b9034:	e00c      	b.n	b9050 <__strtok_r+0x4c>
   b9036:	b915      	cbnz	r5, b903e <__strtok_r+0x3a>
   b9038:	f814 3b01 	ldrb.w	r3, [r4], #1
   b903c:	460e      	mov	r6, r1
   b903e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b9042:	42ab      	cmp	r3, r5
   b9044:	d1f7      	bne.n	b9036 <__strtok_r+0x32>
   b9046:	2b00      	cmp	r3, #0
   b9048:	d0f3      	beq.n	b9032 <__strtok_r+0x2e>
   b904a:	2300      	movs	r3, #0
   b904c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b9050:	6014      	str	r4, [r2, #0]
   b9052:	e7ed      	b.n	b9030 <__strtok_r+0x2c>

000b9054 <__register_exitproc>:
   b9054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9058:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9114 <__register_exitproc+0xc0>
   b905c:	4606      	mov	r6, r0
   b905e:	f8d8 0000 	ldr.w	r0, [r8]
   b9062:	461f      	mov	r7, r3
   b9064:	460d      	mov	r5, r1
   b9066:	4691      	mov	r9, r2
   b9068:	f000 fbc6 	bl	b97f8 <__retarget_lock_acquire_recursive>
   b906c:	4b25      	ldr	r3, [pc, #148]	; (b9104 <__register_exitproc+0xb0>)
   b906e:	681c      	ldr	r4, [r3, #0]
   b9070:	b934      	cbnz	r4, b9080 <__register_exitproc+0x2c>
   b9072:	4c25      	ldr	r4, [pc, #148]	; (b9108 <__register_exitproc+0xb4>)
   b9074:	601c      	str	r4, [r3, #0]
   b9076:	4b25      	ldr	r3, [pc, #148]	; (b910c <__register_exitproc+0xb8>)
   b9078:	b113      	cbz	r3, b9080 <__register_exitproc+0x2c>
   b907a:	681b      	ldr	r3, [r3, #0]
   b907c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9080:	6863      	ldr	r3, [r4, #4]
   b9082:	2b1f      	cmp	r3, #31
   b9084:	dd07      	ble.n	b9096 <__register_exitproc+0x42>
   b9086:	f8d8 0000 	ldr.w	r0, [r8]
   b908a:	f000 fbb7 	bl	b97fc <__retarget_lock_release_recursive>
   b908e:	f04f 30ff 	mov.w	r0, #4294967295
   b9092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9096:	b34e      	cbz	r6, b90ec <__register_exitproc+0x98>
   b9098:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b909c:	b988      	cbnz	r0, b90c2 <__register_exitproc+0x6e>
   b909e:	4b1c      	ldr	r3, [pc, #112]	; (b9110 <__register_exitproc+0xbc>)
   b90a0:	b923      	cbnz	r3, b90ac <__register_exitproc+0x58>
   b90a2:	f8d8 0000 	ldr.w	r0, [r8]
   b90a6:	f000 fba8 	bl	b97fa <__retarget_lock_release>
   b90aa:	e7f0      	b.n	b908e <__register_exitproc+0x3a>
   b90ac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b90b0:	f7fd f866 	bl	b6180 <malloc>
   b90b4:	2800      	cmp	r0, #0
   b90b6:	d0f4      	beq.n	b90a2 <__register_exitproc+0x4e>
   b90b8:	2300      	movs	r3, #0
   b90ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b90be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b90c2:	6863      	ldr	r3, [r4, #4]
   b90c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b90c8:	2201      	movs	r2, #1
   b90ca:	409a      	lsls	r2, r3
   b90cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b90d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b90d4:	4313      	orrs	r3, r2
   b90d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b90da:	2e02      	cmp	r6, #2
   b90dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b90e0:	bf02      	ittt	eq
   b90e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b90e6:	4313      	orreq	r3, r2
   b90e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b90ec:	6863      	ldr	r3, [r4, #4]
   b90ee:	f8d8 0000 	ldr.w	r0, [r8]
   b90f2:	1c5a      	adds	r2, r3, #1
   b90f4:	3302      	adds	r3, #2
   b90f6:	6062      	str	r2, [r4, #4]
   b90f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b90fc:	f000 fb7e 	bl	b97fc <__retarget_lock_release_recursive>
   b9100:	2000      	movs	r0, #0
   b9102:	e7c6      	b.n	b9092 <__register_exitproc+0x3e>
   b9104:	2003e7ec 	.word	0x2003e7ec
   b9108:	2003e760 	.word	0x2003e760
   b910c:	00000000 	.word	0x00000000
   b9110:	000b6181 	.word	0x000b6181
   b9114:	2003cd68 	.word	0x2003cd68

000b9118 <rshift>:
   b9118:	6903      	ldr	r3, [r0, #16]
   b911a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b911e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9122:	ea4f 1261 	mov.w	r2, r1, asr #5
   b9126:	f100 0414 	add.w	r4, r0, #20
   b912a:	dd45      	ble.n	b91b8 <rshift+0xa0>
   b912c:	f011 011f 	ands.w	r1, r1, #31
   b9130:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b9134:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b9138:	d10c      	bne.n	b9154 <rshift+0x3c>
   b913a:	f100 0710 	add.w	r7, r0, #16
   b913e:	4629      	mov	r1, r5
   b9140:	42b1      	cmp	r1, r6
   b9142:	d334      	bcc.n	b91ae <rshift+0x96>
   b9144:	1a9b      	subs	r3, r3, r2
   b9146:	009b      	lsls	r3, r3, #2
   b9148:	1eea      	subs	r2, r5, #3
   b914a:	4296      	cmp	r6, r2
   b914c:	bf38      	it	cc
   b914e:	2300      	movcc	r3, #0
   b9150:	4423      	add	r3, r4
   b9152:	e015      	b.n	b9180 <rshift+0x68>
   b9154:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b9158:	f1c1 0820 	rsb	r8, r1, #32
   b915c:	40cf      	lsrs	r7, r1
   b915e:	f105 0e04 	add.w	lr, r5, #4
   b9162:	46a1      	mov	r9, r4
   b9164:	4576      	cmp	r6, lr
   b9166:	46f4      	mov	ip, lr
   b9168:	d815      	bhi.n	b9196 <rshift+0x7e>
   b916a:	1a9a      	subs	r2, r3, r2
   b916c:	0092      	lsls	r2, r2, #2
   b916e:	3a04      	subs	r2, #4
   b9170:	3501      	adds	r5, #1
   b9172:	42ae      	cmp	r6, r5
   b9174:	bf38      	it	cc
   b9176:	2200      	movcc	r2, #0
   b9178:	18a3      	adds	r3, r4, r2
   b917a:	50a7      	str	r7, [r4, r2]
   b917c:	b107      	cbz	r7, b9180 <rshift+0x68>
   b917e:	3304      	adds	r3, #4
   b9180:	1b1a      	subs	r2, r3, r4
   b9182:	42a3      	cmp	r3, r4
   b9184:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b9188:	bf08      	it	eq
   b918a:	2300      	moveq	r3, #0
   b918c:	6102      	str	r2, [r0, #16]
   b918e:	bf08      	it	eq
   b9190:	6143      	streq	r3, [r0, #20]
   b9192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9196:	f8dc c000 	ldr.w	ip, [ip]
   b919a:	fa0c fc08 	lsl.w	ip, ip, r8
   b919e:	ea4c 0707 	orr.w	r7, ip, r7
   b91a2:	f849 7b04 	str.w	r7, [r9], #4
   b91a6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b91aa:	40cf      	lsrs	r7, r1
   b91ac:	e7da      	b.n	b9164 <rshift+0x4c>
   b91ae:	f851 cb04 	ldr.w	ip, [r1], #4
   b91b2:	f847 cf04 	str.w	ip, [r7, #4]!
   b91b6:	e7c3      	b.n	b9140 <rshift+0x28>
   b91b8:	4623      	mov	r3, r4
   b91ba:	e7e1      	b.n	b9180 <rshift+0x68>

000b91bc <__hexdig_fun>:
   b91bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b91c0:	2b09      	cmp	r3, #9
   b91c2:	d802      	bhi.n	b91ca <__hexdig_fun+0xe>
   b91c4:	3820      	subs	r0, #32
   b91c6:	b2c0      	uxtb	r0, r0
   b91c8:	4770      	bx	lr
   b91ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b91ce:	2b05      	cmp	r3, #5
   b91d0:	d801      	bhi.n	b91d6 <__hexdig_fun+0x1a>
   b91d2:	3847      	subs	r0, #71	; 0x47
   b91d4:	e7f7      	b.n	b91c6 <__hexdig_fun+0xa>
   b91d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b91da:	2b05      	cmp	r3, #5
   b91dc:	d801      	bhi.n	b91e2 <__hexdig_fun+0x26>
   b91de:	3827      	subs	r0, #39	; 0x27
   b91e0:	e7f1      	b.n	b91c6 <__hexdig_fun+0xa>
   b91e2:	2000      	movs	r0, #0
   b91e4:	4770      	bx	lr
	...

000b91e8 <__gethex>:
   b91e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b91ec:	ed2d 8b02 	vpush	{d8}
   b91f0:	b089      	sub	sp, #36	; 0x24
   b91f2:	ee08 0a10 	vmov	s16, r0
   b91f6:	9304      	str	r3, [sp, #16]
   b91f8:	4bb4      	ldr	r3, [pc, #720]	; (b94cc <__gethex+0x2e4>)
   b91fa:	681b      	ldr	r3, [r3, #0]
   b91fc:	9301      	str	r3, [sp, #4]
   b91fe:	4618      	mov	r0, r3
   b9200:	468b      	mov	fp, r1
   b9202:	4690      	mov	r8, r2
   b9204:	f7fb fbfe 	bl	b4a04 <strlen>
   b9208:	9b01      	ldr	r3, [sp, #4]
   b920a:	f8db 2000 	ldr.w	r2, [fp]
   b920e:	4403      	add	r3, r0
   b9210:	4682      	mov	sl, r0
   b9212:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b9216:	9305      	str	r3, [sp, #20]
   b9218:	1c93      	adds	r3, r2, #2
   b921a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b921e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b9222:	32fe      	adds	r2, #254	; 0xfe
   b9224:	18d1      	adds	r1, r2, r3
   b9226:	461f      	mov	r7, r3
   b9228:	f813 0b01 	ldrb.w	r0, [r3], #1
   b922c:	9100      	str	r1, [sp, #0]
   b922e:	2830      	cmp	r0, #48	; 0x30
   b9230:	d0f8      	beq.n	b9224 <__gethex+0x3c>
   b9232:	f7ff ffc3 	bl	b91bc <__hexdig_fun>
   b9236:	4604      	mov	r4, r0
   b9238:	2800      	cmp	r0, #0
   b923a:	d13a      	bne.n	b92b2 <__gethex+0xca>
   b923c:	9901      	ldr	r1, [sp, #4]
   b923e:	4652      	mov	r2, sl
   b9240:	4638      	mov	r0, r7
   b9242:	f7ff f868 	bl	b8316 <strncmp>
   b9246:	4605      	mov	r5, r0
   b9248:	2800      	cmp	r0, #0
   b924a:	d168      	bne.n	b931e <__gethex+0x136>
   b924c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b9250:	eb07 060a 	add.w	r6, r7, sl
   b9254:	f7ff ffb2 	bl	b91bc <__hexdig_fun>
   b9258:	2800      	cmp	r0, #0
   b925a:	d062      	beq.n	b9322 <__gethex+0x13a>
   b925c:	4633      	mov	r3, r6
   b925e:	7818      	ldrb	r0, [r3, #0]
   b9260:	2830      	cmp	r0, #48	; 0x30
   b9262:	461f      	mov	r7, r3
   b9264:	f103 0301 	add.w	r3, r3, #1
   b9268:	d0f9      	beq.n	b925e <__gethex+0x76>
   b926a:	f7ff ffa7 	bl	b91bc <__hexdig_fun>
   b926e:	2301      	movs	r3, #1
   b9270:	fab0 f480 	clz	r4, r0
   b9274:	0964      	lsrs	r4, r4, #5
   b9276:	4635      	mov	r5, r6
   b9278:	9300      	str	r3, [sp, #0]
   b927a:	463a      	mov	r2, r7
   b927c:	4616      	mov	r6, r2
   b927e:	3201      	adds	r2, #1
   b9280:	7830      	ldrb	r0, [r6, #0]
   b9282:	f7ff ff9b 	bl	b91bc <__hexdig_fun>
   b9286:	2800      	cmp	r0, #0
   b9288:	d1f8      	bne.n	b927c <__gethex+0x94>
   b928a:	9901      	ldr	r1, [sp, #4]
   b928c:	4652      	mov	r2, sl
   b928e:	4630      	mov	r0, r6
   b9290:	f7ff f841 	bl	b8316 <strncmp>
   b9294:	b980      	cbnz	r0, b92b8 <__gethex+0xd0>
   b9296:	b94d      	cbnz	r5, b92ac <__gethex+0xc4>
   b9298:	eb06 050a 	add.w	r5, r6, sl
   b929c:	462a      	mov	r2, r5
   b929e:	4616      	mov	r6, r2
   b92a0:	3201      	adds	r2, #1
   b92a2:	7830      	ldrb	r0, [r6, #0]
   b92a4:	f7ff ff8a 	bl	b91bc <__hexdig_fun>
   b92a8:	2800      	cmp	r0, #0
   b92aa:	d1f8      	bne.n	b929e <__gethex+0xb6>
   b92ac:	1bad      	subs	r5, r5, r6
   b92ae:	00ad      	lsls	r5, r5, #2
   b92b0:	e004      	b.n	b92bc <__gethex+0xd4>
   b92b2:	2400      	movs	r4, #0
   b92b4:	4625      	mov	r5, r4
   b92b6:	e7e0      	b.n	b927a <__gethex+0x92>
   b92b8:	2d00      	cmp	r5, #0
   b92ba:	d1f7      	bne.n	b92ac <__gethex+0xc4>
   b92bc:	7833      	ldrb	r3, [r6, #0]
   b92be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b92c2:	2b50      	cmp	r3, #80	; 0x50
   b92c4:	d13b      	bne.n	b933e <__gethex+0x156>
   b92c6:	7873      	ldrb	r3, [r6, #1]
   b92c8:	2b2b      	cmp	r3, #43	; 0x2b
   b92ca:	d02c      	beq.n	b9326 <__gethex+0x13e>
   b92cc:	2b2d      	cmp	r3, #45	; 0x2d
   b92ce:	d02e      	beq.n	b932e <__gethex+0x146>
   b92d0:	1c71      	adds	r1, r6, #1
   b92d2:	f04f 0900 	mov.w	r9, #0
   b92d6:	7808      	ldrb	r0, [r1, #0]
   b92d8:	f7ff ff70 	bl	b91bc <__hexdig_fun>
   b92dc:	1e43      	subs	r3, r0, #1
   b92de:	b2db      	uxtb	r3, r3
   b92e0:	2b18      	cmp	r3, #24
   b92e2:	d82c      	bhi.n	b933e <__gethex+0x156>
   b92e4:	f1a0 0210 	sub.w	r2, r0, #16
   b92e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b92ec:	f7ff ff66 	bl	b91bc <__hexdig_fun>
   b92f0:	1e43      	subs	r3, r0, #1
   b92f2:	b2db      	uxtb	r3, r3
   b92f4:	2b18      	cmp	r3, #24
   b92f6:	d91d      	bls.n	b9334 <__gethex+0x14c>
   b92f8:	f1b9 0f00 	cmp.w	r9, #0
   b92fc:	d000      	beq.n	b9300 <__gethex+0x118>
   b92fe:	4252      	negs	r2, r2
   b9300:	4415      	add	r5, r2
   b9302:	f8cb 1000 	str.w	r1, [fp]
   b9306:	b1e4      	cbz	r4, b9342 <__gethex+0x15a>
   b9308:	9b00      	ldr	r3, [sp, #0]
   b930a:	2b00      	cmp	r3, #0
   b930c:	bf14      	ite	ne
   b930e:	2700      	movne	r7, #0
   b9310:	2706      	moveq	r7, #6
   b9312:	4638      	mov	r0, r7
   b9314:	b009      	add	sp, #36	; 0x24
   b9316:	ecbd 8b02 	vpop	{d8}
   b931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b931e:	463e      	mov	r6, r7
   b9320:	4625      	mov	r5, r4
   b9322:	2401      	movs	r4, #1
   b9324:	e7ca      	b.n	b92bc <__gethex+0xd4>
   b9326:	f04f 0900 	mov.w	r9, #0
   b932a:	1cb1      	adds	r1, r6, #2
   b932c:	e7d3      	b.n	b92d6 <__gethex+0xee>
   b932e:	f04f 0901 	mov.w	r9, #1
   b9332:	e7fa      	b.n	b932a <__gethex+0x142>
   b9334:	230a      	movs	r3, #10
   b9336:	fb03 0202 	mla	r2, r3, r2, r0
   b933a:	3a10      	subs	r2, #16
   b933c:	e7d4      	b.n	b92e8 <__gethex+0x100>
   b933e:	4631      	mov	r1, r6
   b9340:	e7df      	b.n	b9302 <__gethex+0x11a>
   b9342:	1bf3      	subs	r3, r6, r7
   b9344:	3b01      	subs	r3, #1
   b9346:	4621      	mov	r1, r4
   b9348:	2b07      	cmp	r3, #7
   b934a:	dc0b      	bgt.n	b9364 <__gethex+0x17c>
   b934c:	ee18 0a10 	vmov	r0, s16
   b9350:	f000 fa68 	bl	b9824 <_Balloc>
   b9354:	4604      	mov	r4, r0
   b9356:	b940      	cbnz	r0, b936a <__gethex+0x182>
   b9358:	4b5d      	ldr	r3, [pc, #372]	; (b94d0 <__gethex+0x2e8>)
   b935a:	4602      	mov	r2, r0
   b935c:	21de      	movs	r1, #222	; 0xde
   b935e:	485d      	ldr	r0, [pc, #372]	; (b94d4 <__gethex+0x2ec>)
   b9360:	f7fc ff56 	bl	b6210 <__assert_func>
   b9364:	3101      	adds	r1, #1
   b9366:	105b      	asrs	r3, r3, #1
   b9368:	e7ee      	b.n	b9348 <__gethex+0x160>
   b936a:	f100 0914 	add.w	r9, r0, #20
   b936e:	f04f 0b00 	mov.w	fp, #0
   b9372:	f1ca 0301 	rsb	r3, sl, #1
   b9376:	f8cd 9008 	str.w	r9, [sp, #8]
   b937a:	f8cd b000 	str.w	fp, [sp]
   b937e:	9306      	str	r3, [sp, #24]
   b9380:	42b7      	cmp	r7, r6
   b9382:	d340      	bcc.n	b9406 <__gethex+0x21e>
   b9384:	9802      	ldr	r0, [sp, #8]
   b9386:	9b00      	ldr	r3, [sp, #0]
   b9388:	f840 3b04 	str.w	r3, [r0], #4
   b938c:	eba0 0009 	sub.w	r0, r0, r9
   b9390:	1080      	asrs	r0, r0, #2
   b9392:	0146      	lsls	r6, r0, #5
   b9394:	6120      	str	r0, [r4, #16]
   b9396:	4618      	mov	r0, r3
   b9398:	f000 fb36 	bl	b9a08 <__hi0bits>
   b939c:	1a30      	subs	r0, r6, r0
   b939e:	f8d8 6000 	ldr.w	r6, [r8]
   b93a2:	42b0      	cmp	r0, r6
   b93a4:	dd63      	ble.n	b946e <__gethex+0x286>
   b93a6:	1b87      	subs	r7, r0, r6
   b93a8:	4639      	mov	r1, r7
   b93aa:	4620      	mov	r0, r4
   b93ac:	f000 feda 	bl	ba164 <__any_on>
   b93b0:	4682      	mov	sl, r0
   b93b2:	b1a8      	cbz	r0, b93e0 <__gethex+0x1f8>
   b93b4:	1e7b      	subs	r3, r7, #1
   b93b6:	1159      	asrs	r1, r3, #5
   b93b8:	f003 021f 	and.w	r2, r3, #31
   b93bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b93c0:	f04f 0a01 	mov.w	sl, #1
   b93c4:	fa0a f202 	lsl.w	r2, sl, r2
   b93c8:	420a      	tst	r2, r1
   b93ca:	d009      	beq.n	b93e0 <__gethex+0x1f8>
   b93cc:	4553      	cmp	r3, sl
   b93ce:	dd05      	ble.n	b93dc <__gethex+0x1f4>
   b93d0:	1eb9      	subs	r1, r7, #2
   b93d2:	4620      	mov	r0, r4
   b93d4:	f000 fec6 	bl	ba164 <__any_on>
   b93d8:	2800      	cmp	r0, #0
   b93da:	d145      	bne.n	b9468 <__gethex+0x280>
   b93dc:	f04f 0a02 	mov.w	sl, #2
   b93e0:	4639      	mov	r1, r7
   b93e2:	4620      	mov	r0, r4
   b93e4:	f7ff fe98 	bl	b9118 <rshift>
   b93e8:	443d      	add	r5, r7
   b93ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b93ee:	42ab      	cmp	r3, r5
   b93f0:	da4c      	bge.n	b948c <__gethex+0x2a4>
   b93f2:	ee18 0a10 	vmov	r0, s16
   b93f6:	4621      	mov	r1, r4
   b93f8:	f000 fa54 	bl	b98a4 <_Bfree>
   b93fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b93fe:	2300      	movs	r3, #0
   b9400:	6013      	str	r3, [r2, #0]
   b9402:	27a3      	movs	r7, #163	; 0xa3
   b9404:	e785      	b.n	b9312 <__gethex+0x12a>
   b9406:	1e73      	subs	r3, r6, #1
   b9408:	9a05      	ldr	r2, [sp, #20]
   b940a:	9303      	str	r3, [sp, #12]
   b940c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b9410:	4293      	cmp	r3, r2
   b9412:	d019      	beq.n	b9448 <__gethex+0x260>
   b9414:	f1bb 0f20 	cmp.w	fp, #32
   b9418:	d107      	bne.n	b942a <__gethex+0x242>
   b941a:	9b02      	ldr	r3, [sp, #8]
   b941c:	9a00      	ldr	r2, [sp, #0]
   b941e:	f843 2b04 	str.w	r2, [r3], #4
   b9422:	9302      	str	r3, [sp, #8]
   b9424:	2300      	movs	r3, #0
   b9426:	9300      	str	r3, [sp, #0]
   b9428:	469b      	mov	fp, r3
   b942a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b942e:	f7ff fec5 	bl	b91bc <__hexdig_fun>
   b9432:	9b00      	ldr	r3, [sp, #0]
   b9434:	f000 000f 	and.w	r0, r0, #15
   b9438:	fa00 f00b 	lsl.w	r0, r0, fp
   b943c:	4303      	orrs	r3, r0
   b943e:	9300      	str	r3, [sp, #0]
   b9440:	f10b 0b04 	add.w	fp, fp, #4
   b9444:	9b03      	ldr	r3, [sp, #12]
   b9446:	e00d      	b.n	b9464 <__gethex+0x27c>
   b9448:	9b03      	ldr	r3, [sp, #12]
   b944a:	9a06      	ldr	r2, [sp, #24]
   b944c:	4413      	add	r3, r2
   b944e:	42bb      	cmp	r3, r7
   b9450:	d3e0      	bcc.n	b9414 <__gethex+0x22c>
   b9452:	4618      	mov	r0, r3
   b9454:	9901      	ldr	r1, [sp, #4]
   b9456:	9307      	str	r3, [sp, #28]
   b9458:	4652      	mov	r2, sl
   b945a:	f7fe ff5c 	bl	b8316 <strncmp>
   b945e:	9b07      	ldr	r3, [sp, #28]
   b9460:	2800      	cmp	r0, #0
   b9462:	d1d7      	bne.n	b9414 <__gethex+0x22c>
   b9464:	461e      	mov	r6, r3
   b9466:	e78b      	b.n	b9380 <__gethex+0x198>
   b9468:	f04f 0a03 	mov.w	sl, #3
   b946c:	e7b8      	b.n	b93e0 <__gethex+0x1f8>
   b946e:	da0a      	bge.n	b9486 <__gethex+0x29e>
   b9470:	1a37      	subs	r7, r6, r0
   b9472:	4621      	mov	r1, r4
   b9474:	ee18 0a10 	vmov	r0, s16
   b9478:	463a      	mov	r2, r7
   b947a:	f000 fc2f 	bl	b9cdc <__lshift>
   b947e:	1bed      	subs	r5, r5, r7
   b9480:	4604      	mov	r4, r0
   b9482:	f100 0914 	add.w	r9, r0, #20
   b9486:	f04f 0a00 	mov.w	sl, #0
   b948a:	e7ae      	b.n	b93ea <__gethex+0x202>
   b948c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b9490:	42a8      	cmp	r0, r5
   b9492:	dd72      	ble.n	b957a <__gethex+0x392>
   b9494:	1b45      	subs	r5, r0, r5
   b9496:	42ae      	cmp	r6, r5
   b9498:	dc36      	bgt.n	b9508 <__gethex+0x320>
   b949a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b949e:	2b02      	cmp	r3, #2
   b94a0:	d02a      	beq.n	b94f8 <__gethex+0x310>
   b94a2:	2b03      	cmp	r3, #3
   b94a4:	d02c      	beq.n	b9500 <__gethex+0x318>
   b94a6:	2b01      	cmp	r3, #1
   b94a8:	d11c      	bne.n	b94e4 <__gethex+0x2fc>
   b94aa:	42ae      	cmp	r6, r5
   b94ac:	d11a      	bne.n	b94e4 <__gethex+0x2fc>
   b94ae:	2e01      	cmp	r6, #1
   b94b0:	d112      	bne.n	b94d8 <__gethex+0x2f0>
   b94b2:	9a04      	ldr	r2, [sp, #16]
   b94b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b94b8:	6013      	str	r3, [r2, #0]
   b94ba:	2301      	movs	r3, #1
   b94bc:	6123      	str	r3, [r4, #16]
   b94be:	f8c9 3000 	str.w	r3, [r9]
   b94c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b94c4:	2762      	movs	r7, #98	; 0x62
   b94c6:	601c      	str	r4, [r3, #0]
   b94c8:	e723      	b.n	b9312 <__gethex+0x12a>
   b94ca:	bf00      	nop
   b94cc:	000bac58 	.word	0x000bac58
   b94d0:	000babc0 	.word	0x000babc0
   b94d4:	000babd1 	.word	0x000babd1
   b94d8:	1e71      	subs	r1, r6, #1
   b94da:	4620      	mov	r0, r4
   b94dc:	f000 fe42 	bl	ba164 <__any_on>
   b94e0:	2800      	cmp	r0, #0
   b94e2:	d1e6      	bne.n	b94b2 <__gethex+0x2ca>
   b94e4:	ee18 0a10 	vmov	r0, s16
   b94e8:	4621      	mov	r1, r4
   b94ea:	f000 f9db 	bl	b98a4 <_Bfree>
   b94ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b94f0:	2300      	movs	r3, #0
   b94f2:	6013      	str	r3, [r2, #0]
   b94f4:	2750      	movs	r7, #80	; 0x50
   b94f6:	e70c      	b.n	b9312 <__gethex+0x12a>
   b94f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b94fa:	2b00      	cmp	r3, #0
   b94fc:	d1f2      	bne.n	b94e4 <__gethex+0x2fc>
   b94fe:	e7d8      	b.n	b94b2 <__gethex+0x2ca>
   b9500:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9502:	2b00      	cmp	r3, #0
   b9504:	d1d5      	bne.n	b94b2 <__gethex+0x2ca>
   b9506:	e7ed      	b.n	b94e4 <__gethex+0x2fc>
   b9508:	1e6f      	subs	r7, r5, #1
   b950a:	f1ba 0f00 	cmp.w	sl, #0
   b950e:	d131      	bne.n	b9574 <__gethex+0x38c>
   b9510:	b127      	cbz	r7, b951c <__gethex+0x334>
   b9512:	4639      	mov	r1, r7
   b9514:	4620      	mov	r0, r4
   b9516:	f000 fe25 	bl	ba164 <__any_on>
   b951a:	4682      	mov	sl, r0
   b951c:	117b      	asrs	r3, r7, #5
   b951e:	2101      	movs	r1, #1
   b9520:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b9524:	f007 071f 	and.w	r7, r7, #31
   b9528:	fa01 f707 	lsl.w	r7, r1, r7
   b952c:	421f      	tst	r7, r3
   b952e:	4629      	mov	r1, r5
   b9530:	4620      	mov	r0, r4
   b9532:	bf18      	it	ne
   b9534:	f04a 0a02 	orrne.w	sl, sl, #2
   b9538:	1b76      	subs	r6, r6, r5
   b953a:	f7ff fded 	bl	b9118 <rshift>
   b953e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b9542:	2702      	movs	r7, #2
   b9544:	f1ba 0f00 	cmp.w	sl, #0
   b9548:	d048      	beq.n	b95dc <__gethex+0x3f4>
   b954a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b954e:	2b02      	cmp	r3, #2
   b9550:	d015      	beq.n	b957e <__gethex+0x396>
   b9552:	2b03      	cmp	r3, #3
   b9554:	d017      	beq.n	b9586 <__gethex+0x39e>
   b9556:	2b01      	cmp	r3, #1
   b9558:	d109      	bne.n	b956e <__gethex+0x386>
   b955a:	f01a 0f02 	tst.w	sl, #2
   b955e:	d006      	beq.n	b956e <__gethex+0x386>
   b9560:	f8d9 0000 	ldr.w	r0, [r9]
   b9564:	ea4a 0a00 	orr.w	sl, sl, r0
   b9568:	f01a 0f01 	tst.w	sl, #1
   b956c:	d10e      	bne.n	b958c <__gethex+0x3a4>
   b956e:	f047 0710 	orr.w	r7, r7, #16
   b9572:	e033      	b.n	b95dc <__gethex+0x3f4>
   b9574:	f04f 0a01 	mov.w	sl, #1
   b9578:	e7d0      	b.n	b951c <__gethex+0x334>
   b957a:	2701      	movs	r7, #1
   b957c:	e7e2      	b.n	b9544 <__gethex+0x35c>
   b957e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9580:	f1c3 0301 	rsb	r3, r3, #1
   b9584:	9315      	str	r3, [sp, #84]	; 0x54
   b9586:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b9588:	2b00      	cmp	r3, #0
   b958a:	d0f0      	beq.n	b956e <__gethex+0x386>
   b958c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b9590:	f104 0314 	add.w	r3, r4, #20
   b9594:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b9598:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b959c:	f04f 0c00 	mov.w	ip, #0
   b95a0:	4618      	mov	r0, r3
   b95a2:	f853 2b04 	ldr.w	r2, [r3], #4
   b95a6:	f1b2 3fff 	cmp.w	r2, #4294967295
   b95aa:	d01c      	beq.n	b95e6 <__gethex+0x3fe>
   b95ac:	3201      	adds	r2, #1
   b95ae:	6002      	str	r2, [r0, #0]
   b95b0:	2f02      	cmp	r7, #2
   b95b2:	f104 0314 	add.w	r3, r4, #20
   b95b6:	d13f      	bne.n	b9638 <__gethex+0x450>
   b95b8:	f8d8 2000 	ldr.w	r2, [r8]
   b95bc:	3a01      	subs	r2, #1
   b95be:	42b2      	cmp	r2, r6
   b95c0:	d10a      	bne.n	b95d8 <__gethex+0x3f0>
   b95c2:	1171      	asrs	r1, r6, #5
   b95c4:	2201      	movs	r2, #1
   b95c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b95ca:	f006 061f 	and.w	r6, r6, #31
   b95ce:	fa02 f606 	lsl.w	r6, r2, r6
   b95d2:	421e      	tst	r6, r3
   b95d4:	bf18      	it	ne
   b95d6:	4617      	movne	r7, r2
   b95d8:	f047 0720 	orr.w	r7, r7, #32
   b95dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b95de:	601c      	str	r4, [r3, #0]
   b95e0:	9b04      	ldr	r3, [sp, #16]
   b95e2:	601d      	str	r5, [r3, #0]
   b95e4:	e695      	b.n	b9312 <__gethex+0x12a>
   b95e6:	4299      	cmp	r1, r3
   b95e8:	f843 cc04 	str.w	ip, [r3, #-4]
   b95ec:	d8d8      	bhi.n	b95a0 <__gethex+0x3b8>
   b95ee:	68a3      	ldr	r3, [r4, #8]
   b95f0:	459b      	cmp	fp, r3
   b95f2:	db19      	blt.n	b9628 <__gethex+0x440>
   b95f4:	6861      	ldr	r1, [r4, #4]
   b95f6:	ee18 0a10 	vmov	r0, s16
   b95fa:	3101      	adds	r1, #1
   b95fc:	f000 f912 	bl	b9824 <_Balloc>
   b9600:	4681      	mov	r9, r0
   b9602:	b918      	cbnz	r0, b960c <__gethex+0x424>
   b9604:	4b1a      	ldr	r3, [pc, #104]	; (b9670 <__gethex+0x488>)
   b9606:	4602      	mov	r2, r0
   b9608:	2184      	movs	r1, #132	; 0x84
   b960a:	e6a8      	b.n	b935e <__gethex+0x176>
   b960c:	6922      	ldr	r2, [r4, #16]
   b960e:	3202      	adds	r2, #2
   b9610:	f104 010c 	add.w	r1, r4, #12
   b9614:	0092      	lsls	r2, r2, #2
   b9616:	300c      	adds	r0, #12
   b9618:	f7fe fde9 	bl	b81ee <memcpy>
   b961c:	4621      	mov	r1, r4
   b961e:	ee18 0a10 	vmov	r0, s16
   b9622:	f000 f93f 	bl	b98a4 <_Bfree>
   b9626:	464c      	mov	r4, r9
   b9628:	6923      	ldr	r3, [r4, #16]
   b962a:	1c5a      	adds	r2, r3, #1
   b962c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b9630:	6122      	str	r2, [r4, #16]
   b9632:	2201      	movs	r2, #1
   b9634:	615a      	str	r2, [r3, #20]
   b9636:	e7bb      	b.n	b95b0 <__gethex+0x3c8>
   b9638:	6922      	ldr	r2, [r4, #16]
   b963a:	455a      	cmp	r2, fp
   b963c:	dd0b      	ble.n	b9656 <__gethex+0x46e>
   b963e:	2101      	movs	r1, #1
   b9640:	4620      	mov	r0, r4
   b9642:	f7ff fd69 	bl	b9118 <rshift>
   b9646:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b964a:	3501      	adds	r5, #1
   b964c:	42ab      	cmp	r3, r5
   b964e:	f6ff aed0 	blt.w	b93f2 <__gethex+0x20a>
   b9652:	2701      	movs	r7, #1
   b9654:	e7c0      	b.n	b95d8 <__gethex+0x3f0>
   b9656:	f016 061f 	ands.w	r6, r6, #31
   b965a:	d0fa      	beq.n	b9652 <__gethex+0x46a>
   b965c:	4453      	add	r3, sl
   b965e:	f1c6 0620 	rsb	r6, r6, #32
   b9662:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b9666:	f000 f9cf 	bl	b9a08 <__hi0bits>
   b966a:	42b0      	cmp	r0, r6
   b966c:	dbe7      	blt.n	b963e <__gethex+0x456>
   b966e:	e7f0      	b.n	b9652 <__gethex+0x46a>
   b9670:	000babc0 	.word	0x000babc0

000b9674 <L_shift>:
   b9674:	f1c2 0208 	rsb	r2, r2, #8
   b9678:	0092      	lsls	r2, r2, #2
   b967a:	b570      	push	{r4, r5, r6, lr}
   b967c:	f1c2 0620 	rsb	r6, r2, #32
   b9680:	6843      	ldr	r3, [r0, #4]
   b9682:	6804      	ldr	r4, [r0, #0]
   b9684:	fa03 f506 	lsl.w	r5, r3, r6
   b9688:	432c      	orrs	r4, r5
   b968a:	40d3      	lsrs	r3, r2
   b968c:	6004      	str	r4, [r0, #0]
   b968e:	f840 3f04 	str.w	r3, [r0, #4]!
   b9692:	4288      	cmp	r0, r1
   b9694:	d3f4      	bcc.n	b9680 <L_shift+0xc>
   b9696:	bd70      	pop	{r4, r5, r6, pc}

000b9698 <__match>:
   b9698:	b530      	push	{r4, r5, lr}
   b969a:	6803      	ldr	r3, [r0, #0]
   b969c:	3301      	adds	r3, #1
   b969e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b96a2:	b914      	cbnz	r4, b96aa <__match+0x12>
   b96a4:	6003      	str	r3, [r0, #0]
   b96a6:	2001      	movs	r0, #1
   b96a8:	bd30      	pop	{r4, r5, pc}
   b96aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b96ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b96b2:	2d19      	cmp	r5, #25
   b96b4:	bf98      	it	ls
   b96b6:	3220      	addls	r2, #32
   b96b8:	42a2      	cmp	r2, r4
   b96ba:	d0f0      	beq.n	b969e <__match+0x6>
   b96bc:	2000      	movs	r0, #0
   b96be:	e7f3      	b.n	b96a8 <__match+0x10>

000b96c0 <__hexnan>:
   b96c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96c4:	680b      	ldr	r3, [r1, #0]
   b96c6:	115e      	asrs	r6, r3, #5
   b96c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b96cc:	f013 031f 	ands.w	r3, r3, #31
   b96d0:	b087      	sub	sp, #28
   b96d2:	bf18      	it	ne
   b96d4:	3604      	addne	r6, #4
   b96d6:	2500      	movs	r5, #0
   b96d8:	1f37      	subs	r7, r6, #4
   b96da:	4690      	mov	r8, r2
   b96dc:	6802      	ldr	r2, [r0, #0]
   b96de:	9301      	str	r3, [sp, #4]
   b96e0:	4682      	mov	sl, r0
   b96e2:	f846 5c04 	str.w	r5, [r6, #-4]
   b96e6:	46b9      	mov	r9, r7
   b96e8:	463c      	mov	r4, r7
   b96ea:	9502      	str	r5, [sp, #8]
   b96ec:	46ab      	mov	fp, r5
   b96ee:	7851      	ldrb	r1, [r2, #1]
   b96f0:	1c53      	adds	r3, r2, #1
   b96f2:	9303      	str	r3, [sp, #12]
   b96f4:	b341      	cbz	r1, b9748 <__hexnan+0x88>
   b96f6:	4608      	mov	r0, r1
   b96f8:	9205      	str	r2, [sp, #20]
   b96fa:	9104      	str	r1, [sp, #16]
   b96fc:	f7ff fd5e 	bl	b91bc <__hexdig_fun>
   b9700:	2800      	cmp	r0, #0
   b9702:	d14f      	bne.n	b97a4 <__hexnan+0xe4>
   b9704:	9904      	ldr	r1, [sp, #16]
   b9706:	9a05      	ldr	r2, [sp, #20]
   b9708:	2920      	cmp	r1, #32
   b970a:	d818      	bhi.n	b973e <__hexnan+0x7e>
   b970c:	9b02      	ldr	r3, [sp, #8]
   b970e:	459b      	cmp	fp, r3
   b9710:	dd13      	ble.n	b973a <__hexnan+0x7a>
   b9712:	454c      	cmp	r4, r9
   b9714:	d206      	bcs.n	b9724 <__hexnan+0x64>
   b9716:	2d07      	cmp	r5, #7
   b9718:	dc04      	bgt.n	b9724 <__hexnan+0x64>
   b971a:	462a      	mov	r2, r5
   b971c:	4649      	mov	r1, r9
   b971e:	4620      	mov	r0, r4
   b9720:	f7ff ffa8 	bl	b9674 <L_shift>
   b9724:	4544      	cmp	r4, r8
   b9726:	d950      	bls.n	b97ca <__hexnan+0x10a>
   b9728:	2300      	movs	r3, #0
   b972a:	f1a4 0904 	sub.w	r9, r4, #4
   b972e:	f844 3c04 	str.w	r3, [r4, #-4]
   b9732:	f8cd b008 	str.w	fp, [sp, #8]
   b9736:	464c      	mov	r4, r9
   b9738:	461d      	mov	r5, r3
   b973a:	9a03      	ldr	r2, [sp, #12]
   b973c:	e7d7      	b.n	b96ee <__hexnan+0x2e>
   b973e:	2929      	cmp	r1, #41	; 0x29
   b9740:	d156      	bne.n	b97f0 <__hexnan+0x130>
   b9742:	3202      	adds	r2, #2
   b9744:	f8ca 2000 	str.w	r2, [sl]
   b9748:	f1bb 0f00 	cmp.w	fp, #0
   b974c:	d050      	beq.n	b97f0 <__hexnan+0x130>
   b974e:	454c      	cmp	r4, r9
   b9750:	d206      	bcs.n	b9760 <__hexnan+0xa0>
   b9752:	2d07      	cmp	r5, #7
   b9754:	dc04      	bgt.n	b9760 <__hexnan+0xa0>
   b9756:	462a      	mov	r2, r5
   b9758:	4649      	mov	r1, r9
   b975a:	4620      	mov	r0, r4
   b975c:	f7ff ff8a 	bl	b9674 <L_shift>
   b9760:	4544      	cmp	r4, r8
   b9762:	d934      	bls.n	b97ce <__hexnan+0x10e>
   b9764:	f1a8 0204 	sub.w	r2, r8, #4
   b9768:	4623      	mov	r3, r4
   b976a:	f853 1b04 	ldr.w	r1, [r3], #4
   b976e:	f842 1f04 	str.w	r1, [r2, #4]!
   b9772:	429f      	cmp	r7, r3
   b9774:	d2f9      	bcs.n	b976a <__hexnan+0xaa>
   b9776:	1b3b      	subs	r3, r7, r4
   b9778:	f023 0303 	bic.w	r3, r3, #3
   b977c:	3304      	adds	r3, #4
   b977e:	3401      	adds	r4, #1
   b9780:	3e03      	subs	r6, #3
   b9782:	42b4      	cmp	r4, r6
   b9784:	bf88      	it	hi
   b9786:	2304      	movhi	r3, #4
   b9788:	4443      	add	r3, r8
   b978a:	2200      	movs	r2, #0
   b978c:	f843 2b04 	str.w	r2, [r3], #4
   b9790:	429f      	cmp	r7, r3
   b9792:	d2fb      	bcs.n	b978c <__hexnan+0xcc>
   b9794:	683b      	ldr	r3, [r7, #0]
   b9796:	b91b      	cbnz	r3, b97a0 <__hexnan+0xe0>
   b9798:	4547      	cmp	r7, r8
   b979a:	d127      	bne.n	b97ec <__hexnan+0x12c>
   b979c:	2301      	movs	r3, #1
   b979e:	603b      	str	r3, [r7, #0]
   b97a0:	2005      	movs	r0, #5
   b97a2:	e026      	b.n	b97f2 <__hexnan+0x132>
   b97a4:	3501      	adds	r5, #1
   b97a6:	2d08      	cmp	r5, #8
   b97a8:	f10b 0b01 	add.w	fp, fp, #1
   b97ac:	dd06      	ble.n	b97bc <__hexnan+0xfc>
   b97ae:	4544      	cmp	r4, r8
   b97b0:	d9c3      	bls.n	b973a <__hexnan+0x7a>
   b97b2:	2300      	movs	r3, #0
   b97b4:	f844 3c04 	str.w	r3, [r4, #-4]
   b97b8:	2501      	movs	r5, #1
   b97ba:	3c04      	subs	r4, #4
   b97bc:	6822      	ldr	r2, [r4, #0]
   b97be:	f000 000f 	and.w	r0, r0, #15
   b97c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b97c6:	6022      	str	r2, [r4, #0]
   b97c8:	e7b7      	b.n	b973a <__hexnan+0x7a>
   b97ca:	2508      	movs	r5, #8
   b97cc:	e7b5      	b.n	b973a <__hexnan+0x7a>
   b97ce:	9b01      	ldr	r3, [sp, #4]
   b97d0:	2b00      	cmp	r3, #0
   b97d2:	d0df      	beq.n	b9794 <__hexnan+0xd4>
   b97d4:	f04f 32ff 	mov.w	r2, #4294967295
   b97d8:	f1c3 0320 	rsb	r3, r3, #32
   b97dc:	fa22 f303 	lsr.w	r3, r2, r3
   b97e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b97e4:	401a      	ands	r2, r3
   b97e6:	f846 2c04 	str.w	r2, [r6, #-4]
   b97ea:	e7d3      	b.n	b9794 <__hexnan+0xd4>
   b97ec:	3f04      	subs	r7, #4
   b97ee:	e7d1      	b.n	b9794 <__hexnan+0xd4>
   b97f0:	2004      	movs	r0, #4
   b97f2:	b007      	add	sp, #28
   b97f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b97f8 <__retarget_lock_acquire_recursive>:
   b97f8:	4770      	bx	lr

000b97fa <__retarget_lock_release>:
   b97fa:	4770      	bx	lr

000b97fc <__retarget_lock_release_recursive>:
   b97fc:	4770      	bx	lr

000b97fe <__ascii_mbtowc>:
   b97fe:	b082      	sub	sp, #8
   b9800:	b901      	cbnz	r1, b9804 <__ascii_mbtowc+0x6>
   b9802:	a901      	add	r1, sp, #4
   b9804:	b142      	cbz	r2, b9818 <__ascii_mbtowc+0x1a>
   b9806:	b14b      	cbz	r3, b981c <__ascii_mbtowc+0x1e>
   b9808:	7813      	ldrb	r3, [r2, #0]
   b980a:	600b      	str	r3, [r1, #0]
   b980c:	7812      	ldrb	r2, [r2, #0]
   b980e:	1e10      	subs	r0, r2, #0
   b9810:	bf18      	it	ne
   b9812:	2001      	movne	r0, #1
   b9814:	b002      	add	sp, #8
   b9816:	4770      	bx	lr
   b9818:	4610      	mov	r0, r2
   b981a:	e7fb      	b.n	b9814 <__ascii_mbtowc+0x16>
   b981c:	f06f 0001 	mvn.w	r0, #1
   b9820:	e7f8      	b.n	b9814 <__ascii_mbtowc+0x16>
	...

000b9824 <_Balloc>:
   b9824:	b570      	push	{r4, r5, r6, lr}
   b9826:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b9828:	4604      	mov	r4, r0
   b982a:	460d      	mov	r5, r1
   b982c:	b976      	cbnz	r6, b984c <_Balloc+0x28>
   b982e:	2010      	movs	r0, #16
   b9830:	f7fc fca6 	bl	b6180 <malloc>
   b9834:	4602      	mov	r2, r0
   b9836:	6260      	str	r0, [r4, #36]	; 0x24
   b9838:	b920      	cbnz	r0, b9844 <_Balloc+0x20>
   b983a:	4b18      	ldr	r3, [pc, #96]	; (b989c <_Balloc+0x78>)
   b983c:	4818      	ldr	r0, [pc, #96]	; (b98a0 <_Balloc+0x7c>)
   b983e:	2166      	movs	r1, #102	; 0x66
   b9840:	f7fc fce6 	bl	b6210 <__assert_func>
   b9844:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b9848:	6006      	str	r6, [r0, #0]
   b984a:	60c6      	str	r6, [r0, #12]
   b984c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b984e:	68f3      	ldr	r3, [r6, #12]
   b9850:	b183      	cbz	r3, b9874 <_Balloc+0x50>
   b9852:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9854:	68db      	ldr	r3, [r3, #12]
   b9856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b985a:	b9b8      	cbnz	r0, b988c <_Balloc+0x68>
   b985c:	2101      	movs	r1, #1
   b985e:	fa01 f605 	lsl.w	r6, r1, r5
   b9862:	1d72      	adds	r2, r6, #5
   b9864:	0092      	lsls	r2, r2, #2
   b9866:	4620      	mov	r0, r4
   b9868:	f000 fc9d 	bl	ba1a6 <_calloc_r>
   b986c:	b160      	cbz	r0, b9888 <_Balloc+0x64>
   b986e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b9872:	e00e      	b.n	b9892 <_Balloc+0x6e>
   b9874:	2221      	movs	r2, #33	; 0x21
   b9876:	2104      	movs	r1, #4
   b9878:	4620      	mov	r0, r4
   b987a:	f000 fc94 	bl	ba1a6 <_calloc_r>
   b987e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9880:	60f0      	str	r0, [r6, #12]
   b9882:	68db      	ldr	r3, [r3, #12]
   b9884:	2b00      	cmp	r3, #0
   b9886:	d1e4      	bne.n	b9852 <_Balloc+0x2e>
   b9888:	2000      	movs	r0, #0
   b988a:	bd70      	pop	{r4, r5, r6, pc}
   b988c:	6802      	ldr	r2, [r0, #0]
   b988e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b9892:	2300      	movs	r3, #0
   b9894:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b9898:	e7f7      	b.n	b988a <_Balloc+0x66>
   b989a:	bf00      	nop
   b989c:	000ba94d 	.word	0x000ba94d
   b98a0:	000bac6c 	.word	0x000bac6c

000b98a4 <_Bfree>:
   b98a4:	b570      	push	{r4, r5, r6, lr}
   b98a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b98a8:	4605      	mov	r5, r0
   b98aa:	460c      	mov	r4, r1
   b98ac:	b976      	cbnz	r6, b98cc <_Bfree+0x28>
   b98ae:	2010      	movs	r0, #16
   b98b0:	f7fc fc66 	bl	b6180 <malloc>
   b98b4:	4602      	mov	r2, r0
   b98b6:	6268      	str	r0, [r5, #36]	; 0x24
   b98b8:	b920      	cbnz	r0, b98c4 <_Bfree+0x20>
   b98ba:	4b09      	ldr	r3, [pc, #36]	; (b98e0 <_Bfree+0x3c>)
   b98bc:	4809      	ldr	r0, [pc, #36]	; (b98e4 <_Bfree+0x40>)
   b98be:	218a      	movs	r1, #138	; 0x8a
   b98c0:	f7fc fca6 	bl	b6210 <__assert_func>
   b98c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b98c8:	6006      	str	r6, [r0, #0]
   b98ca:	60c6      	str	r6, [r0, #12]
   b98cc:	b13c      	cbz	r4, b98de <_Bfree+0x3a>
   b98ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b98d0:	6862      	ldr	r2, [r4, #4]
   b98d2:	68db      	ldr	r3, [r3, #12]
   b98d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b98d8:	6021      	str	r1, [r4, #0]
   b98da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b98de:	bd70      	pop	{r4, r5, r6, pc}
   b98e0:	000ba94d 	.word	0x000ba94d
   b98e4:	000bac6c 	.word	0x000bac6c

000b98e8 <__multadd>:
   b98e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98ec:	690d      	ldr	r5, [r1, #16]
   b98ee:	4607      	mov	r7, r0
   b98f0:	460c      	mov	r4, r1
   b98f2:	461e      	mov	r6, r3
   b98f4:	f101 0c14 	add.w	ip, r1, #20
   b98f8:	2000      	movs	r0, #0
   b98fa:	f8dc 3000 	ldr.w	r3, [ip]
   b98fe:	b299      	uxth	r1, r3
   b9900:	fb02 6101 	mla	r1, r2, r1, r6
   b9904:	0c1e      	lsrs	r6, r3, #16
   b9906:	0c0b      	lsrs	r3, r1, #16
   b9908:	fb02 3306 	mla	r3, r2, r6, r3
   b990c:	b289      	uxth	r1, r1
   b990e:	3001      	adds	r0, #1
   b9910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b9914:	4285      	cmp	r5, r0
   b9916:	f84c 1b04 	str.w	r1, [ip], #4
   b991a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b991e:	dcec      	bgt.n	b98fa <__multadd+0x12>
   b9920:	b30e      	cbz	r6, b9966 <__multadd+0x7e>
   b9922:	68a3      	ldr	r3, [r4, #8]
   b9924:	42ab      	cmp	r3, r5
   b9926:	dc19      	bgt.n	b995c <__multadd+0x74>
   b9928:	6861      	ldr	r1, [r4, #4]
   b992a:	4638      	mov	r0, r7
   b992c:	3101      	adds	r1, #1
   b992e:	f7ff ff79 	bl	b9824 <_Balloc>
   b9932:	4680      	mov	r8, r0
   b9934:	b928      	cbnz	r0, b9942 <__multadd+0x5a>
   b9936:	4602      	mov	r2, r0
   b9938:	4b0c      	ldr	r3, [pc, #48]	; (b996c <__multadd+0x84>)
   b993a:	480d      	ldr	r0, [pc, #52]	; (b9970 <__multadd+0x88>)
   b993c:	21b5      	movs	r1, #181	; 0xb5
   b993e:	f7fc fc67 	bl	b6210 <__assert_func>
   b9942:	6922      	ldr	r2, [r4, #16]
   b9944:	3202      	adds	r2, #2
   b9946:	f104 010c 	add.w	r1, r4, #12
   b994a:	0092      	lsls	r2, r2, #2
   b994c:	300c      	adds	r0, #12
   b994e:	f7fe fc4e 	bl	b81ee <memcpy>
   b9952:	4621      	mov	r1, r4
   b9954:	4638      	mov	r0, r7
   b9956:	f7ff ffa5 	bl	b98a4 <_Bfree>
   b995a:	4644      	mov	r4, r8
   b995c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b9960:	3501      	adds	r5, #1
   b9962:	615e      	str	r6, [r3, #20]
   b9964:	6125      	str	r5, [r4, #16]
   b9966:	4620      	mov	r0, r4
   b9968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b996c:	000babc0 	.word	0x000babc0
   b9970:	000bac6c 	.word	0x000bac6c

000b9974 <__s2b>:
   b9974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9978:	460c      	mov	r4, r1
   b997a:	4615      	mov	r5, r2
   b997c:	461f      	mov	r7, r3
   b997e:	2209      	movs	r2, #9
   b9980:	3308      	adds	r3, #8
   b9982:	4606      	mov	r6, r0
   b9984:	fb93 f3f2 	sdiv	r3, r3, r2
   b9988:	2100      	movs	r1, #0
   b998a:	2201      	movs	r2, #1
   b998c:	429a      	cmp	r2, r3
   b998e:	db09      	blt.n	b99a4 <__s2b+0x30>
   b9990:	4630      	mov	r0, r6
   b9992:	f7ff ff47 	bl	b9824 <_Balloc>
   b9996:	b940      	cbnz	r0, b99aa <__s2b+0x36>
   b9998:	4602      	mov	r2, r0
   b999a:	4b19      	ldr	r3, [pc, #100]	; (b9a00 <__s2b+0x8c>)
   b999c:	4819      	ldr	r0, [pc, #100]	; (b9a04 <__s2b+0x90>)
   b999e:	21ce      	movs	r1, #206	; 0xce
   b99a0:	f7fc fc36 	bl	b6210 <__assert_func>
   b99a4:	0052      	lsls	r2, r2, #1
   b99a6:	3101      	adds	r1, #1
   b99a8:	e7f0      	b.n	b998c <__s2b+0x18>
   b99aa:	9b08      	ldr	r3, [sp, #32]
   b99ac:	6143      	str	r3, [r0, #20]
   b99ae:	2d09      	cmp	r5, #9
   b99b0:	f04f 0301 	mov.w	r3, #1
   b99b4:	6103      	str	r3, [r0, #16]
   b99b6:	dd16      	ble.n	b99e6 <__s2b+0x72>
   b99b8:	f104 0909 	add.w	r9, r4, #9
   b99bc:	46c8      	mov	r8, r9
   b99be:	442c      	add	r4, r5
   b99c0:	f818 3b01 	ldrb.w	r3, [r8], #1
   b99c4:	4601      	mov	r1, r0
   b99c6:	3b30      	subs	r3, #48	; 0x30
   b99c8:	220a      	movs	r2, #10
   b99ca:	4630      	mov	r0, r6
   b99cc:	f7ff ff8c 	bl	b98e8 <__multadd>
   b99d0:	45a0      	cmp	r8, r4
   b99d2:	d1f5      	bne.n	b99c0 <__s2b+0x4c>
   b99d4:	f1a5 0408 	sub.w	r4, r5, #8
   b99d8:	444c      	add	r4, r9
   b99da:	1b2d      	subs	r5, r5, r4
   b99dc:	1963      	adds	r3, r4, r5
   b99de:	42bb      	cmp	r3, r7
   b99e0:	db04      	blt.n	b99ec <__s2b+0x78>
   b99e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b99e6:	340a      	adds	r4, #10
   b99e8:	2509      	movs	r5, #9
   b99ea:	e7f6      	b.n	b99da <__s2b+0x66>
   b99ec:	f814 3b01 	ldrb.w	r3, [r4], #1
   b99f0:	4601      	mov	r1, r0
   b99f2:	3b30      	subs	r3, #48	; 0x30
   b99f4:	220a      	movs	r2, #10
   b99f6:	4630      	mov	r0, r6
   b99f8:	f7ff ff76 	bl	b98e8 <__multadd>
   b99fc:	e7ee      	b.n	b99dc <__s2b+0x68>
   b99fe:	bf00      	nop
   b9a00:	000babc0 	.word	0x000babc0
   b9a04:	000bac6c 	.word	0x000bac6c

000b9a08 <__hi0bits>:
   b9a08:	0c03      	lsrs	r3, r0, #16
   b9a0a:	041b      	lsls	r3, r3, #16
   b9a0c:	b9d3      	cbnz	r3, b9a44 <__hi0bits+0x3c>
   b9a0e:	0400      	lsls	r0, r0, #16
   b9a10:	2310      	movs	r3, #16
   b9a12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b9a16:	bf04      	itt	eq
   b9a18:	0200      	lsleq	r0, r0, #8
   b9a1a:	3308      	addeq	r3, #8
   b9a1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b9a20:	bf04      	itt	eq
   b9a22:	0100      	lsleq	r0, r0, #4
   b9a24:	3304      	addeq	r3, #4
   b9a26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b9a2a:	bf04      	itt	eq
   b9a2c:	0080      	lsleq	r0, r0, #2
   b9a2e:	3302      	addeq	r3, #2
   b9a30:	2800      	cmp	r0, #0
   b9a32:	db05      	blt.n	b9a40 <__hi0bits+0x38>
   b9a34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b9a38:	f103 0301 	add.w	r3, r3, #1
   b9a3c:	bf08      	it	eq
   b9a3e:	2320      	moveq	r3, #32
   b9a40:	4618      	mov	r0, r3
   b9a42:	4770      	bx	lr
   b9a44:	2300      	movs	r3, #0
   b9a46:	e7e4      	b.n	b9a12 <__hi0bits+0xa>

000b9a48 <__lo0bits>:
   b9a48:	6803      	ldr	r3, [r0, #0]
   b9a4a:	f013 0207 	ands.w	r2, r3, #7
   b9a4e:	4601      	mov	r1, r0
   b9a50:	d00b      	beq.n	b9a6a <__lo0bits+0x22>
   b9a52:	07da      	lsls	r2, r3, #31
   b9a54:	d423      	bmi.n	b9a9e <__lo0bits+0x56>
   b9a56:	0798      	lsls	r0, r3, #30
   b9a58:	bf49      	itett	mi
   b9a5a:	085b      	lsrmi	r3, r3, #1
   b9a5c:	089b      	lsrpl	r3, r3, #2
   b9a5e:	2001      	movmi	r0, #1
   b9a60:	600b      	strmi	r3, [r1, #0]
   b9a62:	bf5c      	itt	pl
   b9a64:	600b      	strpl	r3, [r1, #0]
   b9a66:	2002      	movpl	r0, #2
   b9a68:	4770      	bx	lr
   b9a6a:	b298      	uxth	r0, r3
   b9a6c:	b9a8      	cbnz	r0, b9a9a <__lo0bits+0x52>
   b9a6e:	0c1b      	lsrs	r3, r3, #16
   b9a70:	2010      	movs	r0, #16
   b9a72:	b2da      	uxtb	r2, r3
   b9a74:	b90a      	cbnz	r2, b9a7a <__lo0bits+0x32>
   b9a76:	3008      	adds	r0, #8
   b9a78:	0a1b      	lsrs	r3, r3, #8
   b9a7a:	071a      	lsls	r2, r3, #28
   b9a7c:	bf04      	itt	eq
   b9a7e:	091b      	lsreq	r3, r3, #4
   b9a80:	3004      	addeq	r0, #4
   b9a82:	079a      	lsls	r2, r3, #30
   b9a84:	bf04      	itt	eq
   b9a86:	089b      	lsreq	r3, r3, #2
   b9a88:	3002      	addeq	r0, #2
   b9a8a:	07da      	lsls	r2, r3, #31
   b9a8c:	d403      	bmi.n	b9a96 <__lo0bits+0x4e>
   b9a8e:	085b      	lsrs	r3, r3, #1
   b9a90:	f100 0001 	add.w	r0, r0, #1
   b9a94:	d005      	beq.n	b9aa2 <__lo0bits+0x5a>
   b9a96:	600b      	str	r3, [r1, #0]
   b9a98:	4770      	bx	lr
   b9a9a:	4610      	mov	r0, r2
   b9a9c:	e7e9      	b.n	b9a72 <__lo0bits+0x2a>
   b9a9e:	2000      	movs	r0, #0
   b9aa0:	4770      	bx	lr
   b9aa2:	2020      	movs	r0, #32
   b9aa4:	4770      	bx	lr
	...

000b9aa8 <__i2b>:
   b9aa8:	b510      	push	{r4, lr}
   b9aaa:	460c      	mov	r4, r1
   b9aac:	2101      	movs	r1, #1
   b9aae:	f7ff feb9 	bl	b9824 <_Balloc>
   b9ab2:	4602      	mov	r2, r0
   b9ab4:	b928      	cbnz	r0, b9ac2 <__i2b+0x1a>
   b9ab6:	4b05      	ldr	r3, [pc, #20]	; (b9acc <__i2b+0x24>)
   b9ab8:	4805      	ldr	r0, [pc, #20]	; (b9ad0 <__i2b+0x28>)
   b9aba:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b9abe:	f7fc fba7 	bl	b6210 <__assert_func>
   b9ac2:	2301      	movs	r3, #1
   b9ac4:	6144      	str	r4, [r0, #20]
   b9ac6:	6103      	str	r3, [r0, #16]
   b9ac8:	bd10      	pop	{r4, pc}
   b9aca:	bf00      	nop
   b9acc:	000babc0 	.word	0x000babc0
   b9ad0:	000bac6c 	.word	0x000bac6c

000b9ad4 <__multiply>:
   b9ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ad8:	4691      	mov	r9, r2
   b9ada:	690a      	ldr	r2, [r1, #16]
   b9adc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b9ae0:	429a      	cmp	r2, r3
   b9ae2:	bfb8      	it	lt
   b9ae4:	460b      	movlt	r3, r1
   b9ae6:	460c      	mov	r4, r1
   b9ae8:	bfbc      	itt	lt
   b9aea:	464c      	movlt	r4, r9
   b9aec:	4699      	movlt	r9, r3
   b9aee:	6927      	ldr	r7, [r4, #16]
   b9af0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b9af4:	68a3      	ldr	r3, [r4, #8]
   b9af6:	6861      	ldr	r1, [r4, #4]
   b9af8:	eb07 060a 	add.w	r6, r7, sl
   b9afc:	42b3      	cmp	r3, r6
   b9afe:	b085      	sub	sp, #20
   b9b00:	bfb8      	it	lt
   b9b02:	3101      	addlt	r1, #1
   b9b04:	f7ff fe8e 	bl	b9824 <_Balloc>
   b9b08:	b930      	cbnz	r0, b9b18 <__multiply+0x44>
   b9b0a:	4602      	mov	r2, r0
   b9b0c:	4b44      	ldr	r3, [pc, #272]	; (b9c20 <__multiply+0x14c>)
   b9b0e:	4845      	ldr	r0, [pc, #276]	; (b9c24 <__multiply+0x150>)
   b9b10:	f240 115d 	movw	r1, #349	; 0x15d
   b9b14:	f7fc fb7c 	bl	b6210 <__assert_func>
   b9b18:	f100 0514 	add.w	r5, r0, #20
   b9b1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b9b20:	462b      	mov	r3, r5
   b9b22:	2200      	movs	r2, #0
   b9b24:	4543      	cmp	r3, r8
   b9b26:	d321      	bcc.n	b9b6c <__multiply+0x98>
   b9b28:	f104 0314 	add.w	r3, r4, #20
   b9b2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b9b30:	f109 0314 	add.w	r3, r9, #20
   b9b34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b9b38:	9202      	str	r2, [sp, #8]
   b9b3a:	1b3a      	subs	r2, r7, r4
   b9b3c:	3a15      	subs	r2, #21
   b9b3e:	f022 0203 	bic.w	r2, r2, #3
   b9b42:	3204      	adds	r2, #4
   b9b44:	f104 0115 	add.w	r1, r4, #21
   b9b48:	428f      	cmp	r7, r1
   b9b4a:	bf38      	it	cc
   b9b4c:	2204      	movcc	r2, #4
   b9b4e:	9201      	str	r2, [sp, #4]
   b9b50:	9a02      	ldr	r2, [sp, #8]
   b9b52:	9303      	str	r3, [sp, #12]
   b9b54:	429a      	cmp	r2, r3
   b9b56:	d80c      	bhi.n	b9b72 <__multiply+0x9e>
   b9b58:	2e00      	cmp	r6, #0
   b9b5a:	dd03      	ble.n	b9b64 <__multiply+0x90>
   b9b5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b9b60:	2b00      	cmp	r3, #0
   b9b62:	d05a      	beq.n	b9c1a <__multiply+0x146>
   b9b64:	6106      	str	r6, [r0, #16]
   b9b66:	b005      	add	sp, #20
   b9b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b6c:	f843 2b04 	str.w	r2, [r3], #4
   b9b70:	e7d8      	b.n	b9b24 <__multiply+0x50>
   b9b72:	f8b3 a000 	ldrh.w	sl, [r3]
   b9b76:	f1ba 0f00 	cmp.w	sl, #0
   b9b7a:	d024      	beq.n	b9bc6 <__multiply+0xf2>
   b9b7c:	f104 0e14 	add.w	lr, r4, #20
   b9b80:	46a9      	mov	r9, r5
   b9b82:	f04f 0c00 	mov.w	ip, #0
   b9b86:	f85e 2b04 	ldr.w	r2, [lr], #4
   b9b8a:	f8d9 1000 	ldr.w	r1, [r9]
   b9b8e:	fa1f fb82 	uxth.w	fp, r2
   b9b92:	b289      	uxth	r1, r1
   b9b94:	fb0a 110b 	mla	r1, sl, fp, r1
   b9b98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b9b9c:	f8d9 2000 	ldr.w	r2, [r9]
   b9ba0:	4461      	add	r1, ip
   b9ba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9ba6:	fb0a c20b 	mla	r2, sl, fp, ip
   b9baa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b9bae:	b289      	uxth	r1, r1
   b9bb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b9bb4:	4577      	cmp	r7, lr
   b9bb6:	f849 1b04 	str.w	r1, [r9], #4
   b9bba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b9bbe:	d8e2      	bhi.n	b9b86 <__multiply+0xb2>
   b9bc0:	9a01      	ldr	r2, [sp, #4]
   b9bc2:	f845 c002 	str.w	ip, [r5, r2]
   b9bc6:	9a03      	ldr	r2, [sp, #12]
   b9bc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b9bcc:	3304      	adds	r3, #4
   b9bce:	f1b9 0f00 	cmp.w	r9, #0
   b9bd2:	d020      	beq.n	b9c16 <__multiply+0x142>
   b9bd4:	6829      	ldr	r1, [r5, #0]
   b9bd6:	f104 0c14 	add.w	ip, r4, #20
   b9bda:	46ae      	mov	lr, r5
   b9bdc:	f04f 0a00 	mov.w	sl, #0
   b9be0:	f8bc b000 	ldrh.w	fp, [ip]
   b9be4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b9be8:	fb09 220b 	mla	r2, r9, fp, r2
   b9bec:	4492      	add	sl, r2
   b9bee:	b289      	uxth	r1, r1
   b9bf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b9bf4:	f84e 1b04 	str.w	r1, [lr], #4
   b9bf8:	f85c 2b04 	ldr.w	r2, [ip], #4
   b9bfc:	f8be 1000 	ldrh.w	r1, [lr]
   b9c00:	0c12      	lsrs	r2, r2, #16
   b9c02:	fb09 1102 	mla	r1, r9, r2, r1
   b9c06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b9c0a:	4567      	cmp	r7, ip
   b9c0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b9c10:	d8e6      	bhi.n	b9be0 <__multiply+0x10c>
   b9c12:	9a01      	ldr	r2, [sp, #4]
   b9c14:	50a9      	str	r1, [r5, r2]
   b9c16:	3504      	adds	r5, #4
   b9c18:	e79a      	b.n	b9b50 <__multiply+0x7c>
   b9c1a:	3e01      	subs	r6, #1
   b9c1c:	e79c      	b.n	b9b58 <__multiply+0x84>
   b9c1e:	bf00      	nop
   b9c20:	000babc0 	.word	0x000babc0
   b9c24:	000bac6c 	.word	0x000bac6c

000b9c28 <__pow5mult>:
   b9c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9c2c:	4615      	mov	r5, r2
   b9c2e:	f012 0203 	ands.w	r2, r2, #3
   b9c32:	4606      	mov	r6, r0
   b9c34:	460f      	mov	r7, r1
   b9c36:	d007      	beq.n	b9c48 <__pow5mult+0x20>
   b9c38:	4c25      	ldr	r4, [pc, #148]	; (b9cd0 <__pow5mult+0xa8>)
   b9c3a:	3a01      	subs	r2, #1
   b9c3c:	2300      	movs	r3, #0
   b9c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b9c42:	f7ff fe51 	bl	b98e8 <__multadd>
   b9c46:	4607      	mov	r7, r0
   b9c48:	10ad      	asrs	r5, r5, #2
   b9c4a:	d03d      	beq.n	b9cc8 <__pow5mult+0xa0>
   b9c4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b9c4e:	b97c      	cbnz	r4, b9c70 <__pow5mult+0x48>
   b9c50:	2010      	movs	r0, #16
   b9c52:	f7fc fa95 	bl	b6180 <malloc>
   b9c56:	4602      	mov	r2, r0
   b9c58:	6270      	str	r0, [r6, #36]	; 0x24
   b9c5a:	b928      	cbnz	r0, b9c68 <__pow5mult+0x40>
   b9c5c:	4b1d      	ldr	r3, [pc, #116]	; (b9cd4 <__pow5mult+0xac>)
   b9c5e:	481e      	ldr	r0, [pc, #120]	; (b9cd8 <__pow5mult+0xb0>)
   b9c60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b9c64:	f7fc fad4 	bl	b6210 <__assert_func>
   b9c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9c6c:	6004      	str	r4, [r0, #0]
   b9c6e:	60c4      	str	r4, [r0, #12]
   b9c70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b9c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b9c78:	b94c      	cbnz	r4, b9c8e <__pow5mult+0x66>
   b9c7a:	f240 2171 	movw	r1, #625	; 0x271
   b9c7e:	4630      	mov	r0, r6
   b9c80:	f7ff ff12 	bl	b9aa8 <__i2b>
   b9c84:	2300      	movs	r3, #0
   b9c86:	f8c8 0008 	str.w	r0, [r8, #8]
   b9c8a:	4604      	mov	r4, r0
   b9c8c:	6003      	str	r3, [r0, #0]
   b9c8e:	f04f 0900 	mov.w	r9, #0
   b9c92:	07eb      	lsls	r3, r5, #31
   b9c94:	d50a      	bpl.n	b9cac <__pow5mult+0x84>
   b9c96:	4639      	mov	r1, r7
   b9c98:	4622      	mov	r2, r4
   b9c9a:	4630      	mov	r0, r6
   b9c9c:	f7ff ff1a 	bl	b9ad4 <__multiply>
   b9ca0:	4639      	mov	r1, r7
   b9ca2:	4680      	mov	r8, r0
   b9ca4:	4630      	mov	r0, r6
   b9ca6:	f7ff fdfd 	bl	b98a4 <_Bfree>
   b9caa:	4647      	mov	r7, r8
   b9cac:	106d      	asrs	r5, r5, #1
   b9cae:	d00b      	beq.n	b9cc8 <__pow5mult+0xa0>
   b9cb0:	6820      	ldr	r0, [r4, #0]
   b9cb2:	b938      	cbnz	r0, b9cc4 <__pow5mult+0x9c>
   b9cb4:	4622      	mov	r2, r4
   b9cb6:	4621      	mov	r1, r4
   b9cb8:	4630      	mov	r0, r6
   b9cba:	f7ff ff0b 	bl	b9ad4 <__multiply>
   b9cbe:	6020      	str	r0, [r4, #0]
   b9cc0:	f8c0 9000 	str.w	r9, [r0]
   b9cc4:	4604      	mov	r4, r0
   b9cc6:	e7e4      	b.n	b9c92 <__pow5mult+0x6a>
   b9cc8:	4638      	mov	r0, r7
   b9cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9cce:	bf00      	nop
   b9cd0:	000bade0 	.word	0x000bade0
   b9cd4:	000ba94d 	.word	0x000ba94d
   b9cd8:	000bac6c 	.word	0x000bac6c

000b9cdc <__lshift>:
   b9cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ce0:	460c      	mov	r4, r1
   b9ce2:	6849      	ldr	r1, [r1, #4]
   b9ce4:	6923      	ldr	r3, [r4, #16]
   b9ce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b9cea:	68a3      	ldr	r3, [r4, #8]
   b9cec:	4607      	mov	r7, r0
   b9cee:	4691      	mov	r9, r2
   b9cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b9cf4:	f108 0601 	add.w	r6, r8, #1
   b9cf8:	42b3      	cmp	r3, r6
   b9cfa:	db0b      	blt.n	b9d14 <__lshift+0x38>
   b9cfc:	4638      	mov	r0, r7
   b9cfe:	f7ff fd91 	bl	b9824 <_Balloc>
   b9d02:	4605      	mov	r5, r0
   b9d04:	b948      	cbnz	r0, b9d1a <__lshift+0x3e>
   b9d06:	4602      	mov	r2, r0
   b9d08:	4b2a      	ldr	r3, [pc, #168]	; (b9db4 <__lshift+0xd8>)
   b9d0a:	482b      	ldr	r0, [pc, #172]	; (b9db8 <__lshift+0xdc>)
   b9d0c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b9d10:	f7fc fa7e 	bl	b6210 <__assert_func>
   b9d14:	3101      	adds	r1, #1
   b9d16:	005b      	lsls	r3, r3, #1
   b9d18:	e7ee      	b.n	b9cf8 <__lshift+0x1c>
   b9d1a:	2300      	movs	r3, #0
   b9d1c:	f100 0114 	add.w	r1, r0, #20
   b9d20:	f100 0210 	add.w	r2, r0, #16
   b9d24:	4618      	mov	r0, r3
   b9d26:	4553      	cmp	r3, sl
   b9d28:	db37      	blt.n	b9d9a <__lshift+0xbe>
   b9d2a:	6920      	ldr	r0, [r4, #16]
   b9d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b9d30:	f104 0314 	add.w	r3, r4, #20
   b9d34:	f019 091f 	ands.w	r9, r9, #31
   b9d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b9d3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b9d40:	d02f      	beq.n	b9da2 <__lshift+0xc6>
   b9d42:	f1c9 0e20 	rsb	lr, r9, #32
   b9d46:	468a      	mov	sl, r1
   b9d48:	f04f 0c00 	mov.w	ip, #0
   b9d4c:	681a      	ldr	r2, [r3, #0]
   b9d4e:	fa02 f209 	lsl.w	r2, r2, r9
   b9d52:	ea42 020c 	orr.w	r2, r2, ip
   b9d56:	f84a 2b04 	str.w	r2, [sl], #4
   b9d5a:	f853 2b04 	ldr.w	r2, [r3], #4
   b9d5e:	4298      	cmp	r0, r3
   b9d60:	fa22 fc0e 	lsr.w	ip, r2, lr
   b9d64:	d8f2      	bhi.n	b9d4c <__lshift+0x70>
   b9d66:	1b03      	subs	r3, r0, r4
   b9d68:	3b15      	subs	r3, #21
   b9d6a:	f023 0303 	bic.w	r3, r3, #3
   b9d6e:	3304      	adds	r3, #4
   b9d70:	f104 0215 	add.w	r2, r4, #21
   b9d74:	4290      	cmp	r0, r2
   b9d76:	bf38      	it	cc
   b9d78:	2304      	movcc	r3, #4
   b9d7a:	f841 c003 	str.w	ip, [r1, r3]
   b9d7e:	f1bc 0f00 	cmp.w	ip, #0
   b9d82:	d001      	beq.n	b9d88 <__lshift+0xac>
   b9d84:	f108 0602 	add.w	r6, r8, #2
   b9d88:	3e01      	subs	r6, #1
   b9d8a:	4638      	mov	r0, r7
   b9d8c:	612e      	str	r6, [r5, #16]
   b9d8e:	4621      	mov	r1, r4
   b9d90:	f7ff fd88 	bl	b98a4 <_Bfree>
   b9d94:	4628      	mov	r0, r5
   b9d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9d9a:	f842 0f04 	str.w	r0, [r2, #4]!
   b9d9e:	3301      	adds	r3, #1
   b9da0:	e7c1      	b.n	b9d26 <__lshift+0x4a>
   b9da2:	3904      	subs	r1, #4
   b9da4:	f853 2b04 	ldr.w	r2, [r3], #4
   b9da8:	f841 2f04 	str.w	r2, [r1, #4]!
   b9dac:	4298      	cmp	r0, r3
   b9dae:	d8f9      	bhi.n	b9da4 <__lshift+0xc8>
   b9db0:	e7ea      	b.n	b9d88 <__lshift+0xac>
   b9db2:	bf00      	nop
   b9db4:	000babc0 	.word	0x000babc0
   b9db8:	000bac6c 	.word	0x000bac6c

000b9dbc <__mcmp>:
   b9dbc:	b530      	push	{r4, r5, lr}
   b9dbe:	6902      	ldr	r2, [r0, #16]
   b9dc0:	690c      	ldr	r4, [r1, #16]
   b9dc2:	1b12      	subs	r2, r2, r4
   b9dc4:	d10e      	bne.n	b9de4 <__mcmp+0x28>
   b9dc6:	f100 0314 	add.w	r3, r0, #20
   b9dca:	3114      	adds	r1, #20
   b9dcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b9dd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b9dd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b9dd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b9ddc:	42a5      	cmp	r5, r4
   b9dde:	d003      	beq.n	b9de8 <__mcmp+0x2c>
   b9de0:	d305      	bcc.n	b9dee <__mcmp+0x32>
   b9de2:	2201      	movs	r2, #1
   b9de4:	4610      	mov	r0, r2
   b9de6:	bd30      	pop	{r4, r5, pc}
   b9de8:	4283      	cmp	r3, r0
   b9dea:	d3f3      	bcc.n	b9dd4 <__mcmp+0x18>
   b9dec:	e7fa      	b.n	b9de4 <__mcmp+0x28>
   b9dee:	f04f 32ff 	mov.w	r2, #4294967295
   b9df2:	e7f7      	b.n	b9de4 <__mcmp+0x28>

000b9df4 <__mdiff>:
   b9df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9df8:	460c      	mov	r4, r1
   b9dfa:	4606      	mov	r6, r0
   b9dfc:	4611      	mov	r1, r2
   b9dfe:	4620      	mov	r0, r4
   b9e00:	4690      	mov	r8, r2
   b9e02:	f7ff ffdb 	bl	b9dbc <__mcmp>
   b9e06:	1e05      	subs	r5, r0, #0
   b9e08:	d110      	bne.n	b9e2c <__mdiff+0x38>
   b9e0a:	4629      	mov	r1, r5
   b9e0c:	4630      	mov	r0, r6
   b9e0e:	f7ff fd09 	bl	b9824 <_Balloc>
   b9e12:	b930      	cbnz	r0, b9e22 <__mdiff+0x2e>
   b9e14:	4b3a      	ldr	r3, [pc, #232]	; (b9f00 <__mdiff+0x10c>)
   b9e16:	4602      	mov	r2, r0
   b9e18:	f240 2132 	movw	r1, #562	; 0x232
   b9e1c:	4839      	ldr	r0, [pc, #228]	; (b9f04 <__mdiff+0x110>)
   b9e1e:	f7fc f9f7 	bl	b6210 <__assert_func>
   b9e22:	2301      	movs	r3, #1
   b9e24:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b9e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9e2c:	bfa4      	itt	ge
   b9e2e:	4643      	movge	r3, r8
   b9e30:	46a0      	movge	r8, r4
   b9e32:	4630      	mov	r0, r6
   b9e34:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b9e38:	bfa6      	itte	ge
   b9e3a:	461c      	movge	r4, r3
   b9e3c:	2500      	movge	r5, #0
   b9e3e:	2501      	movlt	r5, #1
   b9e40:	f7ff fcf0 	bl	b9824 <_Balloc>
   b9e44:	b920      	cbnz	r0, b9e50 <__mdiff+0x5c>
   b9e46:	4b2e      	ldr	r3, [pc, #184]	; (b9f00 <__mdiff+0x10c>)
   b9e48:	4602      	mov	r2, r0
   b9e4a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b9e4e:	e7e5      	b.n	b9e1c <__mdiff+0x28>
   b9e50:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b9e54:	6926      	ldr	r6, [r4, #16]
   b9e56:	60c5      	str	r5, [r0, #12]
   b9e58:	f104 0914 	add.w	r9, r4, #20
   b9e5c:	f108 0514 	add.w	r5, r8, #20
   b9e60:	f100 0e14 	add.w	lr, r0, #20
   b9e64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b9e68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b9e6c:	f108 0210 	add.w	r2, r8, #16
   b9e70:	46f2      	mov	sl, lr
   b9e72:	2100      	movs	r1, #0
   b9e74:	f859 3b04 	ldr.w	r3, [r9], #4
   b9e78:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b9e7c:	fa1f f883 	uxth.w	r8, r3
   b9e80:	fa11 f18b 	uxtah	r1, r1, fp
   b9e84:	0c1b      	lsrs	r3, r3, #16
   b9e86:	eba1 0808 	sub.w	r8, r1, r8
   b9e8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b9e8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b9e92:	fa1f f888 	uxth.w	r8, r8
   b9e96:	1419      	asrs	r1, r3, #16
   b9e98:	454e      	cmp	r6, r9
   b9e9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b9e9e:	f84a 3b04 	str.w	r3, [sl], #4
   b9ea2:	d8e7      	bhi.n	b9e74 <__mdiff+0x80>
   b9ea4:	1b33      	subs	r3, r6, r4
   b9ea6:	3b15      	subs	r3, #21
   b9ea8:	f023 0303 	bic.w	r3, r3, #3
   b9eac:	3304      	adds	r3, #4
   b9eae:	3415      	adds	r4, #21
   b9eb0:	42a6      	cmp	r6, r4
   b9eb2:	bf38      	it	cc
   b9eb4:	2304      	movcc	r3, #4
   b9eb6:	441d      	add	r5, r3
   b9eb8:	4473      	add	r3, lr
   b9eba:	469e      	mov	lr, r3
   b9ebc:	462e      	mov	r6, r5
   b9ebe:	4566      	cmp	r6, ip
   b9ec0:	d30e      	bcc.n	b9ee0 <__mdiff+0xec>
   b9ec2:	f10c 0203 	add.w	r2, ip, #3
   b9ec6:	1b52      	subs	r2, r2, r5
   b9ec8:	f022 0203 	bic.w	r2, r2, #3
   b9ecc:	3d03      	subs	r5, #3
   b9ece:	45ac      	cmp	ip, r5
   b9ed0:	bf38      	it	cc
   b9ed2:	2200      	movcc	r2, #0
   b9ed4:	441a      	add	r2, r3
   b9ed6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b9eda:	b17b      	cbz	r3, b9efc <__mdiff+0x108>
   b9edc:	6107      	str	r7, [r0, #16]
   b9ede:	e7a3      	b.n	b9e28 <__mdiff+0x34>
   b9ee0:	f856 8b04 	ldr.w	r8, [r6], #4
   b9ee4:	fa11 f288 	uxtah	r2, r1, r8
   b9ee8:	1414      	asrs	r4, r2, #16
   b9eea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b9eee:	b292      	uxth	r2, r2
   b9ef0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b9ef4:	f84e 2b04 	str.w	r2, [lr], #4
   b9ef8:	1421      	asrs	r1, r4, #16
   b9efa:	e7e0      	b.n	b9ebe <__mdiff+0xca>
   b9efc:	3f01      	subs	r7, #1
   b9efe:	e7ea      	b.n	b9ed6 <__mdiff+0xe2>
   b9f00:	000babc0 	.word	0x000babc0
   b9f04:	000bac6c 	.word	0x000bac6c

000b9f08 <__ulp>:
   b9f08:	b082      	sub	sp, #8
   b9f0a:	ed8d 0b00 	vstr	d0, [sp]
   b9f0e:	9b01      	ldr	r3, [sp, #4]
   b9f10:	4912      	ldr	r1, [pc, #72]	; (b9f5c <__ulp+0x54>)
   b9f12:	4019      	ands	r1, r3
   b9f14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b9f18:	2900      	cmp	r1, #0
   b9f1a:	dd05      	ble.n	b9f28 <__ulp+0x20>
   b9f1c:	2200      	movs	r2, #0
   b9f1e:	460b      	mov	r3, r1
   b9f20:	ec43 2b10 	vmov	d0, r2, r3
   b9f24:	b002      	add	sp, #8
   b9f26:	4770      	bx	lr
   b9f28:	4249      	negs	r1, r1
   b9f2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b9f2e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b9f32:	f04f 0200 	mov.w	r2, #0
   b9f36:	f04f 0300 	mov.w	r3, #0
   b9f3a:	da04      	bge.n	b9f46 <__ulp+0x3e>
   b9f3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b9f40:	fa41 f300 	asr.w	r3, r1, r0
   b9f44:	e7ec      	b.n	b9f20 <__ulp+0x18>
   b9f46:	f1a0 0114 	sub.w	r1, r0, #20
   b9f4a:	291e      	cmp	r1, #30
   b9f4c:	bfda      	itte	le
   b9f4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b9f52:	fa20 f101 	lsrle.w	r1, r0, r1
   b9f56:	2101      	movgt	r1, #1
   b9f58:	460a      	mov	r2, r1
   b9f5a:	e7e1      	b.n	b9f20 <__ulp+0x18>
   b9f5c:	7ff00000 	.word	0x7ff00000

000b9f60 <__b2d>:
   b9f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f62:	6905      	ldr	r5, [r0, #16]
   b9f64:	f100 0714 	add.w	r7, r0, #20
   b9f68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b9f6c:	1f2e      	subs	r6, r5, #4
   b9f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b9f72:	4620      	mov	r0, r4
   b9f74:	f7ff fd48 	bl	b9a08 <__hi0bits>
   b9f78:	f1c0 0320 	rsb	r3, r0, #32
   b9f7c:	280a      	cmp	r0, #10
   b9f7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; b9ffc <__b2d+0x9c>
   b9f82:	600b      	str	r3, [r1, #0]
   b9f84:	dc14      	bgt.n	b9fb0 <__b2d+0x50>
   b9f86:	f1c0 0e0b 	rsb	lr, r0, #11
   b9f8a:	fa24 f10e 	lsr.w	r1, r4, lr
   b9f8e:	42b7      	cmp	r7, r6
   b9f90:	ea41 030c 	orr.w	r3, r1, ip
   b9f94:	bf34      	ite	cc
   b9f96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9f9a:	2100      	movcs	r1, #0
   b9f9c:	3015      	adds	r0, #21
   b9f9e:	fa04 f000 	lsl.w	r0, r4, r0
   b9fa2:	fa21 f10e 	lsr.w	r1, r1, lr
   b9fa6:	ea40 0201 	orr.w	r2, r0, r1
   b9faa:	ec43 2b10 	vmov	d0, r2, r3
   b9fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9fb0:	42b7      	cmp	r7, r6
   b9fb2:	bf3a      	itte	cc
   b9fb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b9fb8:	f1a5 0608 	subcc.w	r6, r5, #8
   b9fbc:	2100      	movcs	r1, #0
   b9fbe:	380b      	subs	r0, #11
   b9fc0:	d017      	beq.n	b9ff2 <__b2d+0x92>
   b9fc2:	f1c0 0c20 	rsb	ip, r0, #32
   b9fc6:	fa04 f500 	lsl.w	r5, r4, r0
   b9fca:	42be      	cmp	r6, r7
   b9fcc:	fa21 f40c 	lsr.w	r4, r1, ip
   b9fd0:	ea45 0504 	orr.w	r5, r5, r4
   b9fd4:	bf8c      	ite	hi
   b9fd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b9fda:	2400      	movls	r4, #0
   b9fdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b9fe0:	fa01 f000 	lsl.w	r0, r1, r0
   b9fe4:	fa24 f40c 	lsr.w	r4, r4, ip
   b9fe8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b9fec:	ea40 0204 	orr.w	r2, r0, r4
   b9ff0:	e7db      	b.n	b9faa <__b2d+0x4a>
   b9ff2:	ea44 030c 	orr.w	r3, r4, ip
   b9ff6:	460a      	mov	r2, r1
   b9ff8:	e7d7      	b.n	b9faa <__b2d+0x4a>
   b9ffa:	bf00      	nop
   b9ffc:	3ff00000 	.word	0x3ff00000

000ba000 <__d2b>:
   ba000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba004:	4689      	mov	r9, r1
   ba006:	2101      	movs	r1, #1
   ba008:	ec57 6b10 	vmov	r6, r7, d0
   ba00c:	4690      	mov	r8, r2
   ba00e:	f7ff fc09 	bl	b9824 <_Balloc>
   ba012:	4604      	mov	r4, r0
   ba014:	b930      	cbnz	r0, ba024 <__d2b+0x24>
   ba016:	4602      	mov	r2, r0
   ba018:	4b25      	ldr	r3, [pc, #148]	; (ba0b0 <__d2b+0xb0>)
   ba01a:	4826      	ldr	r0, [pc, #152]	; (ba0b4 <__d2b+0xb4>)
   ba01c:	f240 310a 	movw	r1, #778	; 0x30a
   ba020:	f7fc f8f6 	bl	b6210 <__assert_func>
   ba024:	f3c7 550a 	ubfx	r5, r7, #20, #11
   ba028:	f3c7 0313 	ubfx	r3, r7, #0, #20
   ba02c:	bb35      	cbnz	r5, ba07c <__d2b+0x7c>
   ba02e:	2e00      	cmp	r6, #0
   ba030:	9301      	str	r3, [sp, #4]
   ba032:	d028      	beq.n	ba086 <__d2b+0x86>
   ba034:	4668      	mov	r0, sp
   ba036:	9600      	str	r6, [sp, #0]
   ba038:	f7ff fd06 	bl	b9a48 <__lo0bits>
   ba03c:	9900      	ldr	r1, [sp, #0]
   ba03e:	b300      	cbz	r0, ba082 <__d2b+0x82>
   ba040:	9a01      	ldr	r2, [sp, #4]
   ba042:	f1c0 0320 	rsb	r3, r0, #32
   ba046:	fa02 f303 	lsl.w	r3, r2, r3
   ba04a:	430b      	orrs	r3, r1
   ba04c:	40c2      	lsrs	r2, r0
   ba04e:	6163      	str	r3, [r4, #20]
   ba050:	9201      	str	r2, [sp, #4]
   ba052:	9b01      	ldr	r3, [sp, #4]
   ba054:	61a3      	str	r3, [r4, #24]
   ba056:	2b00      	cmp	r3, #0
   ba058:	bf14      	ite	ne
   ba05a:	2202      	movne	r2, #2
   ba05c:	2201      	moveq	r2, #1
   ba05e:	6122      	str	r2, [r4, #16]
   ba060:	b1d5      	cbz	r5, ba098 <__d2b+0x98>
   ba062:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   ba066:	4405      	add	r5, r0
   ba068:	f8c9 5000 	str.w	r5, [r9]
   ba06c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   ba070:	f8c8 0000 	str.w	r0, [r8]
   ba074:	4620      	mov	r0, r4
   ba076:	b003      	add	sp, #12
   ba078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba07c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   ba080:	e7d5      	b.n	ba02e <__d2b+0x2e>
   ba082:	6161      	str	r1, [r4, #20]
   ba084:	e7e5      	b.n	ba052 <__d2b+0x52>
   ba086:	a801      	add	r0, sp, #4
   ba088:	f7ff fcde 	bl	b9a48 <__lo0bits>
   ba08c:	9b01      	ldr	r3, [sp, #4]
   ba08e:	6163      	str	r3, [r4, #20]
   ba090:	2201      	movs	r2, #1
   ba092:	6122      	str	r2, [r4, #16]
   ba094:	3020      	adds	r0, #32
   ba096:	e7e3      	b.n	ba060 <__d2b+0x60>
   ba098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   ba09c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   ba0a0:	f8c9 0000 	str.w	r0, [r9]
   ba0a4:	6918      	ldr	r0, [r3, #16]
   ba0a6:	f7ff fcaf 	bl	b9a08 <__hi0bits>
   ba0aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   ba0ae:	e7df      	b.n	ba070 <__d2b+0x70>
   ba0b0:	000babc0 	.word	0x000babc0
   ba0b4:	000bac6c 	.word	0x000bac6c

000ba0b8 <__ratio>:
   ba0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba0bc:	4688      	mov	r8, r1
   ba0be:	4669      	mov	r1, sp
   ba0c0:	4681      	mov	r9, r0
   ba0c2:	f7ff ff4d 	bl	b9f60 <__b2d>
   ba0c6:	a901      	add	r1, sp, #4
   ba0c8:	4640      	mov	r0, r8
   ba0ca:	ec55 4b10 	vmov	r4, r5, d0
   ba0ce:	f7ff ff47 	bl	b9f60 <__b2d>
   ba0d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   ba0d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   ba0da:	eba3 0c02 	sub.w	ip, r3, r2
   ba0de:	e9dd 3200 	ldrd	r3, r2, [sp]
   ba0e2:	1a9b      	subs	r3, r3, r2
   ba0e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   ba0e8:	ec51 0b10 	vmov	r0, r1, d0
   ba0ec:	2b00      	cmp	r3, #0
   ba0ee:	bfd6      	itet	le
   ba0f0:	460a      	movle	r2, r1
   ba0f2:	462a      	movgt	r2, r5
   ba0f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   ba0f8:	468b      	mov	fp, r1
   ba0fa:	462f      	mov	r7, r5
   ba0fc:	bfd4      	ite	le
   ba0fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   ba102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   ba106:	4620      	mov	r0, r4
   ba108:	ee10 2a10 	vmov	r2, s0
   ba10c:	465b      	mov	r3, fp
   ba10e:	4639      	mov	r1, r7
   ba110:	f7fa fa6c 	bl	b45ec <__aeabi_ddiv>
   ba114:	ec41 0b10 	vmov	d0, r0, r1
   ba118:	b003      	add	sp, #12
   ba11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000ba11e <__copybits>:
   ba11e:	3901      	subs	r1, #1
   ba120:	b570      	push	{r4, r5, r6, lr}
   ba122:	1149      	asrs	r1, r1, #5
   ba124:	6914      	ldr	r4, [r2, #16]
   ba126:	3101      	adds	r1, #1
   ba128:	f102 0314 	add.w	r3, r2, #20
   ba12c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   ba130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   ba134:	1f05      	subs	r5, r0, #4
   ba136:	42a3      	cmp	r3, r4
   ba138:	d30c      	bcc.n	ba154 <__copybits+0x36>
   ba13a:	1aa3      	subs	r3, r4, r2
   ba13c:	3b11      	subs	r3, #17
   ba13e:	f023 0303 	bic.w	r3, r3, #3
   ba142:	3211      	adds	r2, #17
   ba144:	42a2      	cmp	r2, r4
   ba146:	bf88      	it	hi
   ba148:	2300      	movhi	r3, #0
   ba14a:	4418      	add	r0, r3
   ba14c:	2300      	movs	r3, #0
   ba14e:	4288      	cmp	r0, r1
   ba150:	d305      	bcc.n	ba15e <__copybits+0x40>
   ba152:	bd70      	pop	{r4, r5, r6, pc}
   ba154:	f853 6b04 	ldr.w	r6, [r3], #4
   ba158:	f845 6f04 	str.w	r6, [r5, #4]!
   ba15c:	e7eb      	b.n	ba136 <__copybits+0x18>
   ba15e:	f840 3b04 	str.w	r3, [r0], #4
   ba162:	e7f4      	b.n	ba14e <__copybits+0x30>

000ba164 <__any_on>:
   ba164:	f100 0214 	add.w	r2, r0, #20
   ba168:	6900      	ldr	r0, [r0, #16]
   ba16a:	114b      	asrs	r3, r1, #5
   ba16c:	4298      	cmp	r0, r3
   ba16e:	b510      	push	{r4, lr}
   ba170:	db11      	blt.n	ba196 <__any_on+0x32>
   ba172:	dd0a      	ble.n	ba18a <__any_on+0x26>
   ba174:	f011 011f 	ands.w	r1, r1, #31
   ba178:	d007      	beq.n	ba18a <__any_on+0x26>
   ba17a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   ba17e:	fa24 f001 	lsr.w	r0, r4, r1
   ba182:	fa00 f101 	lsl.w	r1, r0, r1
   ba186:	428c      	cmp	r4, r1
   ba188:	d10b      	bne.n	ba1a2 <__any_on+0x3e>
   ba18a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   ba18e:	4293      	cmp	r3, r2
   ba190:	d803      	bhi.n	ba19a <__any_on+0x36>
   ba192:	2000      	movs	r0, #0
   ba194:	bd10      	pop	{r4, pc}
   ba196:	4603      	mov	r3, r0
   ba198:	e7f7      	b.n	ba18a <__any_on+0x26>
   ba19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   ba19e:	2900      	cmp	r1, #0
   ba1a0:	d0f5      	beq.n	ba18e <__any_on+0x2a>
   ba1a2:	2001      	movs	r0, #1
   ba1a4:	e7f6      	b.n	ba194 <__any_on+0x30>

000ba1a6 <_calloc_r>:
   ba1a6:	b513      	push	{r0, r1, r4, lr}
   ba1a8:	434a      	muls	r2, r1
   ba1aa:	4611      	mov	r1, r2
   ba1ac:	9201      	str	r2, [sp, #4]
   ba1ae:	f7fc f81f 	bl	b61f0 <_malloc_r>
   ba1b2:	4604      	mov	r4, r0
   ba1b4:	b118      	cbz	r0, ba1be <_calloc_r+0x18>
   ba1b6:	9a01      	ldr	r2, [sp, #4]
   ba1b8:	2100      	movs	r1, #0
   ba1ba:	f7fe f840 	bl	b823e <memset>
   ba1be:	4620      	mov	r0, r4
   ba1c0:	b002      	add	sp, #8
   ba1c2:	bd10      	pop	{r4, pc}
   ba1c4:	0000      	movs	r0, r0
	...

000ba1c8 <nan>:
   ba1c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; ba1d0 <nan+0x8>
   ba1cc:	4770      	bx	lr
   ba1ce:	bf00      	nop
   ba1d0:	00000000 	.word	0x00000000
   ba1d4:	7ff80000 	.word	0x7ff80000

000ba1d8 <__ascii_wctomb>:
   ba1d8:	b149      	cbz	r1, ba1ee <__ascii_wctomb+0x16>
   ba1da:	2aff      	cmp	r2, #255	; 0xff
   ba1dc:	bf85      	ittet	hi
   ba1de:	238a      	movhi	r3, #138	; 0x8a
   ba1e0:	6003      	strhi	r3, [r0, #0]
   ba1e2:	700a      	strbls	r2, [r1, #0]
   ba1e4:	f04f 30ff 	movhi.w	r0, #4294967295
   ba1e8:	bf98      	it	ls
   ba1ea:	2001      	movls	r0, #1
   ba1ec:	4770      	bx	lr
   ba1ee:	4608      	mov	r0, r1
   ba1f0:	4770      	bx	lr

000ba1f2 <link_code_end>:
	...

000ba1f4 <link_const_data_start>:
   ba1f4:	514d0400 	.word	0x514d0400
   ba1f8:	00045454 	.word	0x00045454
   ba1fc:	49514d06 	.word	0x49514d06
   ba200:	03706473 	.word	0x03706473

000ba204 <dynalib_user>:
   ba204:	000b4a45 000b4a81 000b4aa9 000b4aad     EJ...J...J...J..
   ba214:	00000000 6c6c6163 6b636162 6c616320     ....callback cal
   ba224:	0064656c 646e6168 735f656c 6f736e65     led.handle_senso
   ba234:	61632072 64656c6c 73616200 735f6369     r called.basic_s
   ba244:	6e697274 653a3a67 65736172 3a732500     tring::erase.%s:
   ba254:	705f5f20 2820736f 63696877 73692068      __pos (which is
   ba264:	757a2520 203e2029 73696874 69733e2d      %zu) > this->si
   ba274:	2928657a 68772820 20686369 25207369     ze() (which is %
   ba284:	0029757a 41544144 43415020 4547414b     zu).DATA PACKAGE
   ba294:	54002320 736e6172 7373696d 206e6f69      #.Transmission 
   ba2a4:	676e656c 203a6874 23232300 23232323     length: .#######
   ba2b4:	23232323 20232323 4e455645 23232054     ####### EVENT ##
   ba2c4:	23232323 23232323 23232323 00232323     ###############.
   ba2d4:	23232323 23232323 23232323 45202323     ############## E
   ba2e4:	544e4556 444e4520 23232320 23232323     VENT END #######
   ba2f4:	23232323 23232323 23232323 62002323     ##############.b
   ba304:	63697361 7274735f 3a676e69 7070613a     asic_string::app
   ba314:	00646e65 55504f50 4554414c 21444545     end.POPULATEEED!
   ba324:	6d492021 206f7320 70706168 2c002e79     ! Im so happy..,
   ba334:	2a250021 2a252d64 64252d64 3a642554     !.%*d-%*d-%dT%d:
   ba344:	3a642a25 00642a25 676e6152 73692065     %*d:%*d.Range is
   ba354:	5400203a 65744900 69746172 23206e6f     : .T.Iteration #
   ba364:	736f6300 6f685f74 005b7275 00203a5d     .cost_hour[.]: .
   ba374:	6f636552 63656e6e 676e6974 61707300     Reconnecting.spa
   ba384:	6c636b72 746e6569 716d005f 43007474     rkclient_.mqtt.C
   ba394:	55434c41 4954414c 4800474e 65686769     ALCULATING.Highe
   ba3a4:	70207473 65636972 20666f20 20656874     st price of the 
   ba3b4:	3a796164 0a662520 776f4c00 20747365     day: %f..Lowest 
   ba3c4:	63697270 666f2065 65687420 79616420     price of the day
   ba3d4:	6625203a 6f48000a 20737275 7420666f     : %f..Hours of t
   ba3e4:	64206568 77207961 65726568 656c6520     he day where ele
   ba3f4:	69727463 79746963 20736920 68746977     ctricity is with
   ba404:	61206e69 70656363 20646574 676e6172     in accepted rang
   ba414:	000a3a65 64323025 206f7420 64323025     e:..%02d to %02d
   ba424:	6c43000a 746e6569 73696420 6e6e6f63     ..Client disconn
   ba434:	65746365 4c000a64 74686769 6425203a     ected..Light: %d
   ba444:	7543000a 6e657272 48482074 3a4d4d3a     ..Current HH:MM:
   ba454:	32302520 30253a64 000a6432 77206e49      %02d:%02d..In w
   ba464:	0a6b726f 65684300 69287061 20296873     ork..Cheap(ish) 
   ba474:	72756f68 666f2073 65687420 79616420     hours of the day
   ba484:	2500203a 20643230 25206f74 2c643230     : .%02d to %02d,
   ba494:	6f4c0020 72702077 20656369 72756f68      .Low price hour
   ba4a4:	65520073 76696563 70206465 7265776f     s.Received power
   ba4b4:	7465672f 6f70000a 00726577 7922207b     /get..power.{ "y
   ba4c4:	22726165 2522203a 202c2264 6f6d2200     ear": "%d", ."mo
   ba4d4:	2268746e 2522203a 22643230 2200202c     nth": "%02d", ."
   ba4e4:	22796164 2522203a 22643230 2200202c     day": "%02d", ."
   ba4f4:	5f796164 226f7774 2522203a 22643230     day_two": "%02d"
   ba504:	2200202c 72756f68 22203a22 64323025     , ."hour": "%02d
   ba514:	007d2022 72706c65 72657369 74616400     " }.elpriser.dat
   ba524:	65722061 73657571 20646574 7570202d     a requested - pu
   ba534:	73696c62 20646568 706c6522 65736972     blished "elprise
   ba544:	67002272 705f7465 65636972 75730073     r".get_prices.su
   ba554:	72637362 64656269 6552002e 6e727574     bscribed..Return
   ba564:	6c617620 203a6575 68006425 6f6c6c65      value: %d.hello
   ba574:	726f7720 7000646c 7265776f 7465672f      world.power/get
   ba584:	776f7000 702f7265 65636972 796d0073     .power/prices.my
   ba594:	63697250 6e614865 72656c64 72696620     PriceHandler fir
   ba5a4:	31006465 312e3239 312e3836 3230312e     ed.192.168.1.102
   ba5b4:	00000000                                ....

000ba5b8 <_ZTVN5spark13EthernetClassE>:
	...
   ba5c0:	000b629f 000b6295 000b628b 000b6281     .b...b...b...b..
   ba5d0:	000b6275 000b6269 000b7935 000b793d     ub..ib..5y..=y..
   ba5e0:	000b625d 000b6255 000b624b 000b6241     ]b..Ub..Kb..Ab..
   ba5f0:	000b796d                                my..

000ba5f4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba5fc:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   ba60c:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000ba61c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba624:	000b69f5 000b69fb 000b6a39 000b6a09     .i...i..9j...j..
   ba634:	000b69f7                                .i..

000ba638 <_ZTV9IPAddress>:
	...
   ba640:	000b6f35 000b6f25 000b6f27              5o..%o..'o..

000ba64c <_ZTV9USBSerial>:
	...
   ba654:	000b7047 000b70af 000b7085 000b65c9     Gp...p...p...e..
   ba664:	000b7077 000b7049 000b7059 000b70a9     wp..Ip..Yp...p..
   ba674:	000b7069 000b7041                       ip..Ap..

000ba67c <_ZTV11USARTSerial>:
	...
   ba684:	000b7199 000b7205 000b71dd 000b65c9     .q...r...q...e..
   ba694:	000b71ad 000b71c9 000b71bb 000b71d7     .q...q...q...q..
   ba6a4:	000b719b 000b719f                       .q...q..

000ba6ac <_ZTV7TwoWire>:
	...
   ba6b4:	000b7265 000b72af 000b7287 000b7267     er...r...r..gr..
   ba6c4:	000b728f 000b7297 000b729f 000b72a7     .r...r...r...r..
   ba6d4:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   ba6e4:	203d2072 00006425                       r = %d..

000ba6ec <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba6f4:	000b7365 000b7389 000b7873 000b7397     es...s..sx...s..
   ba704:	000b7369                                is..

000ba708 <_ZTV9TCPClient>:
	...
   ba710:	000b6885 000b689d 000b72e1 000b72fb     .h...h...r...r..
   ba720:	000b7709 000b7325 000b757f 000b7359     .w..%s...u..Ys..
   ba730:	000b7611 000b7451 000b75ad 000b77bd     .v..Qt...u...w..
   ba740:	000b754d 000b735b 000b730d 000b739d     Mu..[s...s...s..
   ba750:	000b7431                                1t..

000ba754 <_ZTVN5spark9WiFiClassE>:
	...
   ba75c:	000b78d7 000b78cd 000b78c3 000b7879     .x...x...x..yx..
   ba76c:	000b78b7 000b78ab 000b7935 000b793d     .x...x..5y..=y..
   ba77c:	000b789f 000b7897 000b788d 000b7883     .x...x...x...x..
   ba78c:	000b796d                                my..

000ba790 <_ZTVN5spark12NetworkClassE>:
	...
   ba798:	000b78f5 000b78ff 000b7909 000b7913     .x...x...y...y..
   ba7a8:	000b791d 000b7929 000b7935 000b793d     .y..)y..5y..=y..
   ba7b8:	000b7945 000b7951 000b7959 000b7963     Ey..Qy..Yy..cy..
   ba7c8:	000b796d                                my..

000ba7cc <_ZSt7nothrow>:
	...

000ba7cd <_ZTSSt19_Sp_make_shared_tag>:
   ba7cd:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   ba7dd:	5f646572 00676174                        red_tag....

000ba7e8 <_ZTISt19_Sp_make_shared_tag>:
   ba7e8:	000ba8b4 000ba7cd 20746f6e 756f6e65     ........not enou
   ba7f8:	73206867 65636170 726f6620 726f6620     gh space for for
   ba808:	2074616d 61707865 6f69736e 5028206e     mat expansion (P
   ba818:	7361656c 75732065 74696d62 6c756620     lease submit ful
   ba828:	7562206c 65722067 74726f70 20746120     l bug report at 
   ba838:	70747468 2f2f3a73 2e636367 2e756e67     https://gcc.gnu.
   ba848:	2f67726f 73677562 0a3a292f 20202020     org/bugs/):.    
   ba858:	32313000 36353433 00393837 69736162     .0123456789.basi
   ba868:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
   ba878:	00657461                                ate.

000ba87c <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba87c:	000ba914 000ba888 000ba938              ........8...

000ba888 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba888:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   ba898:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   ba8a8:	00000045                                E...

000ba8ac <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba8ac:	00000000 000ba87c 000b7fbd 000b7fd1     ....|...........
   ba8bc:	000b8165 000b8165 000b803b 000b7f7f     e...e...;.......
   ba8cc:	000b8023 000b7fe5 000b7fb1              #...........

000ba8d8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba8d8:	000ba914 000ba8e4 000ba87c              ........|...

000ba8e4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba8e4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   ba8f4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   ba904:	456f666e 00000000                       nfoE....

000ba90c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba90c:	00000000 000ba8d8 000b8065 000b8079     ........e...y...
   ba91c:	000b8165 000b8165 000b803b 000b7f7f     e...e...;.......
   ba92c:	000b8139 000b80c5 000b808d              9...........

000ba938 <_ZTISt9type_info>:
   ba938:	000ba8b4 000ba940                       ....@...

000ba940 <_ZTSSt9type_info>:
   ba940:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   ba950:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   ba960:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   ba970:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   ba980:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   ba990:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   ba9a0:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   ba9b0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   ba9c0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   ba9d0:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
   ba9e0:	00666e00 74696e69 6e610079 00000000     .nf.inity.an....

000ba9f0 <fpi.1>:
   ba9f0:	00000035 fffffbce 000003cb 00000001     5...............
   baa00:	00000000                                ....

000baa04 <fpinan.0>:
   baa04:	00000034 fffffbce 000003cb 00000001     4...............
   baa14:	00000000                                ....

000baa18 <tinytens>:
   baa18:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   baa28:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   baa38:	64ac6f43 11680628 746e6d2f 726f772f     Co.d(.h./mnt/wor
   baa48:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   baa58:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   baa68:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   baa78:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   baa88:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   baa98:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   baaa8:	696c2f62 732f6362 6e697274 74732f67     b/libc/string/st
   baab8:	6b6f7472                                 rtok.c.

000baabf <_ctype_>:
   baabf:	20202000 20202020 28282020 20282828     .         ((((( 
   baacf:	20202020 20202020 20202020 20202020                     
   baadf:	10108820 10101010 10101010 10101010      ...............
   baaef:	04040410 04040404 10040404 10101010     ................
   baaff:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bab0f:	01010101 01010101 01010101 10101010     ................
   bab1f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bab2f:	02020202 02020202 02020202 10101010     ................
   bab3f:	00000020 00000000 00000000 00000000      ...............
	...
   babbf:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   babcf:	6d2f0064 772f746e 736b726f 65636170     d./mnt/workspace
   babdf:	726f772f 6170736b 472f6563 312d4343     /workspace/GCC-1
   babef:	69702d30 696c6570 6a2f656e 696b6e65     0-pipeline/jenki
   babff:	472d736e 312d4343 69702d30 696c6570     ns-GCC-10-pipeli
   bac0f:	342d656e 30325f38 31313032 315f3432     ne-48_20201124_1
   bac1f:	31363036 34363038 72732f31 656e2f63     606180641/src/ne
   bac2f:	62696c77 77656e2f 2f62696c 6362696c     wlib/newlib/libc
   bac3f:	6474732f 2f62696c 6f746467 65672d61     /stdlib/gdtoa-ge
   bac4f:	78656874 0000632e                        thex.c...

000bac58 <_C_numeric_locale>:
   bac58:	000ba55c 000ba417 2003cd6c 4f500043     \.......l.. C.PO
   bac68:	00584953 746e6d2f 726f772f 6170736b     SIX./mnt/workspa
   bac78:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   bac88:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   bac98:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   baca8:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   bacb8:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   bacc8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   bacd8:	732f6362 696c6474 706d2f62 2e636572     bc/stdlib/mprec.
   bace8:	00000063 00000000                       c.......

000bacf0 <__mprec_bigtens>:
   bacf0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bad00:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bad10:	7f73bf3c 75154fdd                       <.s..O.u

000bad18 <__mprec_tens>:
   bad18:	00000000 3ff00000 00000000 40240000     .......?......$@
   bad28:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bad38:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bad48:	00000000 412e8480 00000000 416312d0     .......A......cA
   bad58:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bad68:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bad78:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bad88:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bad98:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bada8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   badb8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   badc8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   badd8:	79d99db4 44ea7843                       ...yCx.D

000bade0 <p05.0>:
   bade0:	00000005 00000019 0000007d              ........}...

000badec <link_const_data_end>:
   badec:	000b5405 	.word	0x000b5405
   badf0:	000b5459 	.word	0x000b5459
   badf4:	000b62a9 	.word	0x000b62a9
   badf8:	000b62d1 	.word	0x000b62d1
   badfc:	000b65b9 	.word	0x000b65b9
   bae00:	000b66f1 	.word	0x000b66f1
   bae04:	000b6869 	.word	0x000b6869
   bae08:	000b68b1 	.word	0x000b68b1
   bae0c:	000b78e1 	.word	0x000b78e1
   bae10:	000b7a45 	.word	0x000b7a45
